{"version":3,"file":"formjs-systemjs.min.js","sources":["../src/modules/version.js","../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/checkFormEl.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/getValidateFieldDefault.js","../src/modules/helpers/getValidateFormDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/optionsUtils.js","../src/modules/helpers/checkDirtyField.js","../src/modules/options.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/listenerCallbacks/submit.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/formStartup.js","../src/modules/init.js","../src/modules/helpers/getFilledFields.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFormValidity.js","../src/index.js","../src/modules/destroy.js","../src/modules/helpers/excludeSelector.js","../src/modules/validationErrors.js"],"sourcesContent":["\nexport const version = '4.2.2';\n","\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n    const isString = typeof formEl,\n          isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n          isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n          obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n          };\n\n    return obj;\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    }\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getUniqueFields = nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( nodeList ).filter(fieldEl => {\n        const name = fieldEl.name,\n              type = fieldEl.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !fieldEl.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, fieldEl: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const getValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    const objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { addClass, checkDirtyField } from './helpers';\n\nexport const defaultCallbacksInOptions = {\n    fieldOptions: {\n\n        beforeValidation: function beforeValidationDefault ( fieldObj ) {\n\n            const fieldOptions = this.options.fieldOptions;\n\n            checkDirtyField( fieldObj.fieldEl, fieldOptions );\n            if( !fieldOptions.skipUIfeedback ){\n                addClass( fieldObj.fieldEl.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n            }\n\n        }\n\n    },\n    formOptions: {\n\n        getFormData: function getFormDataDefault ( filteredFields ) {\n\n            const formData = {},\n                  formEl = this.formEl;\n\n            filteredFields.forEach(function( fieldEl ){\n                const isCheckbox = fieldEl.type === 'checkbox',\n                      isRadio = fieldEl.type === 'radio',\n                      isSelect = fieldEl.matches('select'),\n                      name = fieldEl.name;\n                let value = fieldEl.value;\n                                \n                if( isCheckbox ) {\n                    \n                    value = fieldEl.checked;\n                    const checkboxes = Array.from( formEl.querySelectorAll('[name=\"'+ name +'\"]') );\n                    if( checkboxes.length > 1 ){\n\n                        value = [];\n                        const checkedElems = checkboxes.filter(field => field.checked);\n                        checkedElems.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                        \n                } else if( isRadio ){\n                    \n                    const checkedRadio = formEl.querySelector('[name=\"'+ name +'\"]:checked');\n                    value = (checkedRadio === null ? null : checkedRadio.value);\n                    \n                } else if( isSelect ){\n\n                    const selectedOpts = Array.from( fieldEl.options ).filter(option => option.selected);\n                    if( selectedOpts.length > 1 ){\n\n                        value = [];\n                        selectedOpts.forEach(fieldEl => {\n                            value.push( fieldEl.value );\n                        });\n\n                    }\n                }\n\n                formData[ name ] = value;\n            });\n\n            return formData;\n\n        }\n\n    }\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( fields, fieldOptions ) => {\n\n    fields = isNodeList(fields) ? Array.from( fields ) : [fields];\n    fields.forEach(fieldEl => {\n        if( fieldEl.type !== 'checkbox' && fieldEl.type !== 'radio' ){\n            const containerEl = fieldEl.closest( fieldOptions.questionContainer ) || fieldEl;\n            if( fieldEl.value ){\n                addClass( containerEl, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( containerEl, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [defaultCallbacksInOptions.fieldOptions.beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        handleFileUpload:       true,\n        handleValidation:       true,\n        maxFileSize:            10,\n        onValidationCheckAll:   true,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            defaultCallbacksInOptions.formOptions.getFormData,\n        handleSubmit:           true\n    }\n    \n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, fieldEl ){\n    const dataChecksEl = fieldEl.closest('form').querySelector('[name=\"' + fieldEl.name + '\"][data-checks]');\n    return dataChecksEl ? checks(dataChecksEl) : { result: fieldEl.checked };\n}\n","\nexport const checks = function( fieldEl ){\n    const attrValue = JSON.parse( fieldEl.getAttribute('data-checks') ),\n          checkedElLength = fieldEl.closest('form').querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length,\n          isMinOk = checkedElLength >= attrValue[0],\n          isMaxOk = checkedElLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, fieldEl ){\n    const checkFromEl = fieldEl.closest('form').querySelector( '[name=\"' + fieldEl.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === checkFromEl.value };\n}\n","\nexport const exactLength = function( value, fieldEl ){\n    const valueLength = value.length,\n          exactLength = fieldEl.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, fieldEl ){\n    const maxFileSize = (fieldEl.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n          MIMEtype = fieldEl.accept ? new RegExp(fieldEl.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from(fieldEl.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, fieldEl ){\n    const valueL = value.length,\n          attrValue = JSON.parse( fieldEl.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = { stringLength: true };\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, fieldEl ){\n    let maxVal = fieldEl.max;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, fieldEl ){\n    return { result: value.length <= fieldEl.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, fieldEl ){\n    let minVal = fieldEl.min;\n    const dateFormat = fieldEl.getAttribute('data-date-format');\n    \n    if( fieldEl.type === 'date' || fieldEl.getAttribute('data-date-format') ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, fieldEl ){\n    return { result: value.length >= fieldEl.minLength * 1 };\n}\n","\nexport const pattern = function( value, fieldEl ){\n    return { result: new RegExp(fieldEl.pattern).test(value) };\n}\n","\nexport const radio = function( value, fieldEl ){\n    const fieldChecked = fieldEl.closest('form').querySelector( '[name=\"'+ fieldEl.name +'\"]:checked' ),\n          isValid = fieldChecked !== null && fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const fieldEl = event.target;\n    \n    if( fieldEl.matches('[data-type=\"number\"]') ){\n        let fieldValue = fieldEl.value,\n            hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            const valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n            fieldEl.value = valueReplaced;\n        }\n    }\n\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const fieldEl = event.target;\n    \n    if( fieldEl.matches( '[maxlength]' ) ){\n        const maxLength = fieldEl.maxLength * 1,\n            keyPressed = event.which || event.keyCode,\n            allowedKeys = [8, 37, 38, 39, 46];\n\n        if( fieldEl.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const fieldEl = event.target;\n    const fieldOptions = fieldEl.closest('form').formjs.options.fieldOptions;\n\n    if( fieldEl.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, getValidateFormDefault, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const formEl = event.target,\n          instance = formEl.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          btnEl = formEl.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( btnEl && enableBtn ){ btnEl.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( btnEl ){\n        if( btnEl.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        btnEl.disabled = true;\n    }\n\n    removeClass( formEl, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( formEl, formCssClasses.submit );\n    \n    const handleValidation = options.fieldOptions.handleValidation,\n          formValidationPromise = (handleValidation ? instance.validateForm() : Promise.resolve(getValidateFormDefault()));\n\n    formValidationPromise.then(formValidation => {\n\n        const beforeSendData = { stopExecution: false, formData: {} };\n\n        if( !formValidation.result ){\n            eventPreventDefault();\n            removeClass( formEl, formCssClasses.submit );\n            beforeSendData.stopExecution = true;\n            return [beforeSendData];\n        }\n        \n        const formDataObj = (isAjaxForm ? instance.getFormData() : null),\n              callbacksBeforeSend = options.formOptions.beforeSend;\n\n        if( formDataObj ){\n            beforeSendData.formData = formDataObj;\n        }\n\n        const rfsObject = {\n              functionsList: callbacksBeforeSend,\n              data: beforeSendData,\n              stopConditionFn: function(data){ return data.stopExecution; }\n        };\n        return runFunctionsSequence(rfsObject);\n\n    }).then(dataList => {\n\n        if( dataList.filter(data => data.stopExecution).length > 0 ){\n            eventPreventDefault();\n            return false;\n        }\n        \n        if( isAjaxForm ){\n\n            const formData = dataList.pop().formData;\n            addClass( formEl, formCssClasses.ajaxPending );\n            dispatchCustomEvent( formEl, customEvents.form.submit, ajaxCall( formEl, formData, options ) );\n            \n        }\n\n    });\n    \n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept');\n    const contentType = response.headers.get('Content-Type');\n    const headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( formEl, formDataObj, options ){\n\n    let btnEl = formEl.querySelector('[type=\"submit\"]'),\n        timeoutTimer,\n        ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n        isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.fieldOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( formEl.querySelectorAll('[type=\"file\"]') ).forEach(function( field ){\n            Array.from(field.files).forEach(function( file, idx ){\n                const name = field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n\n        timeoutTimer = window.setTimeout(function() {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(function( response ){\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n\n            const fetchMethod = getFetchMethod(response, ajaxOptions);\n\n            return response[fetchMethod]();\n        })\n        .then(function( data ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(function( error ){\n            addClass( formEl, options.formOptions.cssClasses.ajaxError );\n            return Promise.reject(error);\n        })\n        .finally(function(){\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( formEl, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( formEl, options.formOptions.cssClasses.ajaxComplete );\n            btnEl.disabled = false;\n        });\n\n}\n","\nimport { fieldsStringSelector, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          fieldEl = event.target,\n          self = fieldEl.closest('form').formjs;\n\n    if( fieldEl.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && !isChangeEvent)\n        ){\n            \n            return self.validateField( fieldEl ).then(obj => {\n                const type = obj.fieldEl.type,\n                      realtedFieldEqualTo = obj.fieldEl.closest('form').querySelector('[data-equal-to=\"'+ obj.fieldEl.name +'\"]');\n\n                if(\n                    // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                    (obj.fieldEl.required || obj.fieldEl.matches('[data-validate-if-filled]')) && \n                    !(type === 'checkbox' || type === 'radio') && \n                    realtedFieldEqualTo && realtedFieldEqualTo.value.trim() !== ''\n                ){\n                    self.validateField( realtedFieldEqualTo );\n                }\n\n                return obj;\n            });\n\n        }\n    }\n    \n}\n","\nimport { addClass, fieldsStringSelector, removeClass } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const fieldsArray = event.data.fieldEl ? [event.data] : event.data.fields,\n          options = fieldsArray[0].fieldEl.closest('form').formjs.options.fieldOptions;\n\n    fieldsArray.forEach(function( obj ){\n        const fieldEl = obj.fieldEl;\n        if( fieldEl.matches( fieldsStringSelector ) ){\n            const containerEl = fieldEl.closest( options.questionContainer ),\n                  isReqFrom = fieldEl.matches('[data-required-from]'),\n                  reqMoreEl = document.querySelector( fieldEl.getAttribute('data-required-from') );\n\n            if( containerEl !== null ){\n                removeClass( containerEl, options.cssClasses.pending );\n            }\n\n            if( containerEl !== null && !options.skipUIfeedback ){\n\n                if( obj.result ){\n\n                    if( !isReqFrom || (isReqFrom && reqMoreEl.checked) ){\n                        // IF FIELD IS VALID\n                        const errorClasses = options.cssClasses.error + ' ' + options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                        removeClass( containerEl, errorClasses );\n                        addClass( containerEl, options.cssClasses.valid );\n                    }\n\n                } else {\n\n                    // IF FIELD IS NOT VALID\n                    let extraErrorClass = options.cssClasses.errorRule;\n\n                    // HANDLE CASE OF FIELD data-checks\n                    const isChecks = fieldEl.matches('[data-checks]'),\n                          checkedElLength = (isChecks ? containerEl.querySelectorAll('[name=\"' + fieldEl.name + '\"]:checked').length : 0);\n\n                    if( (!isChecks && (obj.errors && obj.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                        extraErrorClass = options.cssClasses.errorEmpty;\n                    }\n\n                    let errorClasses = options.cssClasses.error + ' ' + extraErrorClass,\n                        errorClassToRemove = options.cssClasses.errorEmpty + ' ' + options.cssClasses.errorRule;\n                    removeClass( containerEl, options.cssClasses.valid + ' ' + errorClassToRemove );\n                    addClass( containerEl, errorClasses );\n\n                }\n            }\n        }\n    });\n\n}\n","\nimport { customEvents } from './helpers';\nimport { keypressMaxlength, dataTypeNumber, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\nexport function formStartup( formEl, options ){\n\n    formEl.noValidate = true;\n\n    const fieldOptions = options.fieldOptions,\n          formOptions = options.formOptions;\n\n    // HANDLE FIELD VALIDATION\n    if( fieldOptions.handleValidation ){\n        \n        // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n        if( fieldOptions.strictHtmlValidation ){\n            \n            // maxlength\n            // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n            formEl.addEventListener('keypress', keypressMaxlength, false);\n\n            // data-type=\"number\"\n            // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n            formEl.addEventListener('input', dataTypeNumber, false);\n            \n        }\n        \n        if( fieldOptions.preventPasteFields && formEl.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n            // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n            formEl.addEventListener('paste', pastePrevent, false);\n        }\n\n        // INIT EVENTS LISTENER ( AS IN fieldOptions )\n        fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n            const useCapturing = eventName === 'blur' ? true : false;\n            formEl.addEventListener(eventName, validation, useCapturing);\n        });\n\n        formEl.addEventListener(customEvents.field.validation, validationEnd, false);\n\n    }\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        formEl.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( formEl.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = formEl.getAttribute('enctype');\n            }\n\n            if( formEl.getAttribute('method') ){\n                formOptions.ajaxOptions.method = formEl.getAttribute('method').toUpperCase();\n            }\n\n            if( formEl.getAttribute('action') ){\n                formOptions.ajaxOptions.url = formEl.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport { getFilledFields, isFieldForChangeEvent } from './helpers';\nimport { validation } from './listenerCallbacks';\n\nexport const init = function( formEl ){\n\n    const instance = formEl.formjs;\n    const formFields = getFilledFields( formEl );\n\n    // VALIDATE ALL FILLED FIELDS\n    return Promise.all( formFields.map(fieldEl => {\n\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl);\n        const fakeEventObj = { target: fieldEl, type: (isFieldForChangeEventBoolean ? 'change': '') };\n        return validation( fakeEventObj );\n\n    }) ).then(fields => {\n        instance.isInitialized = true;\n        return { instance, fields };\n    });\n\n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = formEl => {\n    return getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) )\n    .map(fieldEl => {\n\n        const name = fieldEl.name,\n              type = fieldEl.type,\n              isCheckboxOrRadio = (type === 'checkbox' || type === 'radio'),\n              fieldChecked = formEl.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = (isReqFrom ? formEl.querySelector(fieldEl.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && reqMoreEl.checked) || (!isReqFrom && fieldEl.value) ? fieldEl : null\n        );\n\n    })\n    .filter(fieldEl => fieldEl !== null);\n}\n","\nimport { getValidateFieldDefault, isDOMNode, runFunctionsSequence } from './helpers';\nimport { isValid } from './isValid';\n\nexport function checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode(fieldEl) ){\n        const obj = getValidateFieldDefault({fieldEl});\n        return Promise.resolve(obj);\n    }\n\n    const formEl = fieldEl.closest('form'),\n          isValidValue = fieldEl.value.trim().length > 0;\n\n     // HANDLE FIELDS radio/data-require-more\n     if( fieldEl.type === 'radio' ){\n        const checkedEl = fieldEl.checked ? fieldEl : formEl.querySelector('[name=\"'+ fieldEl.name +'\"]:checked'),\n              reqMoreIsChecked = checkedEl && checkedEl.matches('[data-require-more]'),\n              findReqMoreEl = reqMoreIsChecked ? checkedEl : formEl.querySelector('[data-require-more][name=\"'+ fieldEl.name +'\"]'),\n              findReqFromEl = findReqMoreEl ? formEl.querySelector('[data-required-from=\"#'+ findReqMoreEl.id +'\"]') : null;\n        \n        if( checkedEl && findReqFromEl ){\n            findReqFromEl.required = findReqMoreEl.required && findReqMoreEl.checked;\n            if( !reqMoreIsChecked ){\n                findReqFromEl.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                findReqFromEl.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELDS data-required-from\n    if( fieldEl.matches('[data-required-from]') && isValidValue ){\n        const reqMoreEl = formEl.querySelector( fieldEl.getAttribute('data-required-from') );\n        reqMoreEl.checked = true;\n        fieldEl.required = reqMoreEl.required;\n    }\n\n    const needsValidation = fieldEl.required || (fieldEl.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: {fieldEl}\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid(fieldEl, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        });\n\n}\n","\nimport { getValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( fieldEl, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = fieldEl.value,\n          obj = getValidateFieldDefault({result: fieldValue.trim().length > 0, fieldEl}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test(fieldEl.type),\n          hasSelectedInput = fieldEl.closest('form').querySelectorAll('[name=\"'+ fieldEl.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from(fieldEl.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, fieldEl, fieldOptions) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, fieldEl)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n            data.errors.rule = true;\n        }\n        return data;\n\n    });\n\n}\n","\nimport { fieldsStringSelector, getUniqueFields, getValidateFieldDefault, getValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFormValidity( formEl, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const fieldsList = getUniqueFields( formEl.querySelectorAll(fieldsStringSelector) );\n\n    return Promise.all( fieldsList.map(fieldEl => {\n\n        if( fieldToSkip && fieldEl === fieldToSkip ){\n            const obj = getValidateFieldDefault({fieldEl, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( fieldEl, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.filter(fieldObj => !fieldObj.result).length === 0;\n        return getValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nimport { version }              from './modules/version';\nimport { checkFormEl, customEvents, dispatchCustomEvent, excludeSelector, isNodeList, mergeObjects, removeClass } from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { validationErrors }     from './modules/validationErrors';\nimport { validationEnd }        from './modules/listenerCallbacks';\nimport { formStartup }          from './modules/formStartup';\nimport { destroy }              from './modules/destroy';\nimport { init }                 from './modules/init';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFormValidity }    from './modules/checkFormValidity';\n\nclass Form {\n\n    constructor( formEl, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(formEl);\n\n        if( argsL === 0 || (argsL > 0 && !formEl) ){\n            throw new Error('First argument \"formEl\" is missing or falsy!');\n        }\n        if( isNodeList(formEl) ){\n            throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.formEl = checkFormElem.element;\n        self.formEl.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ];\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions';\n            let cbOpt = self.options[optionType][cbName];\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n            }\n        });\n\n        formStartup( self.formEl, self.options );\n    }\n\n    destroy(){\n        destroy(this.formEl, this.options);\n    }\n    \n    getFormData(){\n        const formFieldsEl = this.formEl.querySelectorAll('input, select, textarea'),\n              filteredFields = Array.from( formFieldsEl ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData(filteredFields);\n    }\n\n    init(){\n        return init(this.formEl);\n    }\n\n    validateField( fieldEl, fieldOptions ){\n        const self = this;\n        fieldEl = (typeof fieldEl === 'string' ? self.formEl.querySelector(fieldEl) : fieldEl);\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        const formEl = self.formEl;\n        return checkFieldValidity(fieldEl, fieldOptions, self.validationRules, self.validationErrors)\n            .then(obj => {\n                dispatchCustomEvent( obj.fieldEl, customEvents.field.validation, obj, {bubbles: false} );\n                dispatchCustomEvent( formEl, customEvents.field.validation, obj );\n                if( obj.result && fieldOptions.onValidationCheckAll ){\n                    // FORCE skipUIfeedback TO BE TEMPORARY true\n                    fieldOptions.skipUIfeedback = true;\n                    checkFormValidity( formEl, fieldOptions, self.validationRules, self.validationErrors, obj.fieldEl )\n                        .then(dataForm => {\n                            const clMethodName = dataForm.result ? 'add' : 'remove';\n                            formEl.classList[clMethodName]( self.options.formOptions.cssClasses.valid );\n                            dispatchCustomEvent( formEl, customEvents.form.validation, dataForm );\n                        });\n                } else if( !obj.result ){\n                    removeClass( formEl, self.options.formOptions.cssClasses.valid );\n                }\n                return obj;\n            });\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        const formEl = self.formEl;\n        return checkFormValidity(formEl, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                const clMethodName = data.result ? 'add' : 'remove';\n                formEl.classList[clMethodName]( self.options.formOptions.cssClasses.valid );\n                validationEnd( {data} );\n                dispatchCustomEvent( formEl, customEvents.form.validation, data );\n                return data;\n            });\n\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.isInitialized = false;\nForm.prototype.options = options;\nForm.prototype.validationErrors = validationErrors;\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { customEvents } from './helpers';\nimport { keypressMaxlength, dataTypeNumber, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\n\nexport function destroy( formEl, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        formEl.removeEventListener('keypress', keypressMaxlength, false);\n        formEl.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        formEl.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        formEl.removeEventListener('submit', submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(function( eventName ){\n        const useCapturing = (eventName === 'blur' ? true : false);\n        formEl.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    formEl.removeEventListener(customEvents.field.validation, validationEnd, false);\n\n    delete formEl.formjs;\n    \n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n","\nexport const validationErrors = {\n\n    email: function ( string ) {\n        const obj = {};\n\n        if( string.indexOf('@') === -1 ){\n\n            // @ IS MISSING\n            obj.missingAtChar = true;\n\n        } else {\n\n            const splitAt_at = string.split('@');\n            if( splitAt_at[0].length === 0 ){\n\n                // USER NAME IS MISSING\n                obj.missingUserName = true;\n\n            }\n\n            if( splitAt_at[1].length === 0 ){\n\n                // IS EMPTY AFTER @\n                obj.missingDomain = true;\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else if( splitAt_at[1].indexOf('.') === -1 ) {\n\n                // DOT IS MISSING\n                obj.missingExtensionDot = true;\n                obj.missingExtension = true;\n\n            } else {\n\n                // EXTENSION MISSING OR NOT LONG ENOUGH\n                const splitAt_dot = splitAt_at[1].split('.'),\n                      extLength = splitAt_dot[1].length;\n                if( extLength === 0 ) {\n                    obj.missingExtension = true;\n                } else if( extLength < 2 ){\n                    obj.minlengthExtension = true;\n                }\n\n            }\n        }\n\n        return obj;\n\n    }\n\n}\n"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","customEvents","validation","submit","isPlainObject","object","Object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","data","eventOptions","bubbles","eventObj","Event","dispatchEvent","fieldsStringSelector","formatMap","dateArray","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","length","indexOf","replace","join","getUniqueFields","currentFieldName","currentFieldType","fieldEl","name","type","matches","getValidateFieldDefault","obj","getValidateFormDefault","fields","isFieldForChangeEvent","runFunctionsSequence","functionsList","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","Promise","resolve","dataList","serializeObject","_typeof","constructor","a","k","encodeURIComponent","toCamelCase","string","all","letter","toUpperCase","defaultCallbacksInOptions","fieldOptions","beforeValidation","fieldObj","this","options","containerEl","closest","questionContainer","value","dirty","checkDirtyField","skipUIfeedback","pending","formOptions","getFormData","filteredFields","formData","isCheckbox","isRadio","isSelect","checked","checkboxes","querySelectorAll","field","checkedRadio","selectedOpts","option","selected","error","errorEmpty","errorRule","valid","focusOnRelated","handleFileUpload","handleValidation","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","ajaxOptions","cache","credentials","headers","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","handleSubmit","validationRules","date","test","email","number","checkbox","dataChecksEl","attrValue","JSON","parse","getAttribute","checkedElLength","isMinOk","isMaxOk","errors","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","stringLength","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","fieldChecked","trim","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","keypressMaxlength","keyPressed","which","keyCode","pastePrevent","formjs","preventDefault","instance","formCssClasses","isAjaxForm","btnEl","eventPreventDefault","enableBtn","disabled","validateForm","formValidation","beforeSendData","stopExecution","formDataObj","callbacksBeforeSend","pop","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","reject","fetchMethod","get","contentType","headerOpt","getFetchMethod","clearTimeout","ajaxCall","isChangeEvent","self","isFieldForChangeEventBoolean","validateField","realtedFieldEqualTo","required","validationEnd","fieldsArray","isReqFrom","reqMoreEl","errorClasses","extraErrorClass","isChecks","empty","errorClassToRemove","formStartup","noValidate","addEventListener","useCapturing","init","formFields","map","isCheckboxOrRadio","getFilledFields","isInitialized","checkFieldValidity","validationErrors","isValidValue","checkedEl","reqMoreIsChecked","findReqMoreEl","findReqFromEl","id","focus","needsValidation","dataObj","isRadioOrCheckbox","hasSelectedInput","validationMethods","attributes","accList","attr","attrName","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","rule","isValid","checkFormValidity","fieldToSkip","fieldsList","areAllFieldsValid","Form","optionsObj","argsL","checkFormElem","Error","cbList","cbName","optionType","cbOpt","cbFn","bind","errorsObj","rulesObj","removeEventListener","destroy","formFieldsEl","dataForm","clMethodName","missingAtChar","splitAt_at","missingUserName","missingDomain","missingExtensionDot","missingExtension","extLength","minlengthExtension","version"],"mappings":"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"}