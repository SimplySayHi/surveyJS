{"version":3,"file":"formjs.min.js","sources":["../src/modules/helpers/addClass.js","../src/modules/helpers/isNodeList.js","../src/modules/helpers/removeClass.js","../src/modules/helpers/isDOMNode.js","../src/modules/helpers/checkFormEl.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/excludeSelector.js","../src/modules/helpers/fieldsStringSelector.js","../src/modules/helpers/finalizeFieldPromise.js","../src/modules/helpers/finalizeFieldsGroupPromise.js","../src/modules/helpers/finalizeFormPromise.js","../src/modules/helpers/getDateAsNumber.js","../src/modules/helpers/getSplitChar.js","../src/modules/helpers/getJSONobjectFromFieldAttribute.js","../src/modules/helpers/getUniqueFields.js","../src/modules/helpers/mergeValidateFieldDefault.js","../src/modules/helpers/mergeValidateFormDefault.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/runFunctionsSequence.js","../src/modules/helpers/serializeObject.js","../src/modules/helpers/toCamelCase.js","../src/modules/options.js","../src/modules/optionsUtils/beforeValidation.js","../src/modules/helpers/checkDirtyField.js","../src/modules/optionsUtils/getFormData.js","../src/modules/validationRules.js","../src/modules/validationRules/date.js","../src/modules/validationRules/email.js","../src/modules/validationRules/number.js","../src/modules/validationRules/checkbox.js","../src/modules/validationRules/checks.js","../src/modules/validationRules/equalTo.js","../src/modules/validationRules/exactLength.js","../src/modules/validationRules/file.js","../src/modules/validationRules/length.js","../src/modules/validationRules/max.js","../src/modules/validationRules/maxlength.js","../src/modules/validationRules/min.js","../src/modules/validationRules/minlength.js","../src/modules/validationRules/pattern.js","../src/modules/validationRules/radio.js","../src/modules/listenerCallbacks/dataTypeNumber.js","../src/modules/listenerCallbacks/formValidationEnd.js","../src/modules/listenerCallbacks/keypressMaxlength.js","../src/modules/listenerCallbacks/pastePrevent.js","../src/modules/ajaxCall.js","../src/modules/listenerCallbacks/submit.js","../src/modules/listenerCallbacks/groupValidationEnd.js","../src/modules/listenerCallbacks/validation.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/formStartup.js","../src/modules/checkFieldValidity.js","../src/modules/isValid.js","../src/modules/checkFieldsValidity.js","../src/index.js","../src/modules/destroy.js","../src/modules/helpers/getFilledFields.js"],"sourcesContent":["\nexport const addClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.add( className );\n    });\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const removeClass = ( element, cssClasses ) => {\n    cssClasses.split(' ').forEach(className => {\n        element.classList.remove( className );\n    });\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = form => {\n    let isString = typeof form,\n        isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(form)),\n        isFormSelector = isValidNodeSelector && document.querySelector(form).tagName.toLowerCase() === 'form',\n        obj = {\n            result: isDOMNode(form) || isFormSelector,\n            $el: (isString === 'string' ? document.querySelector(form) : form)\n        };\n\n    return obj;\n}\n","\nexport const customEvents = {\n    field: {\n        validation: 'fjs.field:validation'\n    },\n    form: {\n        destroy:    'fjs.form:destroy',\n        init:       'fjs.form:init',\n        submit:     'fjs.form:submit',\n        validation: 'fjs.form:validation'\n    },\n    group: {\n        validation: 'fjs.group:validation'\n    }\n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const excludeSelector = ':not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"file\"]):not([data-exclude-data])'\n","\nexport const fieldsStringSelector = 'input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]):not([type=\"hidden\"]), select, textarea'\n","\nexport const finalizeFieldPromise = ({errors, result}) => {\n    if( result ){\n        return Promise.resolve();\n    }\n    return Promise.reject(errors);\n}\n","\nexport const finalizeFieldsGroupPromise = ({canSubmit, fields, group, result}) => {\n    if( result ){\n        return Promise.resolve({canSubmit, fields, group});\n    }\n    return Promise.reject({fields, group});\n}\n","\nexport const finalizeFormPromise = ({fields, result}) => {\n    if( result ){\n        return Promise.resolve(fields);\n    }\n    return Promise.reject(fields);\n}\n","\nimport { getSplitChar } from './getSplitChar';\n\nconst formatMap = {\n    'YYYY-MM-DD': function(dateArray){\n        return dateArray;\n    },\n    'MM-DD-YYYY': function(dateArray){\n        return [dateArray[2], dateArray[0], dateArray[1]];\n    },\n    'DD-MM-YYYY': function(dateArray){\n        return dateArray.reverse();\n    }\n};\n\nexport const getDateAsNumber = ( dateString, dateFormat ) => {\n    dateFormat = dateFormat || 'YYYY-MM-DD';\n    const splitChar = getSplitChar(dateString);\n\n    if( dateFormat.indexOf(splitChar) < 0 ){\n        return;\n    }\n\n    dateFormat = dateFormat.replace(/[^YMD]/g, '-');\n    dateString = dateString.split(splitChar);\n    dateString = formatMap[dateFormat](dateString).join('');\n    \n    return dateString;\n}\n","\nexport const getSplitChar = string => {\n    // MATCH ANY NON-DIGIT CHAR\n    const separator = string.match(/\\D/);\n    return (separator && separator.length > 0) ? separator[0] : null;\n}\n","\nexport const getJSONobjectFromFieldAttribute = ( fieldEl, attrName ) => {\n    const customAttrEl = fieldEl.closest('['+ attrName +']');\n    return (customAttrEl && JSON.parse(customAttrEl.getAttribute(attrName))) || {};\n}\n","\nexport const getUniqueFields = $nodeList => {\n\n    let currentFieldName = '',\n        currentFieldType = '';\n\n    return Array.from( $nodeList ).filter($field => {\n        const name = $field.name,\n              type = $field.type;\n\n        if( name === currentFieldName && type === currentFieldType ){\n            return false;\n        }\n        \n        if( !$field.matches('[data-required-from]') ){\n            currentFieldName = name;\n            currentFieldType = type;\n        }\n        return true;\n    });\n    \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFieldDefault = obj => {\n    return mergeObjects({}, { result: false, $field: null }, obj);\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const mergeValidateFormDefault = obj => {\n    return mergeObjects({}, { result: true, fields: [] }, obj);\n}\n","\nexport const isFieldForChangeEvent = $field => {\n    return $field.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const runFunctionsSequence = ( { functionsList = [], data = {}, stopConditionFn = () => false } = {} ) => {\n    return functionsList.reduce((acc, promiseFn) => {\n        return acc.then(res => {\n            let dataNew = mergeObjects({}, res[res.length - 1]);\n            if( stopConditionFn(dataNew) ){\n                return Promise.resolve(res);\n            }\n            return new Promise(resolve => { resolve(promiseFn(dataNew)) })\n                .then((result = dataNew) => {\n                    res.push(result);\n                    return res;\n                });\n        });\n    }, Promise.resolve([data]))\n        .then(dataList => dataList.length > 1 ? dataList.slice(1) : dataList);\n}\n","\nexport const serializeObject = obj => {\n    const objToString = (\n            (obj && typeof obj === 'object' && obj.constructor === Object) ? \n            Object.keys(obj)\n                .reduce((a,k) => {\n                    a.push(k+'='+encodeURIComponent(obj[k]));\n                    return a\n                },[]).join('&') : \n            obj\n    );\n    return objToString;\n}\n","\nexport const toCamelCase = string => {\n    return string.replace(/-([a-z])/ig, (all, letter) => { return letter.toUpperCase(); });\n}\n","\nimport { beforeValidation } from './optionsUtils/beforeValidation';\nimport { getFormData } from './optionsUtils/getFormData';\n\nexport const options = {\n\n    fieldOptions: {\n        beforeValidation:       [beforeValidation],\n        cssClasses: {\n            dirty:              'is-dirty',\n            error:              'has-error',\n            errorEmpty:         'has-error-empty',\n            errorRule:          'has-error-rule',\n            pending:            'is-pending',\n            valid:              'is-valid'\n        },\n        focusOnRelated:         true,\n        maxFileSize:            10,\n        onValidationCheckAll:   false,\n        preventPasteFields:     '[type=\"password\"], [data-equal-to]',\n        questionContainer:      '[data-formjs-question]',\n        skipUIfeedback:         false,\n        strictHtmlValidation:   true,\n        trimValue:              false,\n        validateOnEvents:       'input change'\n    },\n\n    formOptions: {\n        ajaxOptions:            {\n            cache:              'no-store',\n            credentials:        'same-origin',\n            headers: {\n                                'Content-Type': 'application/json',\n                                'Accept':       'application/json'\n            },\n            method:             'POST',\n            mode:               'same-origin',\n            redirect:           'follow',\n            timeout:            0,\n            url:                location.href\n        },\n        ajaxSubmit:             true,\n        beforeSend:             [],\n        cssClasses: {\n            ajaxComplete:       'ajax-complete',\n            ajaxError:          'ajax-error',\n            ajaxPending:        'ajax-pending',\n            ajaxSuccess:        'ajax-success',\n            submit:             'is-submitting',\n            valid:              'is-valid'\n        },\n        getFormData:            getFormData,\n        groups:                 [],\n        handleFileUpload:       true,\n        handleSubmit:           true,\n        onInitCheckFilled:      true\n    }\n    \n}\n","\nimport { addClass, checkDirtyField, isFieldForChangeEvent } from '../helpers';\n\nexport const beforeValidation = function beforeValidationDefault ( { $field, fieldOptions } ) {\n\n    if( fieldOptions.trimValue && !isFieldForChangeEvent($field) ){\n        $field.value = $field.value.trim();\n    }\n\n    checkDirtyField( $field, fieldOptions );\n\n    if( !fieldOptions.skipUIfeedback ){\n        addClass( $field.closest( fieldOptions.questionContainer ), fieldOptions.cssClasses.pending );\n    }\n\n}\n","\nimport { addClass } from './addClass';\nimport { isNodeList } from './isNodeList';\nimport { removeClass } from './removeClass';\n\nexport const checkDirtyField = ( $fields, fieldOptions ) => {\n\n    $fields = isNodeList($fields) ? Array.from( $fields ) : [$fields];\n    $fields.forEach($field => {\n        if( $field.type !== 'checkbox' && $field.type !== 'radio' ){\n            const $container = $field.closest( fieldOptions.questionContainer ) || $field;\n            if( $field.value ){\n                addClass( $container, fieldOptions.cssClasses.dirty );\n            } else {\n                removeClass( $container, fieldOptions.cssClasses.dirty );\n            }\n        }\n    });\n    \n}\n","\nexport const getFormData = function getFormDataDefault( $filteredFields, trimValues ){\n\n    const formData = {};\n    const $form = this.$form;\n    let prevObj = formData;\n  \n    $filteredFields.forEach($field => {\n        const isCheckbox = $field.type === \"checkbox\";\n        const isRadio = $field.type === \"radio\";\n        const isSelect = $field.matches(\"select\");\n        const name = $field.name;\n        let value = trimValues ? $field.value.trim() : $field.value;\n  \n        if( isCheckbox ){\n\n            value = $field.checked;\n            let $checkboxes = Array.from( $form.querySelectorAll('[name=\"' + name + '\"]') );\n            if( $checkboxes.length > 1 ){\n                value = [];\n                let $checked = $checkboxes.filter((field) => field.checked);\n                $checked.forEach($field => {\n                    value.push($field.value);\n                });\n            }\n\n        } else if( isRadio ){\n\n            const $checkedRadio = $form.querySelector('[name=\"' + name + '\"]:checked');\n            value = $checkedRadio === null ? null : $checkedRadio.value;\n\n        } else if( isSelect ){\n\n            const $selectedOpts = Array.from($field.options).filter(option => option.selected);\n            if( $selectedOpts.length > 1 ){\n                value = [];\n                $selectedOpts.forEach($field => { \n                    value.push($field.value); \n                });\n            }\n        }\n  \n        const nameSplit = name.split(\".\");\n        nameSplit.forEach((keyName, index, list) => {\n            const isLastKeyName = index + 1 === list.length;\n  \n            if( Array.isArray(prevObj) ){\n                const keyNameSplit = keyName.split(\"___\");\n                const arrPos = keyNameSplit[0] - 1;\n                const arrayHasItemAtIndex = typeof prevObj[arrPos] !== \"undefined\";\n                const arrItemKeyName = keyNameSplit[1];\n  \n                if( !arrayHasItemAtIndex ){\n                    prevObj.push({});\n                }\n  \n                keyName = arrItemKeyName;\n\n                if( isLastKeyName ){\n                    prevObj[arrPos][keyName] = value;\n                } else if( typeof prevObj[arrPos][keyName] === 'undefined' ) {\n                    prevObj[arrPos][keyName] = {};\n                }\n                \n                if( !isLastKeyName ){\n                    prevObj = prevObj[arrPos][keyName];\n                    return;\n                }\n            } else {\n                const isKeyNameArray = keyName.endsWith(\"[]\");\n                keyName = keyName.replace(\"[]\", \"\");\n  \n                if( isLastKeyName ){\n                    prevObj[keyName] = value;\n                } else if( typeof prevObj[keyName] === \"undefined\" ){\n                    if( isKeyNameArray ){\n                        prevObj[keyName] = [];\n                    } else {\n                        prevObj[keyName] = {};\n                    }\n                }\n            }\n  \n            prevObj = isLastKeyName ? formData : prevObj[keyName];\n        });\n    });\n  \n    return formData;\n\n}\n","\nimport { date }         from './validationRules/date';\nimport { email }        from './validationRules/email';\nimport { number }       from './validationRules/number';\n\nimport { checkbox }     from './validationRules/checkbox';\nimport { equalTo }      from './validationRules/equalTo';\nimport { exactLength }  from './validationRules/exactLength';\nimport { file }         from './validationRules/file';\nimport { length }       from './validationRules/length';\nimport { max }          from './validationRules/max';\nimport { maxlength }    from './validationRules/maxlength';\nimport { min }          from './validationRules/min';\nimport { minlength }    from './validationRules/minlength';\nimport { pattern }      from './validationRules/pattern';\nimport { radio }        from './validationRules/radio';\n\nexport const validationRules = {\n    date,\n    email,\n    number,\n\n    checkbox,\n    equalTo,\n    exactLength,\n    file,\n    length,\n    max,\n    maxlength,\n    min,\n    minlength,\n    pattern,\n    radio\n}\n","\n/*\n    DATE AS ISO 8601 DATE FORMAT:\n    YYYY MM DD | YYYY/MM/DD | YYYY.MM.DD | YYYY-MM-DD\n*/\n\nexport const date = function( string ){\n    return {\n        result: /^((((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13578]|1[02])[ \\/\\-.](0[1-9]|[12]\\d|3[01]))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.](0[13456789]|1[012])[ \\/\\-.](0[1-9]|[12]\\d|30))|(((19|[2-9]\\d)\\d{2})[ \\/\\-.]02[ \\/\\-.](0[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))[ \\/\\-.]02[ \\/\\-.]29))$/g.test( string )\n    };\n}\n","\n// https://regex101.com/r/cdlyJy/3\n\nexport const email = function( string ){\n    return {\n        result: /^[a-zA-Z_-]([\\w.-]?[a-zA-Z0-9])*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?){2,})+$/.test( string )\n    };\n}\n","\n/*\n    ALL NUMBERS ( INTEGERS AND FLOATING )\n    VALID NUMBERS: 123 | 123.456 | .123\n*/\n\nexport const number = function( string ){\n    return {\n        result: /[+-]?([0-9]*[.])?[0-9]+/.test( string )\n    };\n}","\nimport { checks } from './checks';\n\nexport const checkbox = function( value, $field ){\n    const $dataChecks = $field.closest('form').querySelector('[name=\"' + $field.name + '\"][data-checks]');\n    return $dataChecks ? checks($dataChecks) : { result: $field.checked };\n}\n","\nexport const checks = function( $field ){\n    const attrValue = JSON.parse( $field.getAttribute('data-checks') ),\n          checkedLength = $field.closest('form').querySelectorAll('[name=\"' + $field.name + '\"]:checked').length,\n          isMinOk = checkedLength >= attrValue[0],\n          isMaxOk = checkedLength <= attrValue[1],\n          obj = { result: isMinOk && isMaxOk };\n\n    if( !obj.result ){\n        obj.errors = { checks: true };\n        if( !isMinOk ){ obj.errors.minChecks = true; }\n        if( !isMaxOk ){ obj.errors.maxChecks = true; }\n    }\n\n    return obj;\n}\n","\nexport const equalTo = function( value, $field ){\n    const $checkFrom = $field.closest('form').querySelector( '[name=\"' + $field.getAttribute('data-equal-to') + '\"]' );\n    return { result: value === $checkFrom.value };\n}\n","\nexport const exactLength = function( value, $field ){\n    const valueLength = value.length,\n          exactLength = $field.getAttribute('data-exact-length') * 1,\n          obj = { result: valueLength === exactLength };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( valueLength < exactLength ){ obj.errors.minlength = true; }\n        else { obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nexport const file = function( value, $field, fieldOptions ){\n    const maxFileSize = ($field.getAttribute('data-max-file-size') || fieldOptions.maxFileSize) * 1,\n          MIMEtype = $field.accept ? new RegExp($field.accept.replace( '*', '[^\\\\/,]+' )) : null,\n          filesList = Array.from($field.files),\n          obj = { result: true };\n\n    filesList.forEach(file => {\n        const exceedMaxFileSize = maxFileSize > 0 && (file.size/1024/1024) > maxFileSize,\n              isAcceptedFileType = MIMEtype !== null ? MIMEtype.test(file.type) : true;\n\n        if( exceedMaxFileSize || !isAcceptedFileType ){\n            obj.result = false;\n            if( typeof obj.errors === 'undefined' ){\n                obj.errors = {};\n            }\n            if( exceedMaxFileSize ){ obj.errors.maxFileSize = true; }\n            if( !isAcceptedFileType ){ obj.errors.acceptedFileType = true; }\n\n        }\n    });\n\n    return obj;\n}\n","\nexport const length = function( value, $field ){\n    const valueL = value.length,\n          attrValue = JSON.parse( $field.getAttribute('data-length') ),\n          isMinlengthOk = valueL >= attrValue[0],\n          isMaxlengthOk = valueL <= attrValue[1],\n          obj = { result: isMinlengthOk && isMaxlengthOk };\n\n    if( !obj.result ){\n        obj.errors = {};\n        if( !isMinlengthOk ){ obj.errors.minlength = true; }\n        if( !isMaxlengthOk ){ obj.errors.maxlength = true; }\n    }\n\n    return obj;\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const max = function( value, $field ){\n    let maxVal = $field.max;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        maxVal = maxVal.split('-').join('');\n    }\n\n    value = value * 1;\n    maxVal = maxVal * 1;\n    \n    return { result: value <= maxVal };\n}\n","\nexport const maxlength = function( value, $field ){\n    return { result: value.length <= $field.maxLength * 1 };\n}\n","\nimport { getDateAsNumber } from '../helpers';\n\nexport const min = function( value, $field ){\n    let minVal = $field.min;\n    const dateFormat = $field.getAttribute('data-date-format');\n    \n    if( $field.type === 'date' || dateFormat ){\n        value = getDateAsNumber( value, dateFormat );\n        minVal = minVal.split('-').join('');\n    }\n\n    value = value * 1;\n    minVal = minVal * 1;\n    \n    return { result: value >= minVal };\n}\n","\nexport const minlength = function( value, $field ){\n    return { result: value.length >= $field.minLength * 1 };\n}\n","\nexport const pattern = function( value, $field ){\n    return { result: new RegExp($field.pattern).test(value) };\n}\n","\nexport const radio = function( value, $field ){\n    const $fieldChecked = $field.closest('form').querySelector( '[name=\"'+ $field.name +'\"]:checked' ),\n          isValid = $fieldChecked !== null && $fieldChecked.value.trim().length > 0;\n\n    return { result: isValid };\n}\n","\nexport const dataTypeNumber = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches('[data-type=\"number\"]') ){\n        let fieldValue = $field.value;\n        const hasInvalidChars = /[^\\d.,+\\-]/.test(fieldValue);\n        \n        if( hasInvalidChars ){\n            event.stopImmediatePropagation();\n            let valueReplaced = fieldValue.replace(/[^\\d.,+\\-]/g, '');\n            $field.value = valueReplaced;\n        }\n    }\n\n}\n","\nexport const formValidationEnd = function( event ){\n    const formEl = event.target;\n    const options = formEl.formjs.options;\n    \n    if( !options.fieldOptions.skipUIfeedback ){\n        const clMethodName = event.detail.result ? 'add' : 'remove';\n        formEl.classList[clMethodName]( options.formOptions.cssClasses.valid );\n    }\n}\n","\nexport const keypressMaxlength = function( event ){\n\n    const $field = event.target;\n    \n    if( $field.matches( '[maxlength]' ) ){\n        const maxLength = $field.maxLength * 1,\n              keyPressed = event.which || event.keyCode,\n              allowedKeys = [8, 37, 38, 39, 46];\n\n        if( $field.value.length >= maxLength && allowedKeys.indexOf(keyPressed) === -1 ){\n            return false;\n        }\n    }\n\n}\n","\nexport const pastePrevent = function( event ){\n\n    const $field = event.target;\n    const fieldOptions = $field.closest('form').formjs.options.fieldOptions;\n\n    if( $field.matches( fieldOptions.preventPasteFields ) ){     \n        event.preventDefault();\n    }\n\n}\n","\nimport { addClass, mergeObjects, removeClass, serializeObject } from './helpers';\n\nconst getFetchMethod = (response, options) => {\n    const accept = options.headers.get('Accept'),\n          contentType = response.headers.get('Content-Type'),\n          headerOpt = accept || contentType || '';\n\n    if( headerOpt.indexOf('application/json') > -1 || headerOpt === '' ){\n        return 'json';\n    } else if( headerOpt.indexOf('text/') > -1 ){\n        return 'text';\n    } else {\n        return 'blob';\n    }\n};\n\nexport function ajaxCall( $form, formDataObj, options ){\n\n    let timeoutTimer;\n    const ajaxOptions = mergeObjects( {}, options.formOptions.ajaxOptions ),\n          isMultipart = ajaxOptions.headers['Content-Type'] === 'multipart/form-data';\n\n    ajaxOptions.body = formDataObj;\n    \n    // POST A FormData OBJECT ( multipart )\n    if( isMultipart && options.formOptions.handleFileUpload ){\n        let formDataMultipart = new FormData();\n        \n        for(let key in ajaxOptions.body){\n            formDataMultipart.append( key, ajaxOptions.body[key] );\n        }\n        \n        Array.from( $form.querySelectorAll('[type=\"file\"]') ).forEach($field => {\n            Array.from($field.files).forEach((file, idx) => {\n                const name = $field.name+'['+ idx +']';\n                formDataMultipart.append( name, file, file.name );\n            });\n        });\n        \n        ajaxOptions.body = formDataMultipart;\n    }\n\n    if( ajaxOptions.method === 'GET' ){\n\n        // FETCH WITH \"GET\" METHOD CAN'T HAVE \"body\". SO IT IS APPENDED TO THE URL\n        ajaxOptions.url += ( /\\?/.test(ajaxOptions.url) ? '&' : '?' ) + serializeObject( ajaxOptions.body );\n        delete ajaxOptions.body;\n\n    } else {\n\n        if( ajaxOptions.headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1 ){\n            // POST A NORMAL FORM\n            ajaxOptions.body = serializeObject( ajaxOptions.body );\n        } else if( !isMultipart ){\n            // POST A JSON STRING\n            ajaxOptions.body = JSON.stringify(ajaxOptions.body);\n        }\n\n    }\n\n    ajaxOptions.headers = new Headers( ajaxOptions.headers );\n\n    if ( ajaxOptions.timeout > 0 ) {\n        const controller = new AbortController(),\n              signal = controller.signal;\n\n        ajaxOptions.signal = signal;\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, ajaxOptions.timeout);\n    }\n\n    return fetch(ajaxOptions.url, ajaxOptions)\n        .then(response => {\n            if( !response.ok ){\n                throw new Error(response.statusText);\n            }\n            const fetchMethod = getFetchMethod(response, ajaxOptions);\n            return response[fetchMethod]();\n        })\n        .then(data => {\n            addClass( $form, options.formOptions.cssClasses.ajaxSuccess );\n            return data;\n        })\n        .catch(error => {\n            addClass( $form, options.formOptions.cssClasses.ajaxError );\n            throw new Error(error.message);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n            removeClass( $form, options.formOptions.cssClasses.submit + ' ' + options.formOptions.cssClasses.ajaxPending );\n            addClass( $form, options.formOptions.cssClasses.ajaxComplete );\n            $form.querySelector('[type=\"submit\"]').disabled = false;\n        });\n\n}\n","\nimport { addClass, customEvents, dispatchCustomEvent, removeClass, runFunctionsSequence } from '../helpers';\nimport { ajaxCall } from '../ajaxCall';\n\nexport function submit( event ){\n\n    const $form = event.target,\n          instance = $form.formjs,\n          options = instance.options,\n          formCssClasses = options.formOptions.cssClasses,\n          isAjaxForm = options.formOptions.ajaxSubmit,\n          $btn = $form.querySelector('[type=\"submit\"]'),\n          eventPreventDefault = ( enableBtn = true ) => {\n              if( $btn && enableBtn ){ $btn.disabled = false; }\n              if( event ){ event.preventDefault(); }\n          };\n\n    if( isAjaxForm ){\n        eventPreventDefault(false);\n    }\n\n    if( $btn ){\n        if( $btn.disabled ){\n            eventPreventDefault(false);\n            return false;\n        }\n        $btn.disabled = true;\n    }\n\n    removeClass( $form, (formCssClasses.ajaxComplete + ' ' + formCssClasses.ajaxError + ' ' + formCssClasses.ajaxSuccess) );\n    addClass( $form, formCssClasses.submit );\n\n    instance.validateForm()\n        .then(data => {\n            \n            const hasGroup = typeof data.group !== 'undefined';\n\n            if( hasGroup && !data.canSubmit ){\n                return [{ stopExecution: true }]\n            }\n\n            const beforeSendData = {\n                stopExecution: false,\n                formData: isAjaxForm ? instance.getFormData() : null\n            };\n\n            const rfsObject = {\n                  functionsList: options.formOptions.beforeSend,\n                  data: beforeSendData,\n                  stopConditionFn: function(data){ return data.stopExecution; }\n            };\n            return runFunctionsSequence(rfsObject);\n\n        }).then(dataList => {\n\n            if( dataList.some(({stopExecution}) => stopExecution) ){\n                eventPreventDefault();\n                return false;\n            }\n            \n            if( isAjaxForm ){\n                const formData = dataList.pop().formData;\n                addClass( $form, formCssClasses.ajaxPending );\n                dispatchCustomEvent( $form, customEvents.form.submit, { detail: ajaxCall( $form, formData, options ) } );\n            }\n\n        })\n        .catch(fields => {\n            eventPreventDefault();\n            removeClass( $form, formCssClasses.submit );\n        });\n    \n}\n","\nexport const groupValidationEnd = function( event ){\n\n    const detail = event.detail;\n\n    if( detail.result ){\n        event.target.formjs.currentGroup = detail.group.next;\n    }\n    \n}\n","\nimport { fieldsStringSelector, isFieldForChangeEvent } from '../helpers';\n\nexport const validation = function( event ){\n\n    const isChangeEvent = event.type === 'change',\n          $field = event.target,\n          self = $field.closest('form').formjs;\n\n    if( $field.matches( fieldsStringSelector ) ){\n        const isFieldForChangeEventBoolean = isFieldForChangeEvent($field);\n        const hasOnlyChangeEvent = self.options.fieldOptions.validateOnEvents === 'change';\n        \n        if(\n            (isFieldForChangeEventBoolean && isChangeEvent) ||\n            (!isFieldForChangeEventBoolean && (!isChangeEvent || hasOnlyChangeEvent))\n        ){\n            \n            self.validateField( $field )\n                .then(() => {\n                    const type = $field.type;\n                    const $relatedEqualTo = $field.closest('form').querySelector('[data-equal-to=\"'+ $field.name +'\"]');\n\n                    if(\n                        // FIELD IS ( required OR data-validate-if-filled ) AND RELATED FIELD data-equal-to HAS A VALUE\n                        ($field.required || $field.matches('[data-validate-if-filled]')) && \n                        !(type === 'checkbox' || type === 'radio') && \n                        $relatedEqualTo && $relatedEqualTo.value.trim() !== ''\n                    ){\n                        self.validateField( $relatedEqualTo ).catch(errors => {});\n                    }\n                })\n                .catch(errors => {});\n\n        }\n    }\n    \n}\n","\nimport { addClass, getJSONobjectFromFieldAttribute, removeClass, mergeObjects } from '../helpers';\n\nexport const validationEnd = function( event ){\n\n    const eventDetail = event.detail,\n          $field = eventDetail.$field,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' ),\n          fieldOptions = mergeObjects({}, $field.closest('form').formjs.options.fieldOptions, dataFieldOptions),\n          $container = $field.closest( fieldOptions.questionContainer ),\n          isReqFrom = $field.matches('[data-required-from]'),\n          $reqMore = document.querySelector( $field.getAttribute('data-required-from') );\n\n    if( $container && !fieldOptions.skipUIfeedback ){\n\n        if( eventDetail.result ){\n\n            if( !isReqFrom || (isReqFrom && $reqMore.checked) ){\n                // IF FIELD IS VALID\n                const errorClasses = fieldOptions.cssClasses.error + ' ' + fieldOptions.cssClasses.errorEmpty + ' ' + fieldOptions.cssClasses.errorRule;\n                removeClass( $container, errorClasses );\n                addClass( $container, fieldOptions.cssClasses.valid );\n            }\n\n        } else {\n\n            // IF FIELD IS NOT VALID\n            let extraErrorClass = fieldOptions.cssClasses.errorRule;\n\n            // HANDLE CASE OF FIELD data-checks\n            const isChecks = $field.matches('[data-checks]'),\n                  checkedElLength = (isChecks ? $container.querySelectorAll('[name=\"' + $field.name + '\"]:checked').length : 0);\n\n            if( (!isChecks && (eventDetail.errors && eventDetail.errors.empty)) || (isChecks && checkedElLength === 0) ){\n                extraErrorClass = fieldOptions.cssClasses.errorEmpty;\n            }\n\n            let errorClasses = fieldOptions.cssClasses.error + ' ' + extraErrorClass,\n                errorClassToRemove = fieldOptions.cssClasses.errorEmpty + ' ' + fieldOptions.cssClasses.errorRule;\n            removeClass( $container, fieldOptions.cssClasses.valid + ' ' + errorClassToRemove );\n            addClass( $container, errorClasses );\n\n        }\n    }\n\n}\n","\nimport { customEvents } from './helpers';\nimport { \n    dataTypeNumber,\n    formValidationEnd,\n    groupValidationEnd,\n    keypressMaxlength,\n    pastePrevent,\n    submit,\n    validation, \n    validationEnd \n} from './listenerCallbacks';\n\nexport function formStartup( $form, options ){\n\n    $form.noValidate = true;\n\n    const fieldOptions = options.fieldOptions,\n          formOptions = options.formOptions;\n        \n    // VALIDATION WITH ATTRIBUTES LIKE HTML ONES ( ALSO FOR BUG FIXING, EG: maxlength IN ANDROID )\n    if( fieldOptions.strictHtmlValidation ){\n        \n        // maxlength\n        // MAXLENGTH IS BUGGY IN ANDROID BROWSERS\n        $form.addEventListener('keypress', keypressMaxlength, false);\n\n        // data-type=\"number\"\n        // SINCE VALIDATING type=\"number\" WITH NON NUMERIC CHARS WILL RETURN EMPTY STRING IN SOME BROWSERS ( EG: FIREFOX )\n        $form.addEventListener('input', dataTypeNumber, false);\n        \n    }\n    \n    if( fieldOptions.preventPasteFields && $form.querySelectorAll( fieldOptions.preventPasteFields ).length ){\n        // INIT EVENT LISTENER FOR \"PASTE\" EVENT TO PREVENT IT ON SPECIFIED FIELDS\n        $form.addEventListener('paste', pastePrevent, false);\n    }\n\n    // INIT EVENTS LISTENER ( AS IN fieldOptions )\n    fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapture = /^(blur|focus)$/.test(eventName);\n        $form.addEventListener(eventName, validation, useCapture);\n    });\n\n    $form.addEventListener(customEvents.field.validation, validationEnd, false);\n    if( formOptions.groups.length > 0 ){\n        $form.addEventListener(customEvents.group.validation, groupValidationEnd, false);\n    }\n    $form.addEventListener(customEvents.form.validation, formValidationEnd, false);\n    \n    // HANDLE FORM SUBMIT\n    if( formOptions.handleSubmit ){\n        // INIT FORM SUBMIT ( DEFAULT AND AJAX )\n        $form.addEventListener('submit', submit);\n\n        if( formOptions.ajaxSubmit ){\n            if( $form.getAttribute('enctype') ){\n                formOptions.ajaxOptions.headers['Content-Type'] = $form.getAttribute('enctype');\n            }\n\n            if( $form.getAttribute('method') ){\n                formOptions.ajaxOptions.method = $form.getAttribute('method').toUpperCase();\n            }\n\n            if( $form.getAttribute('action') ){\n                formOptions.ajaxOptions.url = $form.getAttribute('action');\n            }\n        }\n    }\n\n}\n","\nimport {    getJSONobjectFromFieldAttribute,\n            isDOMNode,\n            mergeObjects,\n            mergeValidateFieldDefault,\n            removeClass,\n            runFunctionsSequence\n        }           from './helpers';\nimport { isValid }  from './isValid';\n\nexport function checkFieldValidity( $field, fieldOptions, validationRules, validationErrors ){\n\n    if( !isDOMNode($field) ){\n        const obj = mergeValidateFieldDefault({$field});\n        return Promise.resolve(obj);\n    }\n\n    const $form = $field.closest('form'),\n          isValidValue = $field.value.trim().length > 0,\n          dataFieldOptions = getJSONobjectFromFieldAttribute( $field, 'data-field-options' );\n\n    fieldOptions = mergeObjects( fieldOptions, dataFieldOptions );\n\n    // HANDLE FIELD data-required-from WHEN CHANGING ITS RELATED RADIO\n    if( $field.type === 'radio' ){\n        const $checked = $field.checked ? $field : $form.querySelector('[name=\"'+ $field.name +'\"]:checked'),\n              reqMoreIsChecked = $checked && $checked.matches('[data-require-more]'),\n              $findReqMore = reqMoreIsChecked ? $checked : $form.querySelector('[data-require-more][name=\"'+ $field.name +'\"]'),\n              $findReqFrom = $findReqMore ? $form.querySelector('[data-required-from=\"#'+ $findReqMore.id +'\"]') : null;\n        \n        if( $checked && $findReqFrom ){\n            $findReqFrom.required = $findReqMore.required && $findReqMore.checked;\n            if( !reqMoreIsChecked ){\n                $findReqFrom.value = '';\n            } else if( fieldOptions.focusOnRelated ) {\n                $findReqFrom.focus();\n            }\n        }\n    }\n\n    // HANDLE FIELD data-require-more & data-required-from WHEN *-from IT'S FILLED\n    if( $field.matches('[data-required-from]') && isValidValue ){\n        const $reqMore = $form.querySelector( $field.getAttribute('data-required-from') );\n        $reqMore.checked = true;\n        $field.required = $reqMore.required;\n    }\n\n    const needsValidation = $field.required || ($field.matches('[data-validate-if-filled]') && isValidValue);\n\n    return runFunctionsSequence({\n            functionsList: fieldOptions.beforeValidation,\n            data: { $field, fieldOptions }\n        })\n        .then(data => {\n            const dataObj = data.pop();\n            return new Promise(resolve => {\n                if( !needsValidation ){\n                    dataObj.result = true;\n                }\n                resolve( needsValidation ? isValid($field, fieldOptions, validationRules, validationErrors) : dataObj );\n            });\n        })\n        .then(data => {\n            const $container = fieldOptions.questionContainer && data.$field.closest( fieldOptions.questionContainer );\n            if( $container ){\n                removeClass( $container, fieldOptions.cssClasses.pending );\n            }\n            return data;\n        })\n        ;\n\n}\n","\nimport { mergeValidateFieldDefault, mergeObjects, toCamelCase } from './helpers';\n\nexport function isValid( $field, fieldOptions, validationRules, validationErrors ){\n\n    const fieldValue = $field.value,\n          obj = mergeValidateFieldDefault({result: fieldValue.trim().length > 0, $field}),\n          isRadioOrCheckbox = /^(radio|checkbox)$/.test($field.type),\n          hasSelectedInput = $field.closest('form').querySelectorAll('[name=\"'+ $field.name +'\"]:checked').length > 0;\n\n    if( (!isRadioOrCheckbox && !obj.result) || (isRadioOrCheckbox && !hasSelectedInput) ){\n        obj.result = false;\n        obj.errors = { empty: true };\n        return Promise.resolve(obj);\n    }\n\n    // COLLECT VALIDATION METHOD NAMES ( USED TO RUN VALIDATIONS AND GET ERRORS )\n    const validationMethods = Array.from($field.attributes).reduce((accList, attr) => {\n        const attrName = toCamelCase( attr.name.replace('data-', '') ),\n              attrValue = toCamelCase( attr.value ),\n              isAttrValueWithFn = (attrName === 'type' || attrName === 'subtype') && validationRules[attrValue],\n              isAttrNameWithFn = validationRules[attrName];\n\n        if( isAttrValueWithFn || isAttrNameWithFn ){\n            accList.push( isAttrValueWithFn ? attrValue : attrName );\n        }\n        return accList;\n    }, []);\n\n    return new Promise(resolve => {\n\n        // RUN VALIDATIONS\n        const validationsResult = validationMethods.reduce((accPromise, methodName) => {\n            return accPromise.then(accObj => {\n                return new Promise(resolveVal => {\n                    // RUN VALIDATION INSIDE A PROMISE IS USEFUL FOR ASYNC VALIDATIONS\n                    resolveVal( validationRules[methodName](fieldValue, $field, fieldOptions) );\n                }).then(valObj => {\n                    // ADD CUSTOM ERROR-KEY FOR EACH VALIDATION RULE\n                    if( !valObj.result ){\n                        const errorObj = {};\n                        if( typeof valObj.errors === 'undefined' || typeof valObj.errors[methodName] === 'undefined' ){\n                            errorObj[methodName] = true;\n                        }\n                        valObj.errors = mergeObjects({}, valObj.errors, errorObj);\n                    }\n                    valObj = valObj.result ? {} : valObj;\n                    return mergeObjects(accObj, valObj);\n                });\n            });\n        }, Promise.resolve(obj));\n        resolve(validationsResult);\n\n    }).then(data => {\n\n        // GET ERRORS\n        if( !data.result ){\n            data.errors = validationMethods.reduce((accObj, methodName) => {\n                const errors = (validationErrors[methodName] && validationErrors[methodName](fieldValue, $field)) || {};\n                return mergeObjects(accObj, errors);\n            }, data.errors);\n        }\n        return data;\n\n    });\n\n}\n","\nimport { getUniqueFields, mergeValidateFieldDefault, mergeValidateFormDefault, mergeObjects } from './helpers';\nimport { checkFieldValidity } from './checkFieldValidity';\n\nexport function checkFieldsValidity( $fields, fieldOptions, validationRules, validationErrors, fieldToSkip = null ){\n\n    fieldOptions = mergeObjects( {}, fieldOptions, {focusOnRelated: false} );\n    const $fieldsList = getUniqueFields( $fields );\n\n    return Promise.all( $fieldsList.map($field => {\n\n        if( fieldToSkip && $field === fieldToSkip ){\n            const obj = mergeValidateFieldDefault({$field, result: true});\n            return Promise.resolve(obj);\n        }\n        return checkFieldValidity( $field, fieldOptions, validationRules, validationErrors );\n\n    }) ).then(fields => {\n\n        const areAllFieldsValid = fields.every(({result}) => result);\n        return mergeValidateFormDefault({result: areAllFieldsValid, fields});\n\n    });\n\n}\n","\nimport { version }              from '../package.json';\nimport { \n    checkFormEl, \n    customEvents, \n    dispatchCustomEvent, \n    excludeSelector, \n    fieldsStringSelector, \n    finalizeFieldPromise, \n    finalizeFieldsGroupPromise, \n    finalizeFormPromise, \n    getFilledFields, \n    isNodeList,\n    mergeObjects, \n    removeClass }               from './modules/helpers';\nimport { options }              from './modules/options';\nimport { validationRules }      from './modules/validationRules';\nimport { formStartup }          from './modules/formStartup';\nimport { destroy }              from './modules/destroy';\nimport { checkFieldValidity }   from './modules/checkFieldValidity';\nimport { checkFieldsValidity }  from './modules/checkFieldsValidity';\n\nclass Form {\n\n    constructor( form, optionsObj ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(form);\n\n        if( argsL === 0 || (argsL > 0 && !form) ){\n            throw new Error('First argument \"form\" is missing or falsy!');\n        }\n        if( isNodeList(form) ){\n            throw new Error('First argument \"form\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"form\" is not a DOM node nor a form CSS selector!');\n        }\n\n        const self = this;\n\n        self.$form = checkFormElem.$el;\n        self.$form.formjs = self;\n        self.options = mergeObjects({}, Form.prototype.options, optionsObj);\n        self.currentGroup = self.options.formOptions.groups[0];\n\n        // BINDING CONTEXT FOR FUTURE EXECUTION\n        const cbList = [\n            // IN fieldOptions\n            'beforeValidation',\n            // IN formOptions\n            'beforeSend',\n            'getFormData'\n        ];\n        cbList.forEach(cbName => {\n            const optionType = self.options.formOptions[cbName] ? 'formOptions' : 'fieldOptions';\n            let cbOpt = self.options[optionType][cbName];\n\n            if( cbOpt ){\n                self.options[optionType][cbName] = ( Array.isArray(cbOpt) ? cbOpt.map(cbFn => cbFn.bind(self)) : cbOpt.bind(self) );\n            }\n        });\n\n        formStartup( self.$form, self.options );\n\n        const initOptions = {};\n        if( self.options.formOptions.onInitCheckFilled ){\n            initOptions.detail = self.validateFilledFields().catch(fields => {});\n        }\n        dispatchCustomEvent( self.$form, customEvents.form.init, initOptions );\n    }\n\n    destroy(){\n        destroy(this.$form, this.options);\n        dispatchCustomEvent( this.$form, customEvents.form.destroy );\n    }\n    \n    getFormData( trimValues = this.options.fieldOptions.trimValue ){\n        const $formFields = this.$form.querySelectorAll('input, select, textarea'),\n              $filteredFields = Array.from( $formFields ).filter( elem => elem.matches(excludeSelector) );\n        return this.options.formOptions.getFormData( $filteredFields, trimValues );\n    }\n\n    validateField( field, fieldOptions ){\n        const self = this;\n        const $form = self.$form;\n        const $field = typeof field === 'string' ? $form.querySelector(field) : field;\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        \n        return checkFieldValidity($field, fieldOptions, self.validationRules, self.validationErrors)\n            .then(obj => {\n                dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                if( obj.result ){\n                    if( fieldOptions.onValidationCheckAll ){\n                        const selector = self.currentGroup || fieldsStringSelector;\n                        const $fields = $form.querySelectorAll(selector);\n                        checkFieldsValidity( $fields, fieldOptions, self.validationRules, self.validationErrors, obj.$field )\n                            .then(dataForm => {\n                                const groups = self.options.formOptions.groups;\n                                const validationEventName = self.currentGroup ? customEvents.group.validation : customEvents.form.validation;\n                                if( groups.length > 0 ){\n                                    dataForm.group = {\n                                        prev: groups[groups.indexOf(selector) - 1],\n                                        current: selector,\n                                        next: groups[groups.indexOf(selector) + 1]\n                                    }\n                                    dataForm.canSubmit = dataForm.result && !dataForm.group.next;\n                                }\n                                dispatchCustomEvent( $form, validationEventName, { detail: dataForm } );\n                            });\n                    }\n                } else {\n                    removeClass( $form, self.options.formOptions.cssClasses.valid );\n                }\n                return obj;\n            })\n            .then(finalizeFieldPromise);\n    }\n\n    validateFieldsGroup( group = this.currentGroup, fieldOptions ){\n        const self = this;\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n        const $fields = self.$form.querySelectorAll(group);\n\n        return checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingGroup = true;\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                const groups = self.options.formOptions.groups;\n                if( groups.length > 0 ){\n                    data.group = {\n                        prev: groups[groups.indexOf(group) - 1],\n                        current: group,\n                        next: groups[groups.indexOf(group) + 1]\n                    }\n                    data.canSubmit = data.result && !data.group.next;\n                }\n                dispatchCustomEvent( self.$form, customEvents.group.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFieldsGroupPromise);\n    }\n\n    validateFilledFields( fieldOptions ){\n        const self = this;\n        const $filledFields = getFilledFields( self.$form );\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n\n        return checkFieldsValidity($filledFields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n\n    validateForm( fieldOptions ){\n        const self = this;\n\n        fieldOptions = mergeObjects({}, self.options.fieldOptions, fieldOptions);\n\n        if( self.currentGroup ){\n            return self.validateFieldsGroup( self.currentGroup, fieldOptions )\n        }\n\n        const $form = self.$form;\n        const $fields = $form.querySelectorAll(fieldsStringSelector);\n\n        return checkFieldsValidity($fields, fieldOptions, self.validationRules, self.validationErrors)\n            .then(data => {\n                data.fields.forEach(obj => {\n                    obj.isCheckingForm = true;\n                    dispatchCustomEvent( obj.$field, customEvents.field.validation, { detail: obj } );\n                });\n                dispatchCustomEvent( $form, customEvents.form.validation, { detail: data } );\n                return data;\n            })\n            .then(finalizeFormPromise);\n    }\n    \n    static addValidationErrors( errorsObj ){\n        Form.prototype.validationErrors = mergeObjects({}, Form.prototype.validationErrors, errorsObj);\n    }\n\n    static addValidationRules( rulesObj ){\n        Form.prototype.validationRules = mergeObjects({}, Form.prototype.validationRules, rulesObj);\n    }\n    \n    static setOptions( optionsObj ){\n        Form.prototype.options = mergeObjects({}, Form.prototype.options, optionsObj);\n    }\n\n}\n\nForm.prototype.options = options;\nForm.prototype.validationErrors = {};\nForm.prototype.validationRules = validationRules;\nForm.prototype.version = version;\n\nexport default Form;\n","\nimport { customEvents } from './helpers';\nimport { dataTypeNumber, formValidationEnd, groupValidationEnd, keypressMaxlength, pastePrevent, submit, validation, validationEnd } from './listenerCallbacks';\n\n\nexport function destroy( $form, options ){\n\n    if( options.fieldOptions.strictHtmlValidation ){\n        $form.removeEventListener('keypress', keypressMaxlength, false);\n        $form.removeEventListener('input', dataTypeNumber, false);\n    }\n\n    if( options.fieldOptions.preventPasteFields ){\n        $form.removeEventListener('paste', pastePrevent, false);\n    }\n\n    if( options.formOptions.handleSubmit ){\n        $form.removeEventListener('submit', submit);\n    }\n\n    options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        $form.removeEventListener(eventName, validation, useCapturing);\n    });\n\n    $form.removeEventListener(customEvents.field.validation, validationEnd, false);\n    if( options.formOptions.groups.length > 0 ){\n        $form.removeEventListener(customEvents.group.validation, groupValidationEnd, false);\n    }\n    $form.removeEventListener(customEvents.form.validation, formValidationEnd, false);\n\n    delete $form.formjs;\n    \n}\n","\nimport { fieldsStringSelector } from './fieldsStringSelector';\nimport { getUniqueFields } from './getUniqueFields';\n\nexport const getFilledFields = $form => {\n    return getUniqueFields( $form.querySelectorAll(fieldsStringSelector) )\n    .map($field => {\n\n        const name = $field.name,\n              type = $field.type,\n              isCheckboxOrRadio = type === 'checkbox' || type === 'radio',\n              fieldChecked = $form.querySelector('[name=\"' + name + '\"]:checked'),\n              isReqFrom = $field.matches('[data-required-from]'),\n              $reqMore = (isReqFrom ? $form.querySelector($field.getAttribute('data-required-from')) : null);\n\n        return (\n            isCheckboxOrRadio ? (fieldChecked || null) :\n            (isReqFrom && $reqMore.checked) || (!isReqFrom && $field.value) ? $field : null\n        );\n\n    })\n    .filter($field => $field !== null);\n}\n"],"names":["addClass","element","cssClasses","split","forEach","className","classList","add","isNodeList","nodeList","NodeList","prototype","isPrototypeOf","removeClass","remove","isDOMNode","node","Element","checkFormEl","form","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","$el","customEvents","validation","destroy","init","submit","isPlainObject","object","Object","toString","call","mergeObjects","out","arguments","length","undefined","Array","from","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","excludeSelector","fieldsStringSelector","finalizeFieldPromise","_ref","errors","Promise","resolve","reject","finalizeFieldsGroupPromise","canSubmit","fields","group","finalizeFormPromise","formatMap","YYYY-MM-DD","dateArray","MM-DD-YYYY","DD-MM-YYYY","reverse","getDateAsNumber","dateString","dateFormat","separator","splitChar","match","indexOf","replace","join","getJSONobjectFromFieldAttribute","fieldEl","attrName","customAttrEl","closest","JSON","parse","getAttribute","getUniqueFields","$nodeList","currentFieldName","currentFieldType","$field","name","type","matches","mergeValidateFieldDefault","obj","mergeValidateFormDefault","isFieldForChangeEvent","runFunctionsSequence","_ref$functionsList","functionsList","_ref$data","data","_ref$stopConditionFn","stopConditionFn","reduce","acc","promiseFn","then","res","dataNew","dataList","serializeObject","_typeof","constructor","a","k","encodeURIComponent","toCamelCase","string","all","letter","toUpperCase","options","fieldOptions","beforeValidation","trimValue","value","trim","$fields","$container","questionContainer","dirty","checkDirtyField","skipUIfeedback","pending","error","errorEmpty","errorRule","valid","focusOnRelated","maxFileSize","onValidationCheckAll","preventPasteFields","strictHtmlValidation","validateOnEvents","formOptions","ajaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","url","location","href","ajaxSubmit","beforeSend","ajaxComplete","ajaxError","ajaxPending","ajaxSuccess","getFormData","$filteredFields","trimValues","formData","$form","this","prevObj","isCheckbox","isRadio","isSelect","checked","$checkboxes","querySelectorAll","field","$checkedRadio","$selectedOpts","option","selected","keyName","index","list","isLastKeyName","keyNameSplit","arrPos","arrayHasItemAtIndex","arrItemKeyName","isKeyNameArray","endsWith","groups","handleFileUpload","handleSubmit","onInitCheckFilled","validationRules","date","test","email","number","checkbox","$dataChecks","attrValue","checkedLength","isMinOk","isMaxOk","checks","minChecks","maxChecks","equalTo","exactLength","valueLength","minlength","maxlength","file","MIMEtype","accept","RegExp","filesList","files","exceedMaxFileSize","size","isAcceptedFileType","acceptedFileType","valueL","isMinlengthOk","isMaxlengthOk","max","maxVal","maxLength","min","minVal","minLength","pattern","radio","$fieldChecked","dataTypeNumber","event","target","fieldValue","stopImmediatePropagation","valueReplaced","formValidationEnd","formEl","formjs","clMethodName","detail","keypressMaxlength","keyPressed","which","keyCode","pastePrevent","preventDefault","ajaxCall","formDataObj","timeoutTimer","isMultipart","body","formDataMultipart","FormData","append","idx","stringify","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","Error","statusText","fetchMethod","get","contentType","headerOpt","getFetchMethod","message","clearTimeout","disabled","instance","formCssClasses","isAjaxForm","$btn","eventPreventDefault","enableBtn","validateForm","stopExecution","beforeSendData","rfsObject","some","pop","groupValidationEnd","currentGroup","next","isChangeEvent","self","isFieldForChangeEventBoolean","hasOnlyChangeEvent","validateField","$relatedEqualTo","required","validationEnd","eventDetail","dataFieldOptions","isReqFrom","$reqMore","errorClasses","extraErrorClass","isChecks","checkedElLength","empty","errorClassToRemove","formStartup","noValidate","addEventListener","useCapture","checkFieldValidity","validationErrors","isValidValue","$checked","reqMoreIsChecked","$findReqMore","$findReqFrom","id","focus","needsValidation","dataObj","isRadioOrCheckbox","hasSelectedInput","validationMethods","attributes","accList","attr","isAttrValueWithFn","isAttrNameWithFn","accPromise","methodName","accObj","resolveVal","valObj","errorObj","isValid","checkFieldsValidity","fieldToSkip","$fieldsList","map","areAllFieldsValid","every","Form","optionsObj","_classCallCheck","argsL","checkFormElem","cbList","cbName","optionType","cbOpt","cbFn","bind","initOptions","validateFilledFields","errorsObj","rulesObj","removeEventListener","useCapturing","$formFields","selector","dataForm","validationEventName","prev","current","isCheckingGroup","isCheckboxOrRadio","fieldChecked","validateFieldsGroup","isCheckingForm","version"],"mappings":"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"}