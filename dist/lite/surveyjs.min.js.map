{"version":3,"file":"surveyjs.min.js","sources":["../../src/modules/helpers/ajaxCall.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/customEvents.js","../../src/modules/helpers/deepFreeze.js","../../src/modules/helpers/isPlainObject.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/dispatchCustomEvent.js","../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/replaceObjectKeysInString.js","../../src/modules/helpers/sortList.js","../../src/modules/buildSurvey/generateQAcodeUtils/generateOptionTags.js","../../src/modules/buildSurvey/generateQAcodeUtils/getAttributesStringHTML.js","../../src/modules/helpers/toKebabCase.js","../../src/modules/buildSurvey/generateQAcodeUtils/generateAnswers.js","../../src/modules/buildSurvey/generateQAcodeUtils/getTemplates.js","../../src/modules/buildSurvey/generateQAcode.js","../../src/modules/buildSurvey/buildSurvey.js","../../src/index-lite.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const ajaxCall = ( url = location.href, options = {} ) => {\n\n    let timeoutTimer;\n\n    options.headers = new Headers( options.headers );\n\n    /* SET AbortController FOR timeout */\n    if ( options.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        options.signal = signal;\n\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, options.timeout);\n    }\n\n    return fetch( url, options )\n        .then(response => {\n            if( !response.ok ){\n                throw new Error(response.statusText);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            throw new Error(error.message);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n        });\n        \n}\n","/* eslint-disable no-prototype-builtins */\n\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n\n    const isString = typeof formEl,\n          isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n          isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n          obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n    \n}\n","\nexport const customEvents = {\n    destroy: 'sjs:destroy',\n    init: 'sjs:init'\n}\n","\nexport const deepFreeze = obj => {\n\n    Object.getOwnPropertyNames(obj).forEach(name => {\n        const prop = obj[name];\n        if( typeof prop === 'object' && prop !== null ){\n            deepFreeze(prop);\n        }\n    });\n    return Object.freeze(obj);\n    \n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","/* eslint-disable no-prototype-builtins */\n\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const replaceObjectKeysInString = (obj, stringHTML) => {\n    return Object.keys(obj).reduce((accString, name) => {\n        const regexStr = new RegExp( '{{' + name + '}}', 'g' );\n        return accString.replace(regexStr, obj[name]);\n    }, stringHTML);\n}\n","\nexport const sortList = ( list ) => {\n    if( list[0]['sort'] ){\n        list.sort((a, b) => a['sort'] > b['sort']);\n    }\n    return list;\n}\n","\nimport { sortList } from '../../helpers';\n\nexport const generateOptionTags = ( optionsList = [] ) => {\n\n    return sortList( optionsList ).reduce((optionsHTML, opt) => {\n        return optionsHTML += `<option value=\"${opt.value}\">${opt.label}</option>`;\n    }, '');\n\n}","\nimport { toKebabCase } from '../../helpers';\n\nexport const getAttributesStringHTML = ( answerObj, answerCode, isRequired ) => {\n    const excludedAttrs = ['data', 'id', 'label', 'nested', 'related', 'sort'];\n    \n    if( /^(option|textarea)$/.test(answerObj.type) ){\n        excludedAttrs.push('type', 'value');\n    }\n\n    let string = '';\n\n    Object.keys(answerObj)\n        .filter(name => excludedAttrs.indexOf(name) === -1)\n        .forEach(name => {\n            string += ` ${name}=\"${answerObj[name]}\"`;\n        });\n\n    if( answerObj.data ){\n        Object.keys(answerObj.data).forEach(name => {\n            string += ` data-${toKebabCase(name)}=\"${answerObj.data[name]}\"`;\n        });\n    }\n\n    if( isRequired ){\n        string += ' required';\n    }\n\n    if( answerObj.related ){\n        string += ' data-require-more';\n    }\n\n    string += ` id=\"${answerCode}\"`;\n\n    return string.trim();\n}\n","\nexport const toKebabCase = ( string = '', useAllCaps = false ) => {\n    let newString = string.trim().replace(/(([_ ])([a-z]))|(([a-z])?([A-Z]))/g, (match, p1, p2, p3, p4, p5, p6) => {\n        const concatGroup = p3 ? '-' + p3 : (p5 || '') + '-' + p6;\n        return concatGroup.toLowerCase();\n    } );\n    return useAllCaps ? newString.toUpperCase() : newString;\n}\n","\nimport { mergeObjects, replaceObjectKeysInString, sortList } from '../../helpers';\nimport { generateOptionTags }       from './generateOptionTags';\nimport { getAttributesStringHTML }  from './getAttributesStringHTML';\nimport { getTemplates }             from './getTemplates';\n\nexport const generateAnswers = ( answersList, extraData, options ) => {\n\n    let allAnswersHTML = '';\n    let previousType = '';\n\n    sortList( answersList ).forEach((answer, index) => {\n\n        let answerHTML = '';\n\n        // COLLECT USEFUL DATA\n        // answerType => checkbox, date, email, radio, select, text, textarea, etc...\n        const answerType = answer.type === 'option' ? 'select' : answer.type;\n        \n        if( answerType === 'select' && previousType === answerType ){ return; }\n\n        previousType = answerType;\n\n        if( extraData.question.checks ){\n            answer = mergeObjects({}, answer, {data:{checks:extraData.question.checks}});\n        }\n        \n        const answerCode = `${answerType}-${extraData.surveyId}-${extraData.question.id}-${answerType === 'select' ? (index + 1) : answer.id}`;\n        const answerData = {\n            questionNumber: extraData.question.index + 1,\n            wrapperClasses: options.cssClasses.wrapper[answerType] || options.cssClasses.wrapper.field,\n            fieldAttributes: getAttributesStringHTML( answer, answerCode, extraData.question.isRequired ),\n            fieldClasses: options.cssClasses[answerType] || options.cssClasses.field,\n\n            answerType,\n            answerCode,\n            addMoreName: '',\n\n            labelString: answer.label || '',\n            labelClasses: options.cssClasses.label\n        };\n\n        let relatedFieldHTML = '';\n        if( answer.related ){\n            const relatedType = answer.related.type || 'select';\n            const relatedIsSelect = relatedType === 'select';\n            const relatedObj = relatedIsSelect ? mergeObjects({}, answer) : answer.related;\n\n            relatedObj.type = relatedIsSelect ? 'option' : relatedType;\n            relatedObj.id = '';\n            relatedObj.data = mergeObjects({}, relatedObj.data, {requiredFrom:'#'+answerCode});\n            delete relatedObj.related;\n\n            const answerDataRelated = {\n                fieldAttributes: getAttributesStringHTML(relatedObj, '', false),\n                answerType: relatedType,\n                addMoreName: '-more',\n                fieldClasses: relatedIsSelect ? options.cssClasses.select : (options.cssClasses[relatedType] || options.cssClasses.field)\n            };\n\n            relatedFieldHTML = options.templates[relatedType] || options.templates.input;\n            if( relatedIsSelect ){\n                const optionsHtml = generateOptionTags( answer.related );\n                relatedFieldHTML = relatedFieldHTML.replace('{{optionsHtml}}', optionsHtml);\n            }\n\n            relatedFieldHTML = replaceObjectKeysInString(answerDataRelated, relatedFieldHTML);\n        }\n        \n        // TAKE RIGHT TEMPLATES ( wrapper, field and label ) AND PUT ALL TOGETHER\n        // answerTypeForTemplate => related, input, nested, select, textarea, etc...\n        const answerTypeForTemplate = answer.related ? 'related' : (answer.nested ? 'nested' : answerType);\n        const templates = getTemplates( answerTypeForTemplate, options.templates );\n\n        let nestedFieldsHTML = '';\n        if( answer.nested ){\n            nestedFieldsHTML = generateAnswers( answer.nested, extraData, options );\n        }\n\n        let optionsHtml = '';\n        if( answerType === 'select' ){\n            optionsHtml = generateOptionTags( answersList );\n        }\n\n        answerHTML = templates.wrapper\n                        .replace('{{relatedFieldHTML}}', relatedFieldHTML)\n                        .replace('{{fieldTemplate}}', templates.field)\n                        .replace('{{optionsHtml}}', optionsHtml)\n                        .replace('{{labelTemplate}}', templates.label)\n                        .replace('{{nestedFieldsHTML}}', nestedFieldsHTML);\n        allAnswersHTML += replaceObjectKeysInString(answerData, answerHTML);\n\n    });\n\n    return allAnswersHTML;\n\n}\n","\nexport const getTemplates = ( answerType, templates ) => {\n    return {\n        field: templates[answerType] || templates.input,\n        label: /^(checkbox|nested|radio|related)$/.test(answerType) ? templates.label : '',\n        wrapper: templates.wrapper[answerType] || templates.wrapper.field\n    }\n}\n","\nimport { isPlainObject, replaceObjectKeysInString, sortList } from '../helpers';\nimport { generateAnswers } from './generateQAcodeUtils/generateAnswers';\n\nexport const generateQAcode = ( questions, surveyId, options ) => {\n\n    return sortList( questions ).reduce((accCode, questionObj, index) => {\n        if( questionObj.external ){ return accCode; }\n\n        let questionHTML = options.templates.wrapper.question;\n        const questionId = questionObj.id;\n        const questionNumber = index + 1;\n        const extraData = {\n            surveyId,\n            question: {\n                id: questionId,\n                index,\n                isRequired: !!questionObj.required\n            }\n        };\n\n        if( questionObj.checks ){\n            extraData.question.checks = questionObj.checks;\n        }\n        \n        const answersHTML = generateAnswers( questionObj.answers, extraData, options );\n\n        const maxChoice = questionObj.checks ? JSON.parse(questionObj.checks) : '';\n        const checksMin = maxChoice[0] || '';\n        const checksMax = maxChoice[1] || '';\n        const maxChoiceText = maxChoice && options.messages.maxChoice ? ' ('+ checksMax +' '+ options.messages.maxChoice +')' : '';\n\n        const questionData = {\n            questionId,\n            questionNumber,\n            questionText: questionObj.question + maxChoiceText,\n            answersHTML\n        };\n        questionHTML = replaceObjectKeysInString(questionData, questionHTML);\n\n        if( options.showErrorMessage ){\n            let errorMessage = maxChoice !== '' ? options.messages.errorMultiChoice : (questionObj.errorMessage || options.messages.error);\n\n            // CASE OF MULTIPLE ERROR MESSAGES FROM JSON DATA => DYNAMICALLY MANAGED VIA EVENT LISTENER IN CONSTRUCTOR\n            if( isPlainObject(errorMessage) ){\n                errorMessage = '';\n            }\n\n            questionHTML = questionHTML.replace( /{{errorTemplates}}/g, errorMessage );\n        }\n\n        return accCode += replaceObjectKeysInString({checksMin, checksMax}, questionHTML);\n    }, '');\n\n}\n","\nimport { generateQAcode } from './generateQAcode';\n\nexport const buildSurvey = ( data, $form, options ) => {\n    \n    const qaHtmlAll = generateQAcode( data.questions, data.id, options );\n    $form.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforeend', qaHtmlAll );\n\n    // MANAGE EXTERNAL QUESTION\n    const extQuestions = data.questions.filter(obj => obj.external);\n    if( extQuestions.length > 0 ){\n        const $surveyWrapper = $form.closest('[data-surveyjs-wrapper]');\n        extQuestions.forEach((question, qIndex) => {\n\n            const $externalCont = $surveyWrapper.querySelector('[data-surveyjs-external=\"'+ (qIndex+1) +'\"]');\n            \n            $externalCont.setAttribute('data-question-id', question.id);\n\n            question.answers.forEach((answer, aIndex) => {\n                const $externalField = $externalCont.querySelectorAll('[data-field]')[aIndex];\n                const fieldProps = {\n                        id: `${answer.type}-${data.id}-${question.id}-${answer.id}`,\n                        type: answer.type,\n                        value: answer.value,\n                        required: !!question.required\n                    };\n                \n                Object.keys(fieldProps).forEach(name => {\n                    $externalField[name] = fieldProps[name];\n                });\n\n                const $answerCont = $externalField.closest('[data-answer]');\n                $answerCont.querySelector('label').setAttribute('for', fieldProps.id);\n                $answerCont.querySelector('[data-label]').innerHTML = answer.label;\n                $externalCont.querySelector('[data-question]').innerHTML = question.question;\n            });\n\n        });\n    }\n\n}\n","\nimport { version }      from '../package.json';\nimport { ajaxCall, checkFormEl, customEvents, deepFreeze, dispatchCustomEvent, isNodeList, mergeObjects } from './modules/helpers';\nimport { options }      from './modules-lite/options';\nimport { buildSurvey }  from './modules/buildSurvey/buildSurvey';\n\nclass Survey {\n\n    constructor( $form, optionsObj = {} ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl($form);\n\n        if( argsL === 0 || (argsL > 0 && !$form) ){\n            throw new Error('First argument \"$form\" is missing or falsy!');\n        }\n        if( isNodeList($form) ){\n            throw new Error('First argument \"$form\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"$form\" is not a DOM node nor a form CSS selector!');\n        }\n        if( !optionsObj.url || typeof optionsObj.url !== 'string' ){\n            throw new Error('\"options.url\" is missing or not a string!');\n        }\n\n        const self = this;\n        self.$form = checkFormElem.element;\n        self.options = mergeObjects( {}, Survey.prototype.options, optionsObj );\n        $form = self.$form;\n        optionsObj = self.options;\n\n        $form.surveyjs = self;\n        $form.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforebegin', optionsObj.templates.loading );\n\n        // CREATE SURVEY\n        const retrieveSurvey = ajaxCall(optionsObj.url, optionsObj.initAjaxOptions)\n            .then(response => {\n                if( response.status.toLowerCase() !== 'success' ){\n                    return Promise.reject(response);\n                }\n                if( response.data.questions && response.data.questions.length > 0 ){\n                    buildSurvey(response.data, $form, optionsObj);\n                    Object.defineProperty(self, 'data', {\n                        value: deepFreeze(response.data)\n                    });\n                    self.isInitialized = true;\n                    $form.closest('[data-surveyjs-wrapper]').classList.add('surveyjs-init-success');\n                }\n                return response;\n            })\n            .finally(() => {\n                const $loadingBox = $form.querySelector('[data-surveyjs-loading]');\n                if( $loadingBox ){\n                    $loadingBox.parentNode.removeChild($loadingBox);\n                }\n            });\n        \n        dispatchCustomEvent( $form, customEvents.init, { detail: retrieveSurvey } );\n    }\n\n    destroy(){\n        delete this.$form.surveyjs;\n        dispatchCustomEvent( this.$form, customEvents.destroy );\n    }\n\n    static setOptions( optionsObj ){\n        Survey.prototype.options = mergeObjects({}, Survey.prototype.options, optionsObj);\n    }\n\n}\n\nSurvey.prototype.isInitialized = false;\nSurvey.prototype.options = options;\nSurvey.prototype.version = version;\n\nexport default Survey;\n","\nexport const options = {\n    cssClasses: {\n        checkbox:           'form-check-input',\n        field:              'form-control',\n        file:               'form-control-file',\n        label:              'form-check-label',\n        radio:              'form-check-input',\n        wrapper: {\n            checkbox:       'form-check',\n            field:          '',\n            radio:          'form-check'\n        }\n    },\n    initAjaxOptions: {\n        cache:              'no-store',\n        credentials:        'same-origin',\n        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept':       'application/json'\n        },\n        method:             'GET',\n        mode:               'same-origin',\n        redirect:           'follow',\n        timeout:            0\n    },\n    messages:{\n        maxChoice:          'answers max',\n        error:              'Answer is necessary.',\n        errorMultiChoice:   'You must choose from {{checksMin}} to {{checksMax}} answers.'\n    },\n    showErrorMessage:       true,\n    templates: {\n        error:              '<div class=\"surveyjs-error-message\">{{errorMessage}}</div>',\n        \n        input:              '<input {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-input surveyjs-{{answerType}} {{fieldClasses}}\" />',\n\n        label:              '<label for=\"{{answerCode}}\" class=\"surveyjs-label {{labelClasses}}\">{{labelString}}</label>',\n\n        loading:            '<div class=\"surveyjs-loading\" data-surveyjs-loading>Loading...</div>',\n        \n        select:             '<select {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-select {{fieldClasses}}\">'+\n                                '{{optionsHtml}}'+\n                            '</select>',\n        \n        textarea:           '<textarea {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}\" class=\"surveyjs-textarea {{fieldClasses}}\"></textarea>',\n\n        wrapper: {\n            field:          '<div class=\"surveyjs-field-wrapper surveyjs-{{answerType}}-wrapper {{wrapperClasses}}\">'+\n                                '{{fieldTemplate}}'+\n                                '{{labelTemplate}}'+\n                            '</div>',\n            \n            nested:         '<div class=\"surveyjs-field-wrapper surveyjs-nested-wrapper\">'+\n                                '{{labelTemplate}}'+\n                                '<div class=\"surveyjs-nested-inner\">'+\n                                    '{{nestedFieldsHTML}}'+\n                                '</div>'+\n                            '</div>',\n\n            question:       '<div class=\"surveyjs-question-wrapper\" data-question-id=\"{{questionId}}\">'+\n                                '<div class=\"surveyjs-question-text\">{{questionText}}</div>'+\n                                '<div class=\"surveyjs-answers-wrapper\">'+\n                                    '{{answersHTML}}'+\n                                '</div>'+\n                                '<div class=\"surveyjs-errors-wrapper\" data-surveyjs-errors>{{errorTemplates}}</div>'+\n                            '</div>',\n            \n            related:        '<div class=\"surveyjs-field-wrapper surveyjs-related-wrapper input-group\">'+\n                                '<div class=\"input-group-prepend\">'+\n                                    '<div class=\"surveyjs-radio-wrapper input-group-text form-check\">'+\n                                        '{{fieldTemplate}}'+\n                                        '{{labelTemplate}}'+\n                                    '</div>'+\n                                '</div>'+\n                                '{{relatedFieldHTML}}'+\n                            '</div>'\n        }\n    }\n}\n"],"names":["ajaxCall","timeoutTimer","url","arguments","length","undefined","location","href","options","headers","Headers","timeout","controller","AbortController","signal","window","setTimeout","abort","fetch","then","response","ok","Error","statusText","json","error","message","clearTimeout","isDOMNode","node","Element","prototype","isPrototypeOf","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","element","customEvents","deepFreeze","obj","Object","getOwnPropertyNames","forEach","name","prop","_typeof","freeze","isPlainObject","object","toString","call","mergeObjects","out","Array","from","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","isNodeList","nodeList","NodeList","replaceObjectKeysInString","stringHTML","reduce","accString","regexStr","RegExp","replace","sortList","list","sort","a","b","generateOptionTags","optionsList","optionsHTML","opt","value","label","getAttributesStringHTML","answerObj","answerCode","isRequired","excludedAttrs","test","type","string","indexOf","data","toKebabCase","useAllCaps","newString","trim","match","p1","p2","p3","p4","p5","p6","toUpperCase","related","generateAnswers","answersList","extraData","allAnswersHTML","previousType","answer","index","answerHTML","answerType","question","checks","surveyId","id","answerData","questionNumber","wrapperClasses","cssClasses","wrapper","field","fieldAttributes","fieldClasses","addMoreName","labelString","labelClasses","relatedFieldHTML","relatedType","relatedIsSelect","relatedObj","requiredFrom","answerDataRelated","select","templates","input","optionsHtml","getTemplates","nested","nestedFieldsHTML","generateQAcode","questions","accCode","questionObj","external","questionHTML","questionId","required","answersHTML","answers","maxChoice","JSON","parse","checksMin","checksMax","maxChoiceText","messages","questionData","questionText","showErrorMessage","errorMessage","errorMultiChoice","buildSurvey","$form","qaHtmlAll","insertAdjacentHTML","extQuestions","$surveyWrapper","closest","qIndex","$externalCont","setAttribute","aIndex","$externalField","querySelectorAll","fieldProps","$answerCont","innerHTML","Survey","optionsObj","_classCallCheck","this","argsL","checkFormElem","self","surveyjs","loading","retrieveSurvey","initAjaxOptions","status","Promise","reject","defineProperty","isInitialized","classList","add","$loadingBox","parentNode","removeChild","detail","checkbox","file","radio","cache","credentials","Accept","method","mode","redirect","textarea","version"],"mappings":"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"}