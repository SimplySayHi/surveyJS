{"version":3,"file":"surveyjs.min.js","sources":["../../src/modules/version.js","../../src/modules/helpers/ajaxCall.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/customEvents.js","../../src/modules/helpers/deepFreeze.js","../../src/modules/helpers/isPlainObject.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/dispatchCustomEvent.js","../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/replaceObjectKeysInString.js","../../src/modules/helpers/sortList.js","../../src/modules/helpers/toKebabCase.js","../../src/modules-lite/options.js","../../src/modules/buildSurvey/generateQAcodeUtils/generateOptionTags.js","../../src/modules/buildSurvey/generateQAcodeUtils/getAttributesStringHTML.js","../../src/modules/buildSurvey/generateQAcodeUtils/getTemplates.js","../../src/modules/buildSurvey/generateQAcodeUtils/generateAnswers.js","../../src/modules/buildSurvey/generateQAcode.js","../../src/modules/buildSurvey/buildSurvey.js","../../src/index-lite.js"],"sourcesContent":["\nexport const version = '3.0.0';\n","\nexport const ajaxCall = ( url = location.href, options = {} ) => {\n\n    let timeoutTimer;\n\n    options.headers = new Headers( options.headers );\n\n    /* SET AbortController FOR timeout */\n    if ( options.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        options.signal = signal;\n\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, options.timeout);\n    }\n\n    return fetch( url, options )\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n        });\n        \n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n\n    const isString = typeof formEl,\n          isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n          isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n          obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n    \n}\n","\nexport const customEvents = {\n    init: 'sjs:init'\n}\n","\nexport const deepFreeze = obj => {\n\n    Object.getOwnPropertyNames(obj).forEach(name => {\n        const prop = obj[name];\n        if( typeof prop === 'object' && prop !== null ){\n            deepFreeze(prop);\n        }\n    });\n    return Object.freeze(obj);\n    \n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const replaceObjectKeysInString = (obj, stringHTML) => {\n    return Object.keys(obj).reduce((accString, name) => {\n        const regexStr = new RegExp( '{{' + name + '}}', 'g' );\n        return accString.replace(regexStr, obj[name]);\n    }, stringHTML);\n}\n","\nexport const sortList = ( list ) => {\n    if( list[0]['sort'] ){\n        list.sort((a, b) => a['sort'] > b['sort']);\n    }\n    return list;\n}\n","\nexport const toKebabCase = ( string = '', useAllCaps = false ) => {\n    let newString = string.trim().replace(/(([_ ])([a-z]))|(([a-z])?([A-Z]))/g, (match, p1, p2, p3, p4, p5, p6) => {\n        const concatGroup = p3 ? '-' + p3 : (p5 || '') + '-' + p6;\n        return concatGroup.toLowerCase();\n    } );\n    return useAllCaps ? newString.toUpperCase() : newString;\n}\n","\nexport const options = {\n    cssClasses: {\n        checkbox:           'form-check-input',\n        field:              'form-control',\n        file:               'form-control-file',\n        label:              'form-check-label',\n        radio:              'form-check-input',\n        wrapper: {\n            checkbox:       'form-check',\n            field:          '',\n            radio:          'form-check'\n        }\n    },\n    initAjaxOptions: {\n        cache:              'no-store',\n        credentials:        'same-origin',\n        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept':       'application/json'\n        },\n        method:             'GET',\n        mode:               'same-origin',\n        redirect:           'follow',\n        timeout:            0\n    },\n    messages:{\n        maxChoice:          'answers max',\n        error:              'Answer is necessary.',\n        errorMultiChoice:   'You must choose from {{checksMin}} to {{checksMax}} answers.'\n    },\n    showErrorMessage:       true,\n    templates: {\n        error:              '<div class=\"surveyjs-error-message\">{{errorMessage}}</div>',\n        \n        input:              '<input {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-input surveyjs-{{answerType}} {{fieldClasses}}\" />',\n\n        label:              '<label for=\"{{answerCode}}\" class=\"surveyjs-label {{labelClasses}}\">{{labelString}}</label>',\n\n        loading:            '<div class=\"surveyjs-loading\" data-surveyjs-loading>Loading...</div>',\n        \n        select:             '<select {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-select {{fieldClasses}}\">'+\n                                '{{optionsHtml}}'+\n                            '</select>',\n        \n        textarea:           '<textarea {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}\" class=\"surveyjs-textarea {{fieldClasses}}\"></textarea>',\n\n        wrapper: {\n            field:          '<div class=\"surveyjs-field-wrapper surveyjs-{{answerType}}-wrapper {{wrapperClasses}}\">'+\n                                '{{fieldTemplate}}'+\n                                '{{labelTemplate}}'+\n                            '</div>',\n            \n            nested:         '<div class=\"surveyjs-field-wrapper surveyjs-nested-wrapper\">'+\n                                '{{labelTemplate}}'+\n                                '<div class=\"surveyjs-nested-inner\">'+\n                                    '{{nestedFieldsHTML}}'+\n                                '</div>'+\n                            '</div>',\n\n            question:       '<div class=\"surveyjs-question-wrapper\" data-question-id=\"{{questionId}}\" data-formjs-question>'+\n                                '<div class=\"surveyjs-question-body\">'+\n                                    '<div class=\"surveyjs-question-text\">{{questionText}}</div>'+\n                                    '<div class=\"surveyjs-answers-wrapper\">'+\n                                        '{{answersHTML}}'+\n                                    '</div>'+\n                                    '<div class=\"surveyjs-errors-wrapper\" data-surveyjs-errors>{{errorTemplates}}</div>'+\n                                '</div>'+\n                            '</div>',\n            \n            related:        '<div class=\"surveyjs-field-wrapper surveyjs-related-wrapper input-group\">'+\n                                '<div class=\"input-group-prepend\">'+\n                                    '<div class=\"surveyjs-radio-wrapper input-group-text form-check\">'+\n                                        '{{fieldTemplate}}'+\n                                        '{{labelTemplate}}'+\n                                    '</div>'+\n                                '</div>'+\n                                '{{relatedFieldHTML}}'+\n                            '</div>'\n        }\n    }\n}\n","\nimport { sortList } from '../../helpers';\n\nexport const generateOptionTags = ( optionsList = [] ) => {\n\n    return sortList( optionsList ).reduce((optionsHTML, opt) => {\n        return optionsHTML += `<option value=\"${opt.value}\">${opt.label}</option>`;\n    }, '');\n\n}","\nimport { toKebabCase } from '../../helpers';\n\nexport const getAttributesStringHTML = ( answerObj, answerCode, isRequired ) => {\n    const excludedAttrs = ['data', 'id', 'label', 'nested', 'related', 'sort'];\n    \n    if( /^(option|textarea)$/.test(answerObj.type) ){\n        excludedAttrs.push('type', 'value');\n    }\n\n    let string = '';\n\n    Object.keys(answerObj)\n        .filter(name => excludedAttrs.indexOf(name) === -1)\n        .forEach(name => {\n            string += ` ${name}=\"${answerObj[name]}\"`;\n        });\n\n    if( answerObj.data ){\n        Object.keys(answerObj.data).forEach(name => {\n            string += ` data-${toKebabCase(name)}=\"${answerObj.data[name]}\"`;\n        });\n    }\n\n    if( isRequired ){\n        string += ' required';\n    }\n\n    if( answerObj.related ){\n        string += ' data-require-more';\n    }\n\n    string += ` id=\"${answerCode}\"`;\n\n    return string.trim();\n}\n","\nexport const getTemplates = ( answerType, templates ) => {\n    return {\n        field: templates[answerType] || templates.input,\n        label: /^(checkbox|nested|radio|related)$/.test(answerType) ? templates.label : '',\n        wrapper: templates.wrapper[answerType] || templates.wrapper.field\n    }\n}\n","\nimport { mergeObjects, replaceObjectKeysInString, sortList } from '../../helpers';\nimport { generateOptionTags }       from './generateOptionTags';\nimport { getAttributesStringHTML }  from './getAttributesStringHTML';\nimport { getTemplates }             from './getTemplates';\n\nexport const generateAnswers = ( answersList, extraData, options ) => {\n\n    let allAnswersHTML = '';\n    let previousType = '';\n\n    sortList( answersList ).forEach((answer, index) => {\n\n        let answerHTML = '';\n\n        // COLLECT USEFUL DATA\n        // answerType => checkbox, date, email, radio, select, text, textarea, etc...\n        const answerType = answer.type === 'option' ? 'select' : answer.type;\n        \n        if( answerType === 'select' && previousType === answerType ){ return; }\n\n        previousType = answerType;\n\n        if( extraData.question.checks ){\n            answer = mergeObjects({}, answer, {data:{checks:extraData.question.checks}});\n        }\n        \n        const answerCode = `${answerType}-${extraData.surveyId}-${extraData.question.id}-${answerType === 'select' ? (index + 1) : answer.id}`;\n        const answerData = {\n            questionNumber: extraData.question.index + 1,\n            wrapperClasses: options.cssClasses.wrapper[answerType] || options.cssClasses.wrapper.field,\n            fieldAttributes: getAttributesStringHTML( answer, answerCode, extraData.question.isRequired ),\n            fieldClasses: options.cssClasses[answerType] || options.cssClasses.field,\n\n            answerType,\n            answerCode,\n            addMoreName: '',\n\n            labelString: answer.label || '',\n            labelClasses: options.cssClasses.label\n        };\n\n        let relatedFieldHTML = '';\n        if( answer.related ){\n            const relatedType = answer.related.type || 'select';\n            const relatedIsSelect = relatedType === 'select';\n            const relatedObj = relatedIsSelect ? mergeObjects({}, answer) : answer.related;\n\n            relatedObj.type = relatedIsSelect ? 'option' : relatedType;\n            relatedObj.id = '';\n            relatedObj.data = mergeObjects({}, relatedObj.data, {requiredFrom:'#'+answerCode});\n            delete relatedObj.related;\n\n            const answerDataRelated = {\n                fieldAttributes: getAttributesStringHTML(relatedObj, '', false),\n                answerType: relatedType,\n                addMoreName: '-more',\n                fieldClasses: relatedIsSelect ? options.cssClasses.select : (options.cssClasses[relatedType] || options.cssClasses.field)\n            };\n\n            relatedFieldHTML = options.templates[relatedType] || options.templates.input;\n            if( relatedIsSelect ){\n                const optionsHtml = generateOptionTags( answer.related );\n                relatedFieldHTML = relatedFieldHTML.replace('{{optionsHtml}}', optionsHtml);\n            }\n\n            relatedFieldHTML = replaceObjectKeysInString(answerDataRelated, relatedFieldHTML);\n        }\n        \n        // TAKE RIGHT TEMPLATES ( wrapper, field and label ) AND PUT ALL TOGETHER\n        // answerTypeForTemplate => related, input, nested, select, textarea, etc...\n        const answerTypeForTemplate = answer.related ? 'related' : (answer.nested ? 'nested' : answerType);\n        const templates = getTemplates( answerTypeForTemplate, options.templates );\n\n        let nestedFieldsHTML = '';\n        if( answer.nested ){\n            nestedFieldsHTML = generateAnswers( answer.nested, extraData, options );\n        }\n\n        let optionsHtml = '';\n        if( answerType === 'select' ){\n            optionsHtml = generateOptionTags( answersList );\n        }\n\n        answerHTML = templates.wrapper\n                        .replace('{{relatedFieldHTML}}', relatedFieldHTML)\n                        .replace('{{fieldTemplate}}', templates.field)\n                        .replace('{{optionsHtml}}', optionsHtml)\n                        .replace('{{labelTemplate}}', templates.label)\n                        .replace('{{nestedFieldsHTML}}', nestedFieldsHTML);\n        allAnswersHTML += replaceObjectKeysInString(answerData, answerHTML);\n\n    });\n\n    return allAnswersHTML;\n\n}\n","\nimport { isPlainObject, replaceObjectKeysInString, sortList } from '../helpers';\nimport { generateAnswers } from './generateQAcodeUtils/generateAnswers';\n\nexport const generateQAcode = ( questions, surveyId, options ) => {\n\n    return sortList( questions ).reduce((accCode, questionObj, index) => {\n        if( questionObj.external ){ return accCode; }\n\n        let questionHTML = options.templates.wrapper.question;\n        const questionId = questionObj.id;\n        const questionNumber = index + 1;\n        const extraData = {\n            surveyId,\n            question: {\n                id: questionId,\n                index,\n                isRequired: !!questionObj.required\n            }\n        };\n\n        if( questionObj.checks ){\n            extraData.question.checks = questionObj.checks;\n        }\n        \n        let answersHTML = generateAnswers( questionObj.answers, extraData, options );\n\n        const maxChoice = questionObj.checks ? JSON.parse(questionObj.checks) : '';\n        const checksMin = maxChoice[0] || '';\n        const checksMax = maxChoice[1] || '';\n        const maxChoiceText = maxChoice && options.messages.maxChoice ? ' ('+ checksMax +' '+ options.messages.maxChoice +')' : '';\n\n        const questionData = {\n            questionId,\n            questionNumber,\n            questionText: questionObj.question + maxChoiceText,\n            answersHTML\n        };\n        questionHTML = replaceObjectKeysInString(questionData, questionHTML);\n\n        if( options.showErrorMessage ){\n            let errorMessage = maxChoice !== '' ? options.messages.errorMultiChoice : (questionObj.errorMessage || options.messages.error);\n\n            // CASE OF MULTIPLE ERROR MESSAGES FROM JSON DATA => DYNAMICALLY MANAGED VIA EVENT LISTENER IN CONSTRUCTOR\n            if( isPlainObject(errorMessage) ){\n                errorMessage = '';\n            }\n\n            questionHTML = questionHTML.replace( /{{errorTemplates}}/g, errorMessage );\n        }\n\n        return accCode += replaceObjectKeysInString({checksMin, checksMax}, questionHTML);\n    }, '');\n\n}\n","\nimport { generateQAcode } from './generateQAcode';\n\nexport const buildSurvey = ( data, formEl, options ) => {\n    \n    const qaHtmlAll = generateQAcode( data.questions, data.id, options );\n    formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforeend', qaHtmlAll );\n\n    // MANAGE EXTERNAL QUESTION\n    const extQuestions = data.questions.filter(obj => obj.external);\n    if( extQuestions.length > 0 ){\n        const surveyWrapperEl = formEl.closest('[data-surveyjs-wrapper]');\n        extQuestions.forEach((question, qIndex) => {\n\n            const externalCont = surveyWrapperEl.querySelector('[data-surveyjs-external=\"'+ (qIndex+1) +'\"]');\n            \n            externalCont.setAttribute('data-question-id', question.id);\n\n            question.answers.forEach((answer, aIndex) => {\n                const externalField = externalCont.querySelectorAll('[data-field]')[aIndex];\n                const fieldProps = {\n                        id: `${answer.type}-${data.id}-${question.id}-${answer.id}`,\n                        type: answer.type,\n                        value: answer.value,\n                        required: !!question.required\n                    };\n                \n                Object.keys(fieldProps).forEach(name => {\n                    externalField[name] = fieldProps[name];\n                });\n\n                const answerCont = externalField.closest('[data-answer]');\n                answerCont.querySelector('label').setAttribute('for', fieldProps.id);\n                answerCont.querySelector('[data-label]').innerHTML = answer.label;\n                externalCont.querySelector('[data-question]').innerHTML = question.question;\n            });\n\n        });\n    }\n\n}\n","\nimport { version }      from './modules/version';\nimport { ajaxCall, checkFormEl, customEvents, deepFreeze, dispatchCustomEvent, isNodeList, mergeObjects } from './modules/helpers';\nimport { options }      from './modules-lite/options';\nimport { buildSurvey }  from './modules/buildSurvey/buildSurvey';\n\nclass Survey {\n\n    constructor( formEl, optionsObj = {} ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(formEl);\n\n        if( argsL === 0 || (argsL > 0 && !formEl) ){\n            throw new Error('First argument \"formEl\" is missing or falsy!');\n        }\n        if( isNodeList(formEl) ){\n            throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n        }\n        if( !optionsObj.url || typeof optionsObj.url !== 'string' ){\n            throw new Error('\"options.url\" is missing or not a string!');\n        }\n\n        const self = this;\n        self.formEl = checkFormElem.element;\n        self.options = mergeObjects( {}, Survey.prototype.options, optionsObj );\n        formEl = self.formEl;\n        optionsObj = self.options;\n\n        formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforebegin', optionsObj.templates.loading );\n\n        // CREATE SURVEY\n        const retrieveSurvey = ajaxCall(optionsObj.url, optionsObj.initAjaxOptions)\n            .then(response => {\n                if( response.status.toLowerCase() !== 'success' ){\n                    return Promise.reject(response);\n                }\n                if( response.data.questions && response.data.questions.length > 0 ){\n                    buildSurvey(response.data, formEl, optionsObj);\n                    Object.defineProperty(self, 'data', {\n                        value: deepFreeze(response.data)\n                    });\n                    self.isInitialized = true;\n                    formEl.closest('[data-surveyjs-wrapper]').classList.add('surveyjs-init-success');\n                }\n                return response;\n            })\n            .finally(() => {\n                const loadingBoxEl = formEl.querySelector('[data-surveyjs-loading]');\n                if( loadingBoxEl ){\n                    loadingBoxEl.parentNode.removeChild(loadingBoxEl);\n                }\n            });\n        \n        dispatchCustomEvent( formEl, customEvents.init, retrieveSurvey );\n    }\n\n    static setOptions( optionsObj ){\n        Survey.prototype.options = mergeObjects({}, Survey.prototype.options, optionsObj);\n    }\n\n}\n\nSurvey.prototype.isInitialized = false;\nSurvey.prototype.options = options;\nSurvey.prototype.version = version;\n\nexport default Survey;\n"],"names":["version","ajaxCall","timeoutTimer","url","location","href","options","headers","Headers","timeout","controller","AbortController","signal","window","setTimeout","abort","fetch","then","response","ok","json","Promise","reject","error","clearTimeout","isDOMNode","node","Element","prototype","isPrototypeOf","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","element","customEvents","init","deepFreeze","obj","Object","getOwnPropertyNames","forEach","name","prop","_typeof","freeze","isPlainObject","object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","data","eventOptions","bubbles","eventObj","Event","dispatchEvent","isNodeList","nodeList","NodeList","replaceObjectKeysInString","stringHTML","reduce","accString","regexStr","RegExp","replace","sortList","list","sort","a","b","toKebabCase","string","useAllCaps","newString","trim","match","p1","p2","p3","p4","p5","p6","toUpperCase","cssClasses","checkbox","field","file","label","radio","wrapper","initAjaxOptions","cache","credentials","method","mode","redirect","messages","maxChoice","errorMultiChoice","showErrorMessage","templates","input","loading","select","textarea","nested","question","related","generateOptionTags","optionsList","optionsHTML","opt","value","getAttributesStringHTML","answerObj","answerCode","isRequired","excludedAttrs","test","type","indexOf","getTemplates","answerType","generateAnswers","answersList","extraData","allAnswersHTML","previousType","answer","index","answerHTML","checks","surveyId","id","answerData","questionNumber","wrapperClasses","fieldAttributes","fieldClasses","addMoreName","labelString","labelClasses","relatedFieldHTML","relatedType","relatedIsSelect","relatedObj","requiredFrom","answerDataRelated","optionsHtml","answerTypeForTemplate","nestedFieldsHTML","generateQAcode","questions","accCode","questionObj","external","questionHTML","questionId","required","answersHTML","answers","JSON","parse","checksMin","checksMax","maxChoiceText","questionData","questionText","errorMessage","buildSurvey","qaHtmlAll","insertAdjacentHTML","extQuestions","length","surveyWrapperEl","closest","qIndex","externalCont","setAttribute","aIndex","externalField","querySelectorAll","fieldProps","answerCont","innerHTML","Survey","optionsObj","argsL","checkFormElem","Error","self","this","retrieveSurvey","status","defineProperty","isInitialized","classList","add","loadingBoxEl","parentNode","removeChild"],"mappings":"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"}