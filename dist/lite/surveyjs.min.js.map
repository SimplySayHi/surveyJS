{"version":3,"file":"surveyjs.min.js","sources":["../../src/modules/version.js","../../src/modules/helpers/ajaxCall.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/customEvents.js","../../src/modules/helpers/deepFreeze.js","../../src/modules/helpers/isPlainObject.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/dispatchCustomEvent.js","../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/replaceObjectKeysInString.js","../../src/modules/helpers/sortList.js","../../src/modules/buildSurvey/generateQAcodeUtils/generateOptionTags.js","../../src/modules/buildSurvey/generateQAcodeUtils/getAttributesStringHTML.js","../../src/modules/helpers/toKebabCase.js","../../src/modules/buildSurvey/generateQAcodeUtils/generateAnswers.js","../../src/modules/buildSurvey/generateQAcodeUtils/getTemplates.js","../../src/modules/buildSurvey/generateQAcode.js","../../src/modules/buildSurvey/buildSurvey.js","../../src/index-lite.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const version = '3.0.2';\n","\nexport const ajaxCall = ( url = location.href, options = {} ) => {\n\n    let timeoutTimer;\n\n    options.headers = new Headers( options.headers );\n\n    /* SET AbortController FOR timeout */\n    if ( options.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        options.signal = signal;\n\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, options.timeout);\n    }\n\n    return fetch( url, options )\n        .then(response => {\n            if( !response.ok ){\n                throw new Error(response.statusText);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            throw new Error(error.message);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n        });\n        \n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n\n    const isString = typeof formEl,\n          isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n          isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n          obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n    \n}\n","\nexport const customEvents = {\n    init: 'sjs:init'\n}\n","\nexport const deepFreeze = obj => {\n\n    Object.getOwnPropertyNames(obj).forEach(name => {\n        const prop = obj[name];\n        if( typeof prop === 'object' && prop !== null ){\n            deepFreeze(prop);\n        }\n    });\n    return Object.freeze(obj);\n    \n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const replaceObjectKeysInString = (obj, stringHTML) => {\n    return Object.keys(obj).reduce((accString, name) => {\n        const regexStr = new RegExp( '{{' + name + '}}', 'g' );\n        return accString.replace(regexStr, obj[name]);\n    }, stringHTML);\n}\n","\nexport const sortList = ( list ) => {\n    if( list[0]['sort'] ){\n        list.sort((a, b) => a['sort'] > b['sort']);\n    }\n    return list;\n}\n","\nimport { sortList } from '../../helpers';\n\nexport const generateOptionTags = ( optionsList = [] ) => {\n\n    return sortList( optionsList ).reduce((optionsHTML, opt) => {\n        return optionsHTML += `<option value=\"${opt.value}\">${opt.label}</option>`;\n    }, '');\n\n}","\nimport { toKebabCase } from '../../helpers';\n\nexport const getAttributesStringHTML = ( answerObj, answerCode, isRequired ) => {\n    const excludedAttrs = ['data', 'id', 'label', 'nested', 'related', 'sort'];\n    \n    if( /^(option|textarea)$/.test(answerObj.type) ){\n        excludedAttrs.push('type', 'value');\n    }\n\n    let string = '';\n\n    Object.keys(answerObj)\n        .filter(name => excludedAttrs.indexOf(name) === -1)\n        .forEach(name => {\n            string += ` ${name}=\"${answerObj[name]}\"`;\n        });\n\n    if( answerObj.data ){\n        Object.keys(answerObj.data).forEach(name => {\n            string += ` data-${toKebabCase(name)}=\"${answerObj.data[name]}\"`;\n        });\n    }\n\n    if( isRequired ){\n        string += ' required';\n    }\n\n    if( answerObj.related ){\n        string += ' data-require-more';\n    }\n\n    string += ` id=\"${answerCode}\"`;\n\n    return string.trim();\n}\n","\nexport const toKebabCase = ( string = '', useAllCaps = false ) => {\n    let newString = string.trim().replace(/(([_ ])([a-z]))|(([a-z])?([A-Z]))/g, (match, p1, p2, p3, p4, p5, p6) => {\n        const concatGroup = p3 ? '-' + p3 : (p5 || '') + '-' + p6;\n        return concatGroup.toLowerCase();\n    } );\n    return useAllCaps ? newString.toUpperCase() : newString;\n}\n","\nimport { mergeObjects, replaceObjectKeysInString, sortList } from '../../helpers';\nimport { generateOptionTags }       from './generateOptionTags';\nimport { getAttributesStringHTML }  from './getAttributesStringHTML';\nimport { getTemplates }             from './getTemplates';\n\nexport const generateAnswers = ( answersList, extraData, options ) => {\n\n    let allAnswersHTML = '';\n    let previousType = '';\n\n    sortList( answersList ).forEach((answer, index) => {\n\n        let answerHTML = '';\n\n        // COLLECT USEFUL DATA\n        // answerType => checkbox, date, email, radio, select, text, textarea, etc...\n        const answerType = answer.type === 'option' ? 'select' : answer.type;\n        \n        if( answerType === 'select' && previousType === answerType ){ return; }\n\n        previousType = answerType;\n\n        if( extraData.question.checks ){\n            answer = mergeObjects({}, answer, {data:{checks:extraData.question.checks}});\n        }\n        \n        const answerCode = `${answerType}-${extraData.surveyId}-${extraData.question.id}-${answerType === 'select' ? (index + 1) : answer.id}`;\n        const answerData = {\n            questionNumber: extraData.question.index + 1,\n            wrapperClasses: options.cssClasses.wrapper[answerType] || options.cssClasses.wrapper.field,\n            fieldAttributes: getAttributesStringHTML( answer, answerCode, extraData.question.isRequired ),\n            fieldClasses: options.cssClasses[answerType] || options.cssClasses.field,\n\n            answerType,\n            answerCode,\n            addMoreName: '',\n\n            labelString: answer.label || '',\n            labelClasses: options.cssClasses.label\n        };\n\n        let relatedFieldHTML = '';\n        if( answer.related ){\n            const relatedType = answer.related.type || 'select';\n            const relatedIsSelect = relatedType === 'select';\n            const relatedObj = relatedIsSelect ? mergeObjects({}, answer) : answer.related;\n\n            relatedObj.type = relatedIsSelect ? 'option' : relatedType;\n            relatedObj.id = '';\n            relatedObj.data = mergeObjects({}, relatedObj.data, {requiredFrom:'#'+answerCode});\n            delete relatedObj.related;\n\n            const answerDataRelated = {\n                fieldAttributes: getAttributesStringHTML(relatedObj, '', false),\n                answerType: relatedType,\n                addMoreName: '-more',\n                fieldClasses: relatedIsSelect ? options.cssClasses.select : (options.cssClasses[relatedType] || options.cssClasses.field)\n            };\n\n            relatedFieldHTML = options.templates[relatedType] || options.templates.input;\n            if( relatedIsSelect ){\n                const optionsHtml = generateOptionTags( answer.related );\n                relatedFieldHTML = relatedFieldHTML.replace('{{optionsHtml}}', optionsHtml);\n            }\n\n            relatedFieldHTML = replaceObjectKeysInString(answerDataRelated, relatedFieldHTML);\n        }\n        \n        // TAKE RIGHT TEMPLATES ( wrapper, field and label ) AND PUT ALL TOGETHER\n        // answerTypeForTemplate => related, input, nested, select, textarea, etc...\n        const answerTypeForTemplate = answer.related ? 'related' : (answer.nested ? 'nested' : answerType);\n        const templates = getTemplates( answerTypeForTemplate, options.templates );\n\n        let nestedFieldsHTML = '';\n        if( answer.nested ){\n            nestedFieldsHTML = generateAnswers( answer.nested, extraData, options );\n        }\n\n        let optionsHtml = '';\n        if( answerType === 'select' ){\n            optionsHtml = generateOptionTags( answersList );\n        }\n\n        answerHTML = templates.wrapper\n                        .replace('{{relatedFieldHTML}}', relatedFieldHTML)\n                        .replace('{{fieldTemplate}}', templates.field)\n                        .replace('{{optionsHtml}}', optionsHtml)\n                        .replace('{{labelTemplate}}', templates.label)\n                        .replace('{{nestedFieldsHTML}}', nestedFieldsHTML);\n        allAnswersHTML += replaceObjectKeysInString(answerData, answerHTML);\n\n    });\n\n    return allAnswersHTML;\n\n}\n","\nexport const getTemplates = ( answerType, templates ) => {\n    return {\n        field: templates[answerType] || templates.input,\n        label: /^(checkbox|nested|radio|related)$/.test(answerType) ? templates.label : '',\n        wrapper: templates.wrapper[answerType] || templates.wrapper.field\n    }\n}\n","\nimport { isPlainObject, replaceObjectKeysInString, sortList } from '../helpers';\nimport { generateAnswers } from './generateQAcodeUtils/generateAnswers';\n\nexport const generateQAcode = ( questions, surveyId, options ) => {\n\n    return sortList( questions ).reduce((accCode, questionObj, index) => {\n        if( questionObj.external ){ return accCode; }\n\n        let questionHTML = options.templates.wrapper.question;\n        const questionId = questionObj.id;\n        const questionNumber = index + 1;\n        const extraData = {\n            surveyId,\n            question: {\n                id: questionId,\n                index,\n                isRequired: !!questionObj.required\n            }\n        };\n\n        if( questionObj.checks ){\n            extraData.question.checks = questionObj.checks;\n        }\n        \n        const answersHTML = generateAnswers( questionObj.answers, extraData, options );\n\n        const maxChoice = questionObj.checks ? JSON.parse(questionObj.checks) : '';\n        const checksMin = maxChoice[0] || '';\n        const checksMax = maxChoice[1] || '';\n        const maxChoiceText = maxChoice && options.messages.maxChoice ? ' ('+ checksMax +' '+ options.messages.maxChoice +')' : '';\n\n        const questionData = {\n            questionId,\n            questionNumber,\n            questionText: questionObj.question + maxChoiceText,\n            answersHTML\n        };\n        questionHTML = replaceObjectKeysInString(questionData, questionHTML);\n\n        if( options.showErrorMessage ){\n            let errorMessage = maxChoice !== '' ? options.messages.errorMultiChoice : (questionObj.errorMessage || options.messages.error);\n\n            // CASE OF MULTIPLE ERROR MESSAGES FROM JSON DATA => DYNAMICALLY MANAGED VIA EVENT LISTENER IN CONSTRUCTOR\n            if( isPlainObject(errorMessage) ){\n                errorMessage = '';\n            }\n\n            questionHTML = questionHTML.replace( /{{errorTemplates}}/g, errorMessage );\n        }\n\n        return accCode += replaceObjectKeysInString({checksMin, checksMax}, questionHTML);\n    }, '');\n\n}\n","\nimport { generateQAcode } from './generateQAcode';\n\nexport const buildSurvey = ( data, formEl, options ) => {\n    \n    const qaHtmlAll = generateQAcode( data.questions, data.id, options );\n    formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforeend', qaHtmlAll );\n\n    // MANAGE EXTERNAL QUESTION\n    const extQuestions = data.questions.filter(obj => obj.external);\n    if( extQuestions.length > 0 ){\n        const surveyWrapperEl = formEl.closest('[data-surveyjs-wrapper]');\n        extQuestions.forEach((question, qIndex) => {\n\n            const externalCont = surveyWrapperEl.querySelector('[data-surveyjs-external=\"'+ (qIndex+1) +'\"]');\n            \n            externalCont.setAttribute('data-question-id', question.id);\n\n            question.answers.forEach((answer, aIndex) => {\n                const externalField = externalCont.querySelectorAll('[data-field]')[aIndex];\n                const fieldProps = {\n                        id: `${answer.type}-${data.id}-${question.id}-${answer.id}`,\n                        type: answer.type,\n                        value: answer.value,\n                        required: !!question.required\n                    };\n                \n                Object.keys(fieldProps).forEach(name => {\n                    externalField[name] = fieldProps[name];\n                });\n\n                const answerCont = externalField.closest('[data-answer]');\n                answerCont.querySelector('label').setAttribute('for', fieldProps.id);\n                answerCont.querySelector('[data-label]').innerHTML = answer.label;\n                externalCont.querySelector('[data-question]').innerHTML = question.question;\n            });\n\n        });\n    }\n\n}\n","\nimport { version }      from './modules/version';\nimport { ajaxCall, checkFormEl, customEvents, deepFreeze, dispatchCustomEvent, isNodeList, mergeObjects } from './modules/helpers';\nimport { options }      from './modules-lite/options';\nimport { buildSurvey }  from './modules/buildSurvey/buildSurvey';\n\nclass Survey {\n\n    constructor( formEl, optionsObj = {} ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(formEl);\n\n        if( argsL === 0 || (argsL > 0 && !formEl) ){\n            throw new Error('First argument \"formEl\" is missing or falsy!');\n        }\n        if( isNodeList(formEl) ){\n            throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n        }\n        if( !optionsObj.url || typeof optionsObj.url !== 'string' ){\n            throw new Error('\"options.url\" is missing or not a string!');\n        }\n\n        const self = this;\n        self.formEl = checkFormElem.element;\n        self.options = mergeObjects( {}, Survey.prototype.options, optionsObj );\n        formEl = self.formEl;\n        optionsObj = self.options;\n\n        formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforebegin', optionsObj.templates.loading );\n\n        // CREATE SURVEY\n        const retrieveSurvey = ajaxCall(optionsObj.url, optionsObj.initAjaxOptions)\n            .then(response => {\n                if( response.status.toLowerCase() !== 'success' ){\n                    return Promise.reject(response);\n                }\n                if( response.data.questions && response.data.questions.length > 0 ){\n                    buildSurvey(response.data, formEl, optionsObj);\n                    Object.defineProperty(self, 'data', {\n                        value: deepFreeze(response.data)\n                    });\n                    self.isInitialized = true;\n                    formEl.closest('[data-surveyjs-wrapper]').classList.add('surveyjs-init-success');\n                }\n                return response;\n            })\n            .finally(() => {\n                const loadingBoxEl = formEl.querySelector('[data-surveyjs-loading]');\n                if( loadingBoxEl ){\n                    loadingBoxEl.parentNode.removeChild(loadingBoxEl);\n                }\n            });\n        \n        dispatchCustomEvent( formEl, customEvents.init, retrieveSurvey );\n    }\n\n    static setOptions( optionsObj ){\n        Survey.prototype.options = mergeObjects({}, Survey.prototype.options, optionsObj);\n    }\n\n}\n\nSurvey.prototype.isInitialized = false;\nSurvey.prototype.options = options;\nSurvey.prototype.version = version;\n\nexport default Survey;\n","\nexport const options = {\n    cssClasses: {\n        checkbox:           'form-check-input',\n        field:              'form-control',\n        file:               'form-control-file',\n        label:              'form-check-label',\n        radio:              'form-check-input',\n        wrapper: {\n            checkbox:       'form-check',\n            field:          '',\n            radio:          'form-check'\n        }\n    },\n    initAjaxOptions: {\n        cache:              'no-store',\n        credentials:        'same-origin',\n        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept':       'application/json'\n        },\n        method:             'GET',\n        mode:               'same-origin',\n        redirect:           'follow',\n        timeout:            0\n    },\n    messages:{\n        maxChoice:          'answers max',\n        error:              'Answer is necessary.',\n        errorMultiChoice:   'You must choose from {{checksMin}} to {{checksMax}} answers.'\n    },\n    showErrorMessage:       true,\n    templates: {\n        error:              '<div class=\"surveyjs-error-message\">{{errorMessage}}</div>',\n        \n        input:              '<input {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-input surveyjs-{{answerType}} {{fieldClasses}}\" />',\n\n        label:              '<label for=\"{{answerCode}}\" class=\"surveyjs-label {{labelClasses}}\">{{labelString}}</label>',\n\n        loading:            '<div class=\"surveyjs-loading\" data-surveyjs-loading>Loading...</div>',\n        \n        select:             '<select {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-select {{fieldClasses}}\">'+\n                                '{{optionsHtml}}'+\n                            '</select>',\n        \n        textarea:           '<textarea {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}\" class=\"surveyjs-textarea {{fieldClasses}}\"></textarea>',\n\n        wrapper: {\n            field:          '<div class=\"surveyjs-field-wrapper surveyjs-{{answerType}}-wrapper {{wrapperClasses}}\">'+\n                                '{{fieldTemplate}}'+\n                                '{{labelTemplate}}'+\n                            '</div>',\n            \n            nested:         '<div class=\"surveyjs-field-wrapper surveyjs-nested-wrapper\">'+\n                                '{{labelTemplate}}'+\n                                '<div class=\"surveyjs-nested-inner\">'+\n                                    '{{nestedFieldsHTML}}'+\n                                '</div>'+\n                            '</div>',\n\n            question:       '<div class=\"surveyjs-question-wrapper\" data-question-id=\"{{questionId}}\">'+\n                                '<div class=\"surveyjs-question-text\">{{questionText}}</div>'+\n                                '<div class=\"surveyjs-answers-wrapper\">'+\n                                    '{{answersHTML}}'+\n                                '</div>'+\n                                '<div class=\"surveyjs-errors-wrapper\" data-surveyjs-errors>{{errorTemplates}}</div>'+\n                            '</div>',\n            \n            related:        '<div class=\"surveyjs-field-wrapper surveyjs-related-wrapper input-group\">'+\n                                '<div class=\"input-group-prepend\">'+\n                                    '<div class=\"surveyjs-radio-wrapper input-group-text form-check\">'+\n                                        '{{fieldTemplate}}'+\n                                        '{{labelTemplate}}'+\n                                    '</div>'+\n                                '</div>'+\n                                '{{relatedFieldHTML}}'+\n                            '</div>'\n        }\n    }\n}\n"],"names":["ajaxCall","timeoutTimer","url","location","href","options","headers","Headers","timeout","controller","AbortController","signal","window","setTimeout","abort","fetch","then","response","ok","Error","statusText","json","error","message","clearTimeout","isDOMNode","node","Element","prototype","isPrototypeOf","checkFormEl","formEl","isString","isFormSelector","document","querySelector","tagName","toLowerCase","result","element","customEvents","deepFreeze","obj","Object","getOwnPropertyNames","forEach","name","prop","_typeof","freeze","isPlainObject","object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","data","eventOptions","bubbles","eventObj","Event","dispatchEvent","isNodeList","nodeList","NodeList","replaceObjectKeysInString","stringHTML","reduce","accString","regexStr","RegExp","replace","sortList","list","sort","a","b","generateOptionTags","optionsList","optionsHTML","opt","value","label","getAttributesStringHTML","answerObj","answerCode","isRequired","excludedAttrs","test","type","string","indexOf","useAllCaps","newString","trim","match","p1","p2","p3","p4","p5","p6","toUpperCase","toKebabCase","related","generateAnswers","answersList","extraData","allAnswersHTML","previousType","answer","index","answerHTML","answerType","question","checks","surveyId","id","answerData","questionNumber","wrapperClasses","cssClasses","wrapper","field","fieldAttributes","fieldClasses","addMoreName","labelString","labelClasses","relatedFieldHTML","relatedType","relatedIsSelect","relatedObj","requiredFrom","answerDataRelated","select","templates","input","optionsHtml","getTemplates","nested","nestedFieldsHTML","generateQAcode","questions","accCode","questionObj","external","questionHTML","questionId","required","answersHTML","answers","maxChoice","JSON","parse","checksMin","checksMax","maxChoiceText","messages","questionData","questionText","showErrorMessage","errorMessage","errorMultiChoice","buildSurvey","qaHtmlAll","insertAdjacentHTML","extQuestions","length","surveyWrapperEl","closest","qIndex","externalCont","setAttribute","aIndex","externalField","querySelectorAll","fieldProps","answerCont","innerHTML","Survey","optionsObj","argsL","checkFormElem","self","this","loading","retrieveSurvey","initAjaxOptions","status","Promise","reject","defineProperty","isInitialized","classList","add","loadingBoxEl","parentNode","removeChild","checkbox","file","radio","cache","credentials","method","mode","redirect","textarea","version"],"mappings":"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"}