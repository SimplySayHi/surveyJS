{"version":3,"file":"surveyjs-esm.min.js","sources":["../../src/modules/version.js","../../src/modules/helpers/isDOMNode.js","../../src/modules/helpers/customEvents.js","../../src/modules/helpers/deepFreeze.js","../../src/modules/helpers/isPlainObject.js","../../src/modules/helpers/mergeObjects.js","../../src/modules/helpers/replaceObjectKeysInString.js","../../src/modules/helpers/sortList.js","../../src/modules/buildSurvey/generateQAcodeUtils/generateOptionTags.js","../../src/modules/buildSurvey/generateQAcodeUtils/getAttributesStringHTML.js","../../src/modules/helpers/toKebabCase.js","../../src/modules/buildSurvey/generateQAcodeUtils/generateAnswers.js","../../src/modules/buildSurvey/generateQAcodeUtils/getTemplates.js","../../src/modules/buildSurvey/buildSurvey.js","../../src/modules/buildSurvey/generateQAcode.js","../../src/index-lite.js","../../src/modules/helpers/checkFormEl.js","../../src/modules/helpers/isNodeList.js","../../src/modules/helpers/ajaxCall.js","../../src/modules/helpers/dispatchCustomEvent.js","../../src/modules-lite/options.js"],"sourcesContent":["\nexport const version = '3.0.2';\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nexport const customEvents = {\n    init: 'sjs:init'\n}\n","\nexport const deepFreeze = obj => {\n\n    Object.getOwnPropertyNames(obj).forEach(name => {\n        const prop = obj[name];\n        if( typeof prop === 'object' && prop !== null ){\n            deepFreeze(prop);\n        }\n    });\n    return Object.freeze(obj);\n    \n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nexport const replaceObjectKeysInString = (obj, stringHTML) => {\n    return Object.keys(obj).reduce((accString, name) => {\n        const regexStr = new RegExp( '{{' + name + '}}', 'g' );\n        return accString.replace(regexStr, obj[name]);\n    }, stringHTML);\n}\n","\nexport const sortList = ( list ) => {\n    if( list[0]['sort'] ){\n        list.sort((a, b) => a['sort'] > b['sort']);\n    }\n    return list;\n}\n","\nimport { sortList } from '../../helpers';\n\nexport const generateOptionTags = ( optionsList = [] ) => {\n\n    return sortList( optionsList ).reduce((optionsHTML, opt) => {\n        return optionsHTML += `<option value=\"${opt.value}\">${opt.label}</option>`;\n    }, '');\n\n}","\nimport { toKebabCase } from '../../helpers';\n\nexport const getAttributesStringHTML = ( answerObj, answerCode, isRequired ) => {\n    const excludedAttrs = ['data', 'id', 'label', 'nested', 'related', 'sort'];\n    \n    if( /^(option|textarea)$/.test(answerObj.type) ){\n        excludedAttrs.push('type', 'value');\n    }\n\n    let string = '';\n\n    Object.keys(answerObj)\n        .filter(name => excludedAttrs.indexOf(name) === -1)\n        .forEach(name => {\n            string += ` ${name}=\"${answerObj[name]}\"`;\n        });\n\n    if( answerObj.data ){\n        Object.keys(answerObj.data).forEach(name => {\n            string += ` data-${toKebabCase(name)}=\"${answerObj.data[name]}\"`;\n        });\n    }\n\n    if( isRequired ){\n        string += ' required';\n    }\n\n    if( answerObj.related ){\n        string += ' data-require-more';\n    }\n\n    string += ` id=\"${answerCode}\"`;\n\n    return string.trim();\n}\n","\nexport const toKebabCase = ( string = '', useAllCaps = false ) => {\n    let newString = string.trim().replace(/(([_ ])([a-z]))|(([a-z])?([A-Z]))/g, (match, p1, p2, p3, p4, p5, p6) => {\n        const concatGroup = p3 ? '-' + p3 : (p5 || '') + '-' + p6;\n        return concatGroup.toLowerCase();\n    } );\n    return useAllCaps ? newString.toUpperCase() : newString;\n}\n","\nimport { mergeObjects, replaceObjectKeysInString, sortList } from '../../helpers';\nimport { generateOptionTags }       from './generateOptionTags';\nimport { getAttributesStringHTML }  from './getAttributesStringHTML';\nimport { getTemplates }             from './getTemplates';\n\nexport const generateAnswers = ( answersList, extraData, options ) => {\n\n    let allAnswersHTML = '';\n    let previousType = '';\n\n    sortList( answersList ).forEach((answer, index) => {\n\n        let answerHTML = '';\n\n        // COLLECT USEFUL DATA\n        // answerType => checkbox, date, email, radio, select, text, textarea, etc...\n        const answerType = answer.type === 'option' ? 'select' : answer.type;\n        \n        if( answerType === 'select' && previousType === answerType ){ return; }\n\n        previousType = answerType;\n\n        if( extraData.question.checks ){\n            answer = mergeObjects({}, answer, {data:{checks:extraData.question.checks}});\n        }\n        \n        const answerCode = `${answerType}-${extraData.surveyId}-${extraData.question.id}-${answerType === 'select' ? (index + 1) : answer.id}`;\n        const answerData = {\n            questionNumber: extraData.question.index + 1,\n            wrapperClasses: options.cssClasses.wrapper[answerType] || options.cssClasses.wrapper.field,\n            fieldAttributes: getAttributesStringHTML( answer, answerCode, extraData.question.isRequired ),\n            fieldClasses: options.cssClasses[answerType] || options.cssClasses.field,\n\n            answerType,\n            answerCode,\n            addMoreName: '',\n\n            labelString: answer.label || '',\n            labelClasses: options.cssClasses.label\n        };\n\n        let relatedFieldHTML = '';\n        if( answer.related ){\n            const relatedType = answer.related.type || 'select';\n            const relatedIsSelect = relatedType === 'select';\n            const relatedObj = relatedIsSelect ? mergeObjects({}, answer) : answer.related;\n\n            relatedObj.type = relatedIsSelect ? 'option' : relatedType;\n            relatedObj.id = '';\n            relatedObj.data = mergeObjects({}, relatedObj.data, {requiredFrom:'#'+answerCode});\n            delete relatedObj.related;\n\n            const answerDataRelated = {\n                fieldAttributes: getAttributesStringHTML(relatedObj, '', false),\n                answerType: relatedType,\n                addMoreName: '-more',\n                fieldClasses: relatedIsSelect ? options.cssClasses.select : (options.cssClasses[relatedType] || options.cssClasses.field)\n            };\n\n            relatedFieldHTML = options.templates[relatedType] || options.templates.input;\n            if( relatedIsSelect ){\n                const optionsHtml = generateOptionTags( answer.related );\n                relatedFieldHTML = relatedFieldHTML.replace('{{optionsHtml}}', optionsHtml);\n            }\n\n            relatedFieldHTML = replaceObjectKeysInString(answerDataRelated, relatedFieldHTML);\n        }\n        \n        // TAKE RIGHT TEMPLATES ( wrapper, field and label ) AND PUT ALL TOGETHER\n        // answerTypeForTemplate => related, input, nested, select, textarea, etc...\n        const answerTypeForTemplate = answer.related ? 'related' : (answer.nested ? 'nested' : answerType);\n        const templates = getTemplates( answerTypeForTemplate, options.templates );\n\n        let nestedFieldsHTML = '';\n        if( answer.nested ){\n            nestedFieldsHTML = generateAnswers( answer.nested, extraData, options );\n        }\n\n        let optionsHtml = '';\n        if( answerType === 'select' ){\n            optionsHtml = generateOptionTags( answersList );\n        }\n\n        answerHTML = templates.wrapper\n                        .replace('{{relatedFieldHTML}}', relatedFieldHTML)\n                        .replace('{{fieldTemplate}}', templates.field)\n                        .replace('{{optionsHtml}}', optionsHtml)\n                        .replace('{{labelTemplate}}', templates.label)\n                        .replace('{{nestedFieldsHTML}}', nestedFieldsHTML);\n        allAnswersHTML += replaceObjectKeysInString(answerData, answerHTML);\n\n    });\n\n    return allAnswersHTML;\n\n}\n","\nexport const getTemplates = ( answerType, templates ) => {\n    return {\n        field: templates[answerType] || templates.input,\n        label: /^(checkbox|nested|radio|related)$/.test(answerType) ? templates.label : '',\n        wrapper: templates.wrapper[answerType] || templates.wrapper.field\n    }\n}\n","\nimport { generateQAcode } from './generateQAcode';\n\nexport const buildSurvey = ( data, formEl, options ) => {\n    \n    const qaHtmlAll = generateQAcode( data.questions, data.id, options );\n    formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforeend', qaHtmlAll );\n\n    // MANAGE EXTERNAL QUESTION\n    const extQuestions = data.questions.filter(obj => obj.external);\n    if( extQuestions.length > 0 ){\n        const surveyWrapperEl = formEl.closest('[data-surveyjs-wrapper]');\n        extQuestions.forEach((question, qIndex) => {\n\n            const externalCont = surveyWrapperEl.querySelector('[data-surveyjs-external=\"'+ (qIndex+1) +'\"]');\n            \n            externalCont.setAttribute('data-question-id', question.id);\n\n            question.answers.forEach((answer, aIndex) => {\n                const externalField = externalCont.querySelectorAll('[data-field]')[aIndex];\n                const fieldProps = {\n                        id: `${answer.type}-${data.id}-${question.id}-${answer.id}`,\n                        type: answer.type,\n                        value: answer.value,\n                        required: !!question.required\n                    };\n                \n                Object.keys(fieldProps).forEach(name => {\n                    externalField[name] = fieldProps[name];\n                });\n\n                const answerCont = externalField.closest('[data-answer]');\n                answerCont.querySelector('label').setAttribute('for', fieldProps.id);\n                answerCont.querySelector('[data-label]').innerHTML = answer.label;\n                externalCont.querySelector('[data-question]').innerHTML = question.question;\n            });\n\n        });\n    }\n\n}\n","\nimport { isPlainObject, replaceObjectKeysInString, sortList } from '../helpers';\nimport { generateAnswers } from './generateQAcodeUtils/generateAnswers';\n\nexport const generateQAcode = ( questions, surveyId, options ) => {\n\n    return sortList( questions ).reduce((accCode, questionObj, index) => {\n        if( questionObj.external ){ return accCode; }\n\n        let questionHTML = options.templates.wrapper.question;\n        const questionId = questionObj.id;\n        const questionNumber = index + 1;\n        const extraData = {\n            surveyId,\n            question: {\n                id: questionId,\n                index,\n                isRequired: !!questionObj.required\n            }\n        };\n\n        if( questionObj.checks ){\n            extraData.question.checks = questionObj.checks;\n        }\n        \n        const answersHTML = generateAnswers( questionObj.answers, extraData, options );\n\n        const maxChoice = questionObj.checks ? JSON.parse(questionObj.checks) : '';\n        const checksMin = maxChoice[0] || '';\n        const checksMax = maxChoice[1] || '';\n        const maxChoiceText = maxChoice && options.messages.maxChoice ? ' ('+ checksMax +' '+ options.messages.maxChoice +')' : '';\n\n        const questionData = {\n            questionId,\n            questionNumber,\n            questionText: questionObj.question + maxChoiceText,\n            answersHTML\n        };\n        questionHTML = replaceObjectKeysInString(questionData, questionHTML);\n\n        if( options.showErrorMessage ){\n            let errorMessage = maxChoice !== '' ? options.messages.errorMultiChoice : (questionObj.errorMessage || options.messages.error);\n\n            // CASE OF MULTIPLE ERROR MESSAGES FROM JSON DATA => DYNAMICALLY MANAGED VIA EVENT LISTENER IN CONSTRUCTOR\n            if( isPlainObject(errorMessage) ){\n                errorMessage = '';\n            }\n\n            questionHTML = questionHTML.replace( /{{errorTemplates}}/g, errorMessage );\n        }\n\n        return accCode += replaceObjectKeysInString({checksMin, checksMax}, questionHTML);\n    }, '');\n\n}\n","\nimport { version }      from './modules/version';\nimport { ajaxCall, checkFormEl, customEvents, deepFreeze, dispatchCustomEvent, isNodeList, mergeObjects } from './modules/helpers';\nimport { options }      from './modules-lite/options';\nimport { buildSurvey }  from './modules/buildSurvey/buildSurvey';\n\nclass Survey {\n\n    constructor( formEl, optionsObj = {} ){\n        const argsL = arguments.length,\n              checkFormElem = checkFormEl(formEl);\n\n        if( argsL === 0 || (argsL > 0 && !formEl) ){\n            throw new Error('First argument \"formEl\" is missing or falsy!');\n        }\n        if( isNodeList(formEl) ){\n            throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n        }\n        if( !checkFormElem.result ){\n            throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n        }\n        if( !optionsObj.url || typeof optionsObj.url !== 'string' ){\n            throw new Error('\"options.url\" is missing or not a string!');\n        }\n\n        const self = this;\n        self.formEl = checkFormElem.element;\n        self.options = mergeObjects( {}, Survey.prototype.options, optionsObj );\n        formEl = self.formEl;\n        optionsObj = self.options;\n\n        formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforebegin', optionsObj.templates.loading );\n\n        // CREATE SURVEY\n        const retrieveSurvey = ajaxCall(optionsObj.url, optionsObj.initAjaxOptions)\n            .then(response => {\n                if( response.status.toLowerCase() !== 'success' ){\n                    return Promise.reject(response);\n                }\n                if( response.data.questions && response.data.questions.length > 0 ){\n                    buildSurvey(response.data, formEl, optionsObj);\n                    Object.defineProperty(self, 'data', {\n                        value: deepFreeze(response.data)\n                    });\n                    self.isInitialized = true;\n                    formEl.closest('[data-surveyjs-wrapper]').classList.add('surveyjs-init-success');\n                }\n                return response;\n            })\n            .finally(() => {\n                const loadingBoxEl = formEl.querySelector('[data-surveyjs-loading]');\n                if( loadingBoxEl ){\n                    loadingBoxEl.parentNode.removeChild(loadingBoxEl);\n                }\n            });\n        \n        dispatchCustomEvent( formEl, customEvents.init, retrieveSurvey );\n    }\n\n    static setOptions( optionsObj ){\n        Survey.prototype.options = mergeObjects({}, Survey.prototype.options, optionsObj);\n    }\n\n}\n\nSurvey.prototype.isInitialized = false;\nSurvey.prototype.options = options;\nSurvey.prototype.version = version;\n\nexport default Survey;\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n\n    const isString = typeof formEl,\n          isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n          isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n          obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n    \n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nexport const ajaxCall = ( url = location.href, options = {} ) => {\n\n    let timeoutTimer;\n\n    options.headers = new Headers( options.headers );\n\n    /* SET AbortController FOR timeout */\n    if ( options.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        options.signal = signal;\n\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, options.timeout);\n    }\n\n    return fetch( url, options )\n        .then(response => {\n            if( !response.ok ){\n                throw new Error(response.statusText);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            throw new Error(error.message);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n        });\n        \n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const options = {\n    cssClasses: {\n        checkbox:           'form-check-input',\n        field:              'form-control',\n        file:               'form-control-file',\n        label:              'form-check-label',\n        radio:              'form-check-input',\n        wrapper: {\n            checkbox:       'form-check',\n            field:          '',\n            radio:          'form-check'\n        }\n    },\n    initAjaxOptions: {\n        cache:              'no-store',\n        credentials:        'same-origin',\n        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept':       'application/json'\n        },\n        method:             'GET',\n        mode:               'same-origin',\n        redirect:           'follow',\n        timeout:            0\n    },\n    messages:{\n        maxChoice:          'answers max',\n        error:              'Answer is necessary.',\n        errorMultiChoice:   'You must choose from {{checksMin}} to {{checksMax}} answers.'\n    },\n    showErrorMessage:       true,\n    templates: {\n        error:              '<div class=\"surveyjs-error-message\">{{errorMessage}}</div>',\n        \n        input:              '<input {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-input surveyjs-{{answerType}} {{fieldClasses}}\" />',\n\n        label:              '<label for=\"{{answerCode}}\" class=\"surveyjs-label {{labelClasses}}\">{{labelString}}</label>',\n\n        loading:            '<div class=\"surveyjs-loading\" data-surveyjs-loading>Loading...</div>',\n        \n        select:             '<select {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-select {{fieldClasses}}\">'+\n                                '{{optionsHtml}}'+\n                            '</select>',\n        \n        textarea:           '<textarea {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}\" class=\"surveyjs-textarea {{fieldClasses}}\"></textarea>',\n\n        wrapper: {\n            field:          '<div class=\"surveyjs-field-wrapper surveyjs-{{answerType}}-wrapper {{wrapperClasses}}\">'+\n                                '{{fieldTemplate}}'+\n                                '{{labelTemplate}}'+\n                            '</div>',\n            \n            nested:         '<div class=\"surveyjs-field-wrapper surveyjs-nested-wrapper\">'+\n                                '{{labelTemplate}}'+\n                                '<div class=\"surveyjs-nested-inner\">'+\n                                    '{{nestedFieldsHTML}}'+\n                                '</div>'+\n                            '</div>',\n\n            question:       '<div class=\"surveyjs-question-wrapper\" data-question-id=\"{{questionId}}\">'+\n                                '<div class=\"surveyjs-question-text\">{{questionText}}</div>'+\n                                '<div class=\"surveyjs-answers-wrapper\">'+\n                                    '{{answersHTML}}'+\n                                '</div>'+\n                                '<div class=\"surveyjs-errors-wrapper\" data-surveyjs-errors>{{errorTemplates}}</div>'+\n                            '</div>',\n            \n            related:        '<div class=\"surveyjs-field-wrapper surveyjs-related-wrapper input-group\">'+\n                                '<div class=\"input-group-prepend\">'+\n                                    '<div class=\"surveyjs-radio-wrapper input-group-text form-check\">'+\n                                        '{{fieldTemplate}}'+\n                                        '{{labelTemplate}}'+\n                                    '</div>'+\n                                '</div>'+\n                                '{{relatedFieldHTML}}'+\n                            '</div>'\n        }\n    }\n}\n"],"names":["isDOMNode","node","Element","prototype","isPrototypeOf","customEvents","deepFreeze","obj","Object","getOwnPropertyNames","forEach","name","prop","freeze","isPlainObject","object","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","replaceObjectKeysInString","stringHTML","reduce","accString","regexStr","RegExp","replace","sortList","list","sort","a","b","generateOptionTags","optionsList","optionsHTML","opt","value","label","getAttributesStringHTML","answerObj","answerCode","isRequired","excludedAttrs","test","type","string","indexOf","data","useAllCaps","newString","trim","match","p1","p2","p3","p4","p5","p6","toLowerCase","toUpperCase","toKebabCase","related","generateAnswers","answersList","extraData","options","allAnswersHTML","previousType","answer","index","answerHTML","answerType","question","checks","surveyId","id","answerData","questionNumber","wrapperClasses","cssClasses","wrapper","field","fieldAttributes","fieldClasses","addMoreName","labelString","labelClasses","relatedFieldHTML","relatedType","relatedIsSelect","relatedObj","requiredFrom","answerDataRelated","select","templates","input","optionsHtml","getTemplates","nested","nestedFieldsHTML","buildSurvey","formEl","qaHtmlAll","questions","accCode","questionObj","external","questionHTML","questionId","required","answersHTML","answers","maxChoice","JSON","parse","checksMin","checksMax","maxChoiceText","messages","questionData","questionText","showErrorMessage","errorMessage","errorMultiChoice","error","generateQAcode","querySelector","insertAdjacentHTML","extQuestions","length","surveyWrapperEl","closest","qIndex","externalCont","setAttribute","aIndex","externalField","querySelectorAll","fieldProps","answerCont","innerHTML","Survey","[object Object]","optionsObj","argsL","checkFormElem","isString","isFormSelector","document","tagName","result","element","checkFormEl","Error","nodeList","NodeList","url","self","this","loading","retrieveSurvey","location","href","timeoutTimer","headers","Headers","timeout","controller","AbortController","signal","window","setTimeout","abort","fetch","then","response","ok","statusText","json","catch","message","finally","clearTimeout","ajaxCall","initAjaxOptions","status","Promise","reject","defineProperty","isInitialized","classList","add","loadingBoxEl","parentNode","removeChild","elem","eventName","eventOptions","bubbles","eventObj","Event","dispatchEvent","dispatchCustomEvent","checkbox","file","radio","cache","credentials","Content-Type","Accept","method","mode","redirect","textarea","version"],"mappings":"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"}