{"version":3,"sources":["webpack://Survey/webpack/universalModuleDefinition","webpack://Survey/webpack/bootstrap","webpack://Survey/external \"Form\"","webpack://Survey/./src/modules/helpers/ajaxCall.js","webpack://Survey/./src/modules/helpers/appendDomStringToNode.js","webpack://Survey/./src/modules/helpers/isDOMNode.js","webpack://Survey/./src/modules/helpers/checkFormEl.js","webpack://Survey/./src/modules/helpers/deepFreeze.js","webpack://Survey/./src/modules/helpers/fieldsStringSelectorSurvey.js","webpack://Survey/./src/modules/helpers/isPlainObject.js","webpack://Survey/./src/modules/helpers/isEmptyObject.js","webpack://Survey/./src/modules/helpers/isFieldForChangeEvent.js","webpack://Survey/./src/modules/helpers/isNodeList.js","webpack://Survey/./src/modules/helpers/mergeObjects.js","webpack://Survey/./src/modules/messages.js","webpack://Survey/./src/modules/utils/getQuestionObject.js","webpack://Survey/./src/modules/optionsUtils.js","webpack://Survey/./src/modules/options.js","webpack://Survey/./src/modules/internals.js","webpack://Survey/./src/modules/webStorage.js","webpack://Survey/./src/modules/constructor.js","webpack://Survey/./src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/generateOptionTags.js","webpack://Survey/./src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/attribute.js","webpack://Survey/./src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/input.js","webpack://Survey/./src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/nested.js","webpack://Survey/./src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/select.js","webpack://Survey/./src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/textarea.js","webpack://Survey/./src/modules/buildSurvey/generateQAcodeUtils/generateFieldHTML.js","webpack://Survey/./src/modules/buildSurvey/generateQAcodeUtils/replaceTemplateStrings.js","webpack://Survey/./src/modules/buildSurvey/generateQAcodeUtils/iterateAnswers.js","webpack://Survey/./src/modules/buildSurvey/generateQAcode.js","webpack://Survey/./src/modules/buildSurvey/populateAnswers.js","webpack://Survey/./src/modules/utils/getAnswerIndexInLocalStorage.js","webpack://Survey/./src/modules/listenerCallbacks.js","webpack://Survey/./src/modules/buildSurvey/buildSurvey.js","webpack://Survey/./src/modules/retrieveSurvey.js","webpack://Survey/./src/modules/destroy.js","webpack://Survey/./src/index.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ajaxCall","timeoutTimer","url","location","href","options","headers","Headers","timeout","controller","AbortController","signal","window","setTimeout","abort","fetch","then","response","ok","json","Promise","reject","error","clearTimeout","appendDomStringToNode","HTMLstring","parentNode","tmpEl","document","createElement","innerHTML","Array","from","childNodes","forEach","elem","appendChild","isDOMNode","node","Element","isPrototypeOf","checkFormEl","formEl","isString","isFormSelector","querySelector","tagName","toLowerCase","result","element","deepFreeze","obj","getOwnPropertyNames","prop","freeze","fieldsStringSelectorSurvey","isPlainObject","toString","isEmptyObject","length","isFieldForChangeEvent","fieldEl","matches","isNodeList","nodeList","NodeList","mergeObjects","out","arguments","obj_isArray","isArray","obj_isObject","concat","slice","push","messages","it","loadingBox","selectFirstOption","textareaPlaceholder","maxChoiceText","fieldErrorMessage","fieldErrorMessageMultiChoice","en","getQuestionObject","data","questionId","questions","qLength","q","question","id","defaultCallbacksInOptions","formOptions","beforeSend","surveyjs","surveyContEl","closest","fieldsList","querySelectorAll","fieldNameCheck","fieldTypeCheck","type","questionIdEl","getAttribute","questionObj","required","isRequiredFrom","reqMoreEl","checked","fieldOptions","focusOnRelated","resolve","formjs","validateForm","formRes","stopExecution","getFormData","survey","answers","fieldValue","qaObj","answer","id_answer","text","attributes","trim","el","cssClasses","checkbox","default","file","label","radio","select","textarea","fieldErrorFeedback","initAjaxOptions","cache","credentials","method","redirect","lang","templates","fieldError","input","inputGroup","inputTag","labelTag","selectTag","useLocalStorage","internals","localStorageArray","localStorageName","webStorage","isAvailable","mod","localStorage","setItem","removeItem","e","checkLocalStorage","Storage","setObject","JSON","stringify","getObject","getItem","parse","constructorFn","self","optionsObj","argsL","checkFormElem","Error","customLang","langValue","constructor","indexOf","replace","generateOptionTags","optionsList","optionsHtml","opt","attribute","objData","aHtml","attr","attributeIsArray","relatedAnswerField","fieldClass","beforeCode","afterCode","answerType","nestedAnswer","nested","labelForNested","answerCode","answerPlaceholder","placeholder","generateFieldHTML","replaceTemplateStrings","fieldData","relatedAnswerKeys","answerIdValue","attrRequired","addMoreName","attrRequiredFrom","reKey","regexStrRe","RegExp","regexStr","progIds","iterateAnswers","qID","qIdx","attrReq","list","listL","aLoopHtml","needsBinding","sort","a","b","aNum","qNum","aType","aId","progIdsLength","progIdsJoined","join","labelTagCode","answerId","answerIndex","answerName","answerMaxlength","maxlength","answerString","getSettingsFieldClass","questionNumber","attrChecks","checks","attrSubtype","subtype","validateIfFilled","boundedFieldEl","fieldProps","setAttribute","textContent","surveyFieldType","pop","generateQAcode","questionsList","qaData","qaDataLength","qaCodeAll","item","maxChoice","checksMin","checksMax","qaHtml","bindAnswerEl","message","populateAnswers","LS","fieldFirst","field","isRadioOrCheckbox","getAnswerIndexInLocalStorage","fieldName","multiChoiceValue","lsSurvey","lsSurveyLength","ls","lsItem","callbackFns","validation","event","eventName","target","containerEl","isMultiChoice","isRequireMore","itemEl","split","isFieldForChangeEventBoolean","inArrayPos","inArrayRequireMorePos","splice","oldFieldNamePos","elReqFromEl","buildSurvey","formName","checkData","title","description","qaHtmlAll","console","warn","validateOnEvents","Form","useCapturing","addEventListener","formJSoptions","formInstance","init","classList","add","retrieveSurvey","insertAdjacentHTML","status","loadingBoxEl","removeChild","destroy","removeEventListener","version","Survey","isInitialized","langString","langObject"],"mappings":"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","file":"surveyjs.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"Form\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"Form\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Survey\"] = factory(require(\"Form\"));\n\telse\n\t\troot[\"Survey\"] = factory(root[\"Form\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","\nexport const ajaxCall = ( url = location.href, options = {} ) => {\n\n    let timeoutTimer;\n\n    options.headers = new Headers( options.headers );\n\n    /* SET AbortController FOR timeout */\n    if ( options.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        options.signal = signal;\n\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, options.timeout);\n    }\n\n    return fetch( url, options )\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n        });\n        \n}\n","\nexport const appendDomStringToNode = ( HTMLstring, parentNode ) => {\n\n    const tmpEl = document.createElement('div');\n    tmpEl.innerHTML = HTMLstring;\n    Array.from( tmpEl.childNodes ).forEach((elem) => {\n        parentNode.appendChild( elem );\n    });\n\n}\n","\nexport const isDOMNode = node => {\n    return Element.prototype.isPrototypeOf( node );\n}\n","\nimport { isDOMNode } from './isDOMNode';\n\nexport const checkFormEl = formEl => {\n\n    const isString = typeof formEl,\n          isValidNodeSelector = isString === 'string' && isDOMNode(document.querySelector(formEl)),\n          isFormSelector = isValidNodeSelector && document.querySelector(formEl).tagName.toLowerCase() === 'form',\n          obj = {\n            result: isDOMNode(formEl) || isFormSelector,\n            element: (isString === 'string' ? document.querySelector(formEl) : formEl)\n        };\n\n    return obj;\n    \n}\n","\nexport const deepFreeze = obj => {\n\n    Object.getOwnPropertyNames(obj).forEach(name => {\n        const prop = obj[name];\n        if( typeof prop === 'object' && prop !== null ){\n            deepFreeze(prop);\n        }\n    });\n    return Object.freeze(obj);\n    \n}\n","\nexport const fieldsStringSelectorSurvey = '[data-surveyjs-form] input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]), [data-surveyjs-form] select, [data-surveyjs-form] textarea, [data-name=\"bind-surveyjs-answer\"]'\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const isEmptyObject = object => {\n    return isPlainObject(object) && Object.getOwnPropertyNames(object).length === 0;\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nexport const isNodeList = nodeList => {\n    return NodeList.prototype.isPrototypeOf( nodeList );\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        const obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            const obj_isArray = Array.isArray(obj[key]);\n            const obj_isObject = isPlainObject(obj[key]);\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( obj_isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( obj_isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nexport const messages = {\n    it: {\n        loadingBox:         '<div class=\"surveyjs-loading\" data-surveyjs-loading><i class=\"glyphicon glyphicon-refresh icon-spin\"></i> Caricamento in corso...</div>',\n        selectFirstOption:  'Seleziona una risposta...',\n        textareaPlaceholder:'Scrivi la tua risposta...',\n        maxChoiceText:      'RISPOSTE MAX',\n        fieldErrorMessage:  '&Egrave; necessario rispondere.',\n        fieldErrorMessageMultiChoice:  'Puoi scegliere da {{checksMin}} a {{checksMax}} risposte.'\n    },\n    en: {\n        loadingBox:         '<div class=\"surveyjs-loading\" data-surveyjs-loading><i class=\"glyphicon glyphicon-refresh icon-spin\"></i> Loading...</div>',\n        selectFirstOption:  'Select your answer...',\n        textareaPlaceholder:'Write here your answer...',\n        maxChoiceText:      'ANSWERS MAX',\n        fieldErrorMessage:  'Answer is necessary.',\n        fieldErrorMessageMultiChoice:  'You can choose from {{checksMin}} to {{checksMax}} answers.'\n    }\n}\n","\nexport const getQuestionObject = ( data, questionId ) => {\n\n    const questions = data.questions,\n          qLength = questions.length;\n\n    let obj = {};\n    \n    for(let q=0; q<qLength; q++){\n        const question = questions[q];\n        if( question.id == questionId ){\n            obj = question;\n            break;\n        }\n    }\n\n    return obj;\n\n}","\nimport { fieldsStringSelectorSurvey, isEmptyObject, mergeObjects } from './helpers';\nimport { getQuestionObject } from './utils/getQuestionObject';\n\nexport const defaultCallbacksInOptions = {\n    formOptions: {\n\n        beforeSend: function beforeSend_surveyDefault( data ){\n            const surveyjs = this.formEl.surveyjs;\n            const surveyContEl = this.formEl.closest('[data-surveyjs-container]');\n            const fieldsList = Array.from( surveyContEl.querySelectorAll(fieldsStringSelectorSurvey) );\n\n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                \n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                const questionIdEl = fieldEl.closest('[data-question-id]');\n                const questionId = questionIdEl ? questionIdEl.getAttribute('data-question-id') : '';\n                const questionObj = getQuestionObject( surveyjs.data, questionId );\n\n                // BASED ON SURVEY JSON FILE, FORCE REQUIRED FIELDS TO BE VALIDATED\n                // THIS AVOIDS USERS TO HACK THE SURVEY, FOR EXAMPLE REMOVING required ATTRIBUTE FROM THE HTML\n                if( questionId !== '' && questionObj && typeof questionObj.required !== 'undefined' ){\n\n                    const isRequiredFrom = fieldEl.matches('[data-required-from]');\n                    const reqMoreEl = document.querySelector(fieldEl.getAttribute('data-required-from'));\n                    if( !isRequiredFrom || ( isRequiredFrom && reqMoreEl.checked ) ){\n                        fieldEl.required = true;\n                    }\n                    \n                }\n\n            });\n\n            const fieldOptions = mergeObjects({}, surveyjs.options.fieldOptions, {focusOnRelated: false});\n            return new Promise(resolve => {\n                this.formEl.formjs.validateForm( fieldOptions ).then(formRes => {\n                    if( !formRes.result ){\n                        data.stopExecution = true;\n                    }\n                    resolve( data );\n                });\n            });\n        },\n\n        getFormData: function getFormData_surveyDefault(){\n            const formEl = this.formEl;\n            const survey = formEl.surveyjs;\n            const fieldsList = Array.from( formEl.closest('[data-surveyjs-container]').querySelectorAll(fieldsStringSelectorSurvey) );\n            const obj = {\n                    answers: [],\n                    id: survey.data.id\n                };\n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                // EACH QUESTION HAS ITS OWN OBJECT ( qaObj ) THAT CONTAINS THE RELATED DATA:\n                // question:    THE QUESTION ID ( undefined FOR QUESTIONS WITH ATTRIBUTE data-required-form - will be skipped later )\n                // answer       AN OBJECT THAT CONTAINS THE FOLLOWS:\n                //                  id_answer:      THE ANSWER ID\n                //                  text:           IF THE FIELD IS A TEXTAREA\n                //                  attributes:     IF THE ANSWER IS NESTED OR IS REQUIRED FROM ANOTHER ANSWER (SEE BELOW)\n                const questionIdEl = fieldEl.closest('[data-question-id]'),\n                      questionId = questionIdEl ? questionIdEl.getAttribute('data-question-id') : '',\n                      fieldValue = fieldEl.value,\n                      qaObj = {\n                        question: questionId,\n                        answer: {\n                            id_answer: [ fieldValue ]\n                        }\n                    };\n\n                // A FIELD WITH ATTRIBUTE 'data-required-from' IS MANAGED TOGETHER WITH ITS RELATED FIELD ( WHICH HAS ATTRIBUTE 'data-require-more' )\n                // IF QUESTION ID IS EMPTY -> SKIP THE FIELD ( USEFUL FOR FORM FIELDS OUTSIDE THE SURVEY BODY )\n                if( fieldEl.matches('[data-required-from]') || questionId === '' || isEmptyObject(getQuestionObject( survey.data, questionId )) ){ return; }\n                                    \n                if( fieldEl.matches('textarea') ){\n                    qaObj.answer.id_answer = [ '' ];\n                    qaObj.answer.text = fieldValue;\n                }\n\n                if( type === 'radio' ){\n                    const containerEl = (fieldEl.closest('form') ? formEl : fieldEl.closest('[data-formjs-question]') ),\n                          elem = containerEl.querySelector('[name=\"'+ name +'\"]:checked');\n                    \n                    if( elem ){\n                        // FOR RADIO THAT REQUIRE THE USER TO GIVE ONE MORE ANSWER\n                        if( elem.matches('[data-require-more]') ){\n                            qaObj.answer.attributes = formEl.querySelector('[data-required-from=\"#'+ elem.id +'\"]').value.trim();\n                        }\n                        \n                        if( elem.matches('[data-nested-index]') ){\n                            qaObj.answer.attributes = elem.getAttribute('data-nested-index');\n                        }\n                        \n                        qaObj.answer.id_answer = [ elem.value.trim() ];\n                    } else {\n                        qaObj.answer.id_answer = [ '' ];\n                    }\n                }\n\n                if( type === 'checkbox' && fieldEl.matches('[data-checks]') ){\n                    qaObj.answer.id_answer = [];\n                    Array.from(formEl.querySelectorAll('[name=\"'+ name +'\"]:checked')).forEach(el => {\n                        qaObj.answer.id_answer.push( el.value.trim() );\n                    });\n                }\n                \n                obj.answers.push( qaObj );\n            });\n        \n            return obj;\n        }\n    \n    }\n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n    cssClasses: {\n        checkbox:           'form-check-input',\n        default:            'form-control',\n        file:               'form-control-file',\n        label:              'form-check-label',\n        radio:              'form-check-input',\n        select:             'form-control',\n        textarea:           'form-control'\n    },\n    fieldErrorFeedback:     true,\n    formOptions: {\n        beforeSend:         [defaultCallbacksInOptions.formOptions.beforeSend],\n        getFormData:        defaultCallbacksInOptions.formOptions.getFormData\n    },\n    initAjaxOptions:        {\n        cache:              'no-store',\n        credentials:        'same-origin',\n        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept':       'application/json'\n        },\n        method:             'GET',\n        mode:               'same-origin',\n        redirect:           'follow',\n        timeout:            0\n    },\n    lang:                   'en',\n    templates: {\n        fieldError: '<div class=\"surveyjs-field-error-message\">{{fieldErrorMessage}}</div>',\n\n        input:      '<div class=\"surveyjs-single-answer surveyjs-input-container surveyjs-answer-{{answerType}} form-check\" data-answer-index=\"{{answerIndex}}\">'+\n                        '{{inputTagCode}}'+\n                        '{{labelTagCode}}'+\n                    '</div>',\n\n        inputGroup: '<div class=\"surveyjs-single-answer input-group\" data-answer-index=\"{{answerIndex}}\">'+\n                        '<div class=\"input-group-prepend\">'+\n                            '<div class=\"input-group-text form-check surveyjs-answer-{{answerType}}\">'+\n                                '<input type=\"{{answerType}}\" name=\"surveyjs-answer-{{questionNumber}}\" id=\"{{answerCode}}\" data-answer-id=\"{{answerId}}\" value=\"{{answerIdValue}}\" {{attrRequired}} data-require-more=\"\" class=\"surveyjs-input surveyjs-radio form-check-input\" />'+\n                                '<label for=\"{{answerCode}}\" class=\"surveyjs-label form-check-label\">{{answerString}}</label>'+\n                            '</div>'+\n                        '</div>'+\n                        '{{relatedAnswerField}}'+\n                    '</div>',\n        \n        inputTag:   '<input type=\"{{answerType}}\" {{attrSubtype}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-input surveyjs-{{answerType}} {{fieldClass}}\" id=\"{{answerCode}}\" {{nestedAnswer}} data-answer-root=\"{{progIdsJoined}}\" data-answer-id=\"{{answerId}}\" value=\"{{answerIdValue}}\" {{attrRequired}} {{validateIfFilled}} {{attrChecks}} {{attrRequiredFrom}} />',\n\n        labelTag:   '<label for=\"{{answerCode}}\" class=\"surveyjs-label {{labelClass}}\">{{answerString}}</label>',\n\n        question:   '<div data-question-id=\"{{questionId}}\" data-question-index=\"{{questionNumber}}\" data-formjs-question class=\"surveyjs-question-box clearfix\">'+\n                        '<div class=\"surveyjs-question-header\">Question {{questionNumber}}</div>'+\n                        '<div class=\"surveyjs-question-body\">'+\n                            '<div class=\"surveyjs-question-text\">{{questionText}}</div>'+\n                            '<div class=\"surveyjs-answers-box form-group clearfix\">'+\n                                '{{answersHtml}}'+\n                                '{{fieldErrorTemplate}}'+\n                            '</div>'+\n                        '</div>'+\n                    '</div>',\n\n        select:     '<div class=\"surveyjs-single-answer surveyjs-answer-select\" data-answer-index=\"{{answerIndex}}\">'+\n                        '{{selectTagCode}}'+\n                    '</div>',\n\n        selectTag:  '<select id=\"{{answerCode}}\" name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-select {{fieldClass}}\" {{attrRequired}} {{nestedAnswer}} data-answer-root=\"{{progIdsJoined}}\" {{attrRequiredFrom}}>'+\n                        '{{optionsHtml}}'+\n                    '</select>',\n\n        textarea:   '<div class=\"surveyjs-single-answer surveyjs-answer-textarea\">'+\n                        '<textarea id=\"{{answerCode}}\" data-answer-id=\"{{answerId}}\" {{nestedAnswer}} name=\"surveyjs-answer-{{questionNumber}}\" {{attrRequired}} class=\"surveyjs-textarea {{fieldClass}}\" {{answerMaxlength}} rows=\"6\" placeholder=\"{{answerPlaceholder}}\"></textarea>'+\n                    '</div>'\n    },\n    useLocalStorage:        true\n}\n","\nexport const internals = {\n    localStorageArray: [],\n    localStorageName: 'Survey_' + location.href + '_{{surveyFormName}}_surveyId[{{surveyId}}]'\n}\n","\nexport const webStorage = () => {\n\n        const checkLocalStorage = () => {\n            const mod = 'check_storage';\n            try {\n                localStorage.setItem(mod, mod);\n                localStorage.removeItem(mod);\n                return true;\n            } catch(e) {\n                return false;\n            }\n        };\n\n        const isAvailable = checkLocalStorage();\n\n        if( isAvailable ){\n            // setObject METHOD FOR HTML STORAGE -> EG: localStorage.setObject( name, JSobj )\n            // TO STORE A JS OBJECT ( AS JSON STRING ) INSIDE THE STORAGE\n            Storage.prototype.setObject = function( key, value ) {\n                this.setItem( key, JSON.stringify(value) );\n            }\n\n            // getObject METHOD FOR HTML STORAGE -> EG: localStorage.getObject( name )\n            // RETURN THE DATA ( STORED AS JSON STRING ) AS JS OBJECT\n            Storage.prototype.getObject = function( key ) {\n                const value = this.getItem( key );\n                return value && JSON.parse( value );\n            }\n        }\n\n        return {\n            isAvailable: isAvailable\n        }\n\n}\n","\nimport { checkFormEl, isNodeList, mergeObjects } from './helpers';\nimport { internals } from './internals';\nimport { webStorage } from './webStorage';\n\nexport function constructorFn( self, formEl, optionsObj = {} ){\n\n    const argsL = arguments.length,\n          checkFormElem = checkFormEl(formEl);\n\n    if( argsL === 0 || (argsL > 0 && !formEl) ){\n        throw new Error('First argument \"formEl\" is missing or falsy!');\n    }\n    if( isNodeList(formEl) ){\n        throw new Error('First argument \"formEl\" must be a single DOM node or a form CSS selector, not a NodeList!');\n    }\n    if( !checkFormElem.result ){\n        throw new Error('First argument \"formEl\" is not a DOM node nor a form CSS selector!');\n    }\n\n    if( !optionsObj.url || typeof optionsObj.url !== 'string' ){\n        throw new Error('\"options.url\" is missing or not valid!');\n    }\n\n    self.formEl = checkFormElem.element;\n    self.formEl.surveyjs = self;\n\n    // SET THE lang VALUE IN options ( MANDATORY FOR OTHER OPERATIONS )\n    const customLang = typeof optionsObj.lang === 'string' && optionsObj.lang.toLowerCase();\n    const langValue = customLang && self.constructor.prototype.messages[customLang] ? customLang : self.constructor.prototype.options.lang;\n    // MERGE messages OF THE CHOSEN lang INSIDE options\n    self.options = mergeObjects( {}, self.constructor.prototype.options, self.constructor.prototype.messages[langValue] );\n    // MERGE OPTIONS\n    self.options = mergeObjects( {}, self.options, optionsObj );\n\n    if( self.options.templates.input.indexOf('{{inputTagCode}}') !== -1 ){\n        self.options.templates.input = self.options.templates.input.replace( /{{inputTagCode}}/g, self.options.templates.inputTag );\n    }\n\n    self.options.templates.labelTag = self.options.templates.labelTag.replace(/{{labelClass}}/g, self.options.cssClasses.label);\n    self.internals = internals;\n\n    if( !webStorage().isAvailable ){\n        self.options.useLocalStorage = false;\n    }\n    \n}\n","\nexport const generateOptionTags = ( optionsList = [], options ) => {\n\n    let optionsHtml = optionsList[0].id === '' ? '' : '<option value=\"\">'+ options.selectFirstOption +'</option>';\n\n    optionsList.forEach(opt => {\n        optionsHtml += '<option value=\"'+ opt.id +'\" data-answer-id=\"'+ opt.id +'\">'+ opt.answer +'</option>';\n    });\n\n    return optionsHtml;\n\n}","\nimport { generateOptionTags } from './generateOptionTags';\n\n// RELATED ANSWER\n// IF AN ANSWER REQUIRE TO FILL OR SELECT ANOTHER RELATED ANSWER\nexport const attribute = ( options, data ) => {\n\n    const objData = data.objData,\n          aHtml = options.templates.inputGroup,\n          attr = data.answer.attribute,\n          attributeIsArray = Array.isArray(attr),\n          relatedAnswerField = attributeIsArray ? options.templates.selectTag : options.templates.inputTag;\n    \n    objData.fieldClass = options.cssClasses.default;\n    \n    if( attributeIsArray ){\n        // CREATE A GROUP WITH A RADIO INPUT AND ITS RELATED ANSWER (A SELECT FIELD)\n        objData.fieldClass = options.cssClasses.select;\n        objData.optionsHtml = generateOptionTags(attr, options);\n    }\n\n    return { aHtml, relatedAnswerField, objData };\n}\n","\nexport const input = ( options, data ) => {\n\n    const objData = data.objData,\n          aHtml = data.beforeCode + options.templates.input + data.afterCode;\n\n    if( objData.answerType !== 'checkbox' && objData.answerType !== 'radio' ){\n        // EVERY INPUT FIELD THAT IS NOT A CHECKBOX OR RADIO ( TEXT, EMAIL, NUMBER, PASSWORD, RANGE AND SO ON... )\n        objData.nestedAnswer += ' class=\"' + objData.fieldClass + '\"';\n    }\n    \n    return { aHtml, objData };\n}\n","\n// NESTED ANSWER -> IT IS A CHILD ANSWER OF ITS PARENT\n// EXAMPLE:\n// IF 'WEBSITE' IS THE PARENT ANSWER\n// IT CAN HAVE THESE CHILDREN ANSWERS: PC - SMARTPHONE - TABLET\n// SO THE PARENT ANSWER IS PRINTED AS TEXT ( WITHOUT THE INPUT FIELD ) AND ITS nested ANSWERS WILL BE LOOPED\nexport const nested = ( options, data ) => {\n\n    const objData = data.objData;\n\n    let labelForNested = options.templates.labelTag;\n    labelForNested = labelForNested.replace(/{{answerCode}}/g, objData.answerCode);\n    labelForNested = labelForNested.replace(/{{labelClass}}/g, options.cssClasses.label + ' surveyjs-field-indent-0');\n    labelForNested = labelForNested.replace(/{{answerString}}/g, data.answer.answer);\n\n    const aHtml = data.beforeCode + '<div class=\"surveyjs-'+ objData.answerType +'\">' + labelForNested + '</div>' + data.afterCode;\n\n    return { aHtml, objData };\n}\n","\nimport { generateOptionTags } from './generateOptionTags';\n\nexport const select = ( options, data ) => {\n\n    const objData = data.objData,\n          aHtml = data.beforeCode + options.templates.select + data.afterCode;\n    \n    objData.optionsHtml = generateOptionTags( data.obj.answers, options );\n\n    return { aHtml, objData };\n}\n","\nexport const textarea = ( options, data ) => {\n\n    const objData = data.objData,\n          aHtml = options.templates.textarea;\n\n    objData.answerPlaceholder = data.answer.placeholder || options.textareaPlaceholder;\n\n    return { aHtml, objData };\n}\n","\nimport { attribute }    from './fieldsHTML/attribute';\nimport { input }        from './fieldsHTML/input';\nimport { nested }       from './fieldsHTML/nested';\nimport { select }       from './fieldsHTML/select';\nimport { textarea }     from './fieldsHTML/textarea';\n\nexport const generateFieldHTML = {\n        attribute, input, nested, select, textarea\n}\n","\nexport const replaceTemplateStrings = ( options, fieldData, objData ) => {\n\n    if( objData.optionsHtml !== '' ){\n        fieldData.aHtml = fieldData.aHtml.replace( /{{selectTagCode}}/g, options.templates.selectTag );\n    }\n\n    if( fieldData.relatedAnswerField ){\n        const relatedAnswerKeys = {\n              answerCode: '', answerType: 'text', fieldClass: objData.fieldClass,\n              answerIdValue: '', attrRequired: '', addMoreName: '-more',\n              attrRequiredFrom: 'data-required-from=\"#'+ objData.answerCode +'\"'\n            };\n            \n        for(let reKey in relatedAnswerKeys){\n            const regexStrRe = new RegExp( '{{' + reKey + '}}', 'g' );\n            fieldData.relatedAnswerField = fieldData.relatedAnswerField.replace( regexStrRe, relatedAnswerKeys[reKey] );    \n        }\n        \n        fieldData.aHtml = fieldData.aHtml.replace( /{{relatedAnswerField}}/g, fieldData.relatedAnswerField );\n    } else {\n        fieldData.aHtml = fieldData.aHtml.replace( /{{addMoreName}}/g, '' );\n        fieldData.aHtml = fieldData.aHtml.replace( /{{attrRequiredFrom}}/g, '' );\n    }\n    \n    for( let key in objData ){\n        const regexStr = new RegExp( '{{' + key + '}}', 'g' );\n        fieldData.aHtml = fieldData.aHtml.replace( regexStr, objData[key] );\n    }\n\n    return fieldData.aHtml;\n\n}","\nimport { generateFieldHTML } from './generateFieldHTML';\nimport { replaceTemplateStrings } from './replaceTemplateStrings';\n\nlet progIds = [];\n\nexport const iterateAnswers = ( formEl, options, obj, qID, qIdx, attrReq ) => {\n\n    // obj          MUST BE AN ARRAY OF STRINGS OR AN OBJECT THAT CONTAINS 'answers' AS ARRAY (THE FUNCTION iterateAnswers LOOPS UNTIL A STRING IS FOUND, AND PRINTS IT)\n    // qIdx         INDEX OF THE QUESTION\n    // attrReq      HTML REQUIRED ATTRIBUTE THAT WILL BE PRINTED (THIS PARAMETER MUST NOT BE PASSED INITIALLY. IT IS AUTOMATICALLY PASSED INSIDE THE LOOP IF NECESSARY)\n    // aLoopHtml    THE CODE OF ALL ANSWERS ( PRINTED ONLY AT THE END )\n\n    qID = obj.id ? obj.id : (qID || 0);\n\n    let list = Array.isArray(obj) ? obj : obj.answers,\n        listL = list.length,\n        i = qIdx || 0,\n        aLoopHtml = '';\n    \n    const needsBinding = obj.question === 'hidden-privacy' ? true : false;\n\n    if( list[0]['sort'] ){\n        list.sort((a, b) => {\n            return a['sort'] > b['sort'];\n        });\n    }\n\n    for(let a=0; a<listL; a++){\n\n        let answer = list[a],\n            aNum = a + 1,\n            qNum = i + 1,\n            aType = answer.type,\n            aId = answer.id,\n            progIdsLength = progIds.length,\n            progIdsJoined = progIdsLength > 0 ? progIds.join('-') : '',\n            getSettingsFieldClass = () => {\n                let aType = answer.type === 'option' ? 'select' : answer.type;\n                return options.cssClasses[aType] || options.cssClasses.default;\n            };\n\n        let fieldData = { aHtml: '' };\n        \n        // ALL THESE OBJECT KEYS WILL REPLACE {{key}} WITH objData.KEY IN HTML STRING\n        let objData = {\n            // answerId         ANSWER ID AS FROM THE JSON. THIS IS USED AS VALUE ATTRIBUTE OF THE ANSWER\n            // answerType       ANSWER TYPE AS FROM THE JSON. USED TO CHECK WHICH FIELD MUST BE CREATED ( EG: text, radio, checkbox, select, textarea )\n            // nestedAnswer     CREATES THE data-nested-index ATTRIBUTE TO PRINT IF AN ANSWER IS NESTED ( SEE BELOW FOR NESTED ANSWERS )\n            // answerCode       ID ATTRIBUTE OF THE ANSWER\n            //                  ( BUILT AS: \"answerType-questionID-answerID-questionNumber[-nestingLevels]-answerNumber\" )\n            //                  ONLY AN ATTRIBUTE-ANSWER DOES NOT USE THE answerCode\n                labelTagCode: aType === 'checkbox' || aType === 'radio' ? options.templates.labelTag : '',\n                answerId: aId,\n                answerIdValue: aType === 'text' ? '' : aId,\n                answerIndex: aNum,\n                answerName: 'surveyjs-answer-'+qNum,\n                answerPlaceholder: '',\n                answerMaxlength: answer.maxlength ? 'maxlength=\"' + answer.maxlength + '\"' : '',\n                answerString: typeof answer.answer === 'string' ? answer.answer : '',\n                answerType: aType,\n                attrRequired: typeof obj.required !== 'undefined' ? 'required' : (typeof attrReq !== 'undefined' ? attrReq : ''),\n                fieldClass: getSettingsFieldClass(),\n                nestedAnswer: progIdsJoined !== '' ? 'data-nested-index=\"'+ aNum +'\"' : '' ,\n                optionsHtml: '',\n                progIdsJoined: progIdsJoined,\n                questionNumber: qNum,\n                answerCode: (aType === 'option' ? 'select' : aType) +'-' + qID +'-'+ (aId || 0) + '-' + qNum + (progIdsJoined !== '' ? '-'+progIdsJoined : '') +'-'+ aNum,\n                attrChecks: obj.checks ? 'data-checks=\"' + obj.checks + '\"' : '',\n                attrSubtype: answer.subtype ? 'data-subtype=\"' + answer.subtype + '\"' : '',\n                validateIfFilled: typeof obj.validateIfFilled !== 'undefined' ? 'data-validate-if-filled' : ''\n            };\n        \n        if( needsBinding ){\n            \n            const boundedFieldEl = formEl.closest('[data-surveyjs-container]').querySelectorAll('[data-name=\"bind-surveyjs-answer\"]')[a],\n                fieldProps = {\n                    id: objData.answerCode,\n                    name: objData.answerName,\n                    type: aType,\n                    value: objData.answerId\n                };\n            \n            if( typeof obj.required !== 'undefined' ){ fieldProps.required = true; }\n            \n            for(let key in fieldProps){\n                boundedFieldEl[key] = fieldProps[key];\n            }\n            boundedFieldEl.setAttribute('data-answer-id', objData.answerId);\n            boundedFieldEl.closest('div').querySelector('label').setAttribute('for', objData.answerCode);\n            boundedFieldEl.closest('div').querySelector('label span').textContent = answer.answer;\n            \n            continue;\n            \n        }\n        \n        if( typeof answer.answer === 'string' || typeof answer.answer === 'number' ){\n\n                // beforeCode       MANAGE FIELD INDENT ( FOR NESTED ANSWERS - SEE BELOW )\n                // afterCode        MANAGE FIELD INDENT ( FOR NESTED ANSWERS - SEE BELOW )\n                let surveyFieldType = ( answer.attribute ? 'attribute' : (answer.nested ? 'nested' : ( aType === 'option' ? 'select' : aType )) ),\n                      beforeCode = progIdsLength > 0 && a === 0 ? '<div class=\"surveyjs-field-indent\">' : '',\n                      afterCode = progIdsLength > 0 && a === listL - 1 ? '</div>' : '',\n                      data = { answer, objData, beforeCode, afterCode, obj };\n\n                if( typeof generateFieldHTML[surveyFieldType] === 'undefined' ){\n                    surveyFieldType = 'input';\n                }\n\n                // GENERATE FIELD HTML CODE FROM surveyFieldType\n                fieldData = generateFieldHTML[surveyFieldType]( options, data );\n                \n                objData = fieldData.objData;\n\n                if( answer.nested ){\n                    progIds.push( aNum );\n                    aLoopHtml += fieldData.aHtml;\n                    aLoopHtml += iterateAnswers(formEl, options, answer.nested, qID, i, objData.attrRequired);\n                    continue;\n                }\n\n                // IF LOOPING A NESTED ANSWER AND THE END OF THAT ARRAY IS REACHED\n                // REMOVE THE LAST ITEM OF progIds ( SO AT THE NEXT LOOP IT WILL NOT INDENT THE ANSWER )\n                if( progIdsLength > 0 && a === listL-1 ){ progIds.pop(); }\n\n        }\n\n        fieldData.aHtml = replaceTemplateStrings(options, fieldData, objData);\n        aLoopHtml += fieldData.aHtml;\n        \n        if( aType === 'option' ){\n            a = a + obj.answers.length;\n        }\n        \n    }\n\n    return aLoopHtml;\n\n}\n","\nimport { iterateAnswers } from './generateQAcodeUtils/iterateAnswers';\n\nexport const generateQAcode = ( formEl, options, questionsList = [] ) => {\n\n    const qaData = questionsList[0]['sort'] ? questionsList.sort((a, b) => { return a['sort'] > b['sort']; }) : questionsList,\n          qaDataLength = qaData.length;\n    \n    let qaCodeAll = '';\n    \n    for(let i=0; i<qaDataLength; i++){\n        const item = qaData[i],\n              maxChoice = item.checks ? JSON.parse(item.checks) : '',\n              checksMin = maxChoice.length > 0 ? maxChoice[0] : '',\n              checksMax = maxChoice.length > 0 ? maxChoice[1] : '';\n\n        let aHtml = '',\n            qaHtml = options.templates.question;\n\n        // HTML CODE FOR THE ANSWER/S\n        aHtml += iterateAnswers( formEl, options, item, item.id, i );\n\n        if( item.question === 'hidden-privacy' ){\n            const bindAnswerEl = formEl.closest('[data-surveyjs-container]').querySelector('[data-name=\"bind-surveyjs-answer\"]');\n            if( bindAnswerEl ){\n                bindAnswerEl.closest('[data-formjs-question]').setAttribute('data-question-id', item.id);\n                continue;\n            }\n        }\n\n        // REPLACE QUESTION DATA AND ANSWERS HTML IN LOCAL VARIABLE qaHtml\n        qaHtml = qaHtml.replace( /{{questionId}}/g, item.id );\n        qaHtml = qaHtml.replace( /{{questionNumber}}/g, (i+1) );\n        qaHtml = qaHtml.replace( /{{questionText}}/g, item.question + ( maxChoice !== '' ? ' ('+ checksMax +' '+ options.maxChoiceText +')' : '' ) );\n        qaHtml = qaHtml.replace( /{{answersHtml}}/g, aHtml );\n        qaHtml = qaHtml.replace( /{{fieldErrorTemplate}}/g, ( options.fieldErrorFeedback ? options.templates.fieldError : '' ) );\n        if( options.fieldErrorFeedback && options.templates.fieldError.indexOf('{{fieldErrorMessage}}') !== -1 ){\n            const message = maxChoice !== '' ? options.fieldErrorMessageMultiChoice : options.fieldErrorMessage;\n            qaHtml = qaHtml.replace( /{{fieldErrorMessage}}/g, message ).replace( /{{checksMin}}/g, checksMin ).replace( /{{checksMax}}/g, checksMax );\n        }\n\n        qaCodeAll += qaHtml;\n    }\n    \n    return qaCodeAll;\n\n}\n","\nexport const populateAnswers = ( formEl, internals ) => {\n\n    const LS = localStorage.getObject( internals.localStorageName );\n    if( LS ){\n        const surveyContEl = formEl.closest('[data-surveyjs-container]');\n        internals.localStorageArray = LS;\n        LS.forEach(item => {\n            const fieldFirst = surveyContEl.querySelector( '[name=\"' + item.field + '\"]' ),\n                  isRadioOrCheckbox = fieldFirst.matches('[type=\"radio\"], [type=\"checkbox\"]'),\n                  fieldEl = ( isRadioOrCheckbox ? surveyContEl.querySelector( '[name=\"' + item.field + '\"][value=\"' + item.value + '\"]' ) :   fieldFirst );\n            \n            if( isRadioOrCheckbox ){\n                fieldEl.checked = true;\n            } else {\n                fieldEl.value = item.value;\n            }\n        });\n    }\n\n}\n","\nexport const getAnswerIndexInLocalStorage = ( internals, fieldName, multiChoiceValue = '' ) => {\n\n    const lsSurvey = localStorage.getObject( internals.localStorageName );\n            \n    if( lsSurvey ){\n        const lsSurveyLength = lsSurvey.length;\n        \n        for(let ls=0; ls<lsSurveyLength; ls++){\n            const lsItem = lsSurvey[ls];\n\n            if( lsItem.field === fieldName ){\n                if( multiChoiceValue ){\n                    if( lsItem.value !== multiChoiceValue ){\n                        continue;\n                    }\n                }\n                return ls;\n            }\n        }\n    }\n    \n    return -1;\n\n}","\nimport { isEmptyObject, isFieldForChangeEvent } from './helpers';\nimport { getAnswerIndexInLocalStorage }         from './utils/getAnswerIndexInLocalStorage';\nimport { getQuestionObject }                    from './utils/getQuestionObject';\n\nexport const callbackFns = {\n\n    // THIS WILL RUN BEFORE FORMJS VALIDATION FUNCTION SO THAT USERS CANNOT SKIP REQUIRED FIELDS VALIDATION ( WHILE TYPING )\n    validation: function( event ){\n\n        const eventName = event.type,\n              fieldEl = event.target,\n              self = fieldEl.closest('form').surveyjs,\n              internals = self.internals,\n              containerEl = fieldEl.closest('[data-formjs-question]'),\n              fieldValue = fieldEl.value ? fieldEl.value.trim() : fieldEl.value,\n              isMultiChoice = fieldEl.matches('[data-checks]'),\n              isRequireMore = fieldEl.matches('[data-require-more]'),\n              isRequiredFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = isRequiredFrom ? containerEl.querySelector(fieldEl.getAttribute('data-required-from')) : null;\n\n        // VARS USED TO VALIDATE THE FILED IF IT IS REQUIRED\n        const itemEl = isRequiredFrom ? reqMoreEl : fieldEl,\n              questionId = itemEl.id ? itemEl.id.split('-')[1] : 'id-not-found',\n              isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl),\n              questionObj = getQuestionObject(self.data, questionId);\n\n        // IF IT'S NOT A SURVEY QUESTION -> SKIP\n        if( isEmptyObject(questionObj) ){ return true; }\n\n        if(\n            (isFieldForChangeEventBoolean && eventName === 'change') ||\n            (!isFieldForChangeEventBoolean && eventName !== 'change')\n        ){\n            \n            // MANAGE ITEMS IN LOCAL STORAGE ( IF AVAILABLE AND USABLE )\n            if( self.options.useLocalStorage && !fieldEl.matches('[data-exclude-storage]') ){\n                const inArrayPos = getAnswerIndexInLocalStorage( internals, fieldEl.name, (isMultiChoice ? fieldValue : false) ),\n                    inArrayRequireMorePos = getAnswerIndexInLocalStorage( internals, fieldEl.name + '-more' );\n\n                let localStorageArray = internals.localStorageArray;\n\n                if( !isRequireMore && !isRequiredFrom && inArrayRequireMorePos !== -1 ){\n                    localStorageArray.splice(inArrayRequireMorePos, 1);\n                }\n\n                if( inArrayPos !== -1 ){\n                    if( isMultiChoice ){\n                        if( !fieldEl.checked && localStorageArray[inArrayPos].value === fieldValue ){\n                            // REMOVE ITEM FROM LS\n                            localStorageArray.splice(inArrayPos, 1);\n                        } else {\n                            // ADD ITEM TO LS\n                            localStorageArray.push( { field: fieldEl.name, value: fieldValue } );\n                        }\n                    } else {\n                        if( fieldValue !== '' ){\n                            localStorageArray[inArrayPos].value = fieldValue;\n                        } else {\n                            localStorageArray.splice(inArrayPos, 1); \n                        }\n                    }\n                } else {\n                    if( fieldValue !== '' ){\n                        if( isRequiredFrom && fieldValue !== '' ){\n                            const oldFieldNamePos = getAnswerIndexInLocalStorage( internals, reqMoreEl.name );\n\n                            if( oldFieldNamePos !== -1 ){\n                                localStorageArray.splice(oldFieldNamePos, 1);\n                            }\n                            localStorageArray.push( { field: reqMoreEl.name, value: reqMoreEl.value.trim() } );\n                        }\n                        localStorageArray.push( { field: fieldEl.name, value: fieldValue } );\n                        if( isRequireMore ){\n                            const elReqFromEl = fieldEl.closest('form').querySelector( '[data-required-from=\"#' + fieldEl.id + '\"]' );\n                            localStorageArray.push( { field: elReqFromEl.name, value: elReqFromEl.value.trim() } );\n                        }\n                    }\n                }\n\n                localStorage.setObject( internals.localStorageName, localStorageArray );\n            }\n\n            // BASED ON JSON DATA, FORCE REQUIRED FIELDS TO BE VALIDATED\n            if( typeof questionObj.required !== 'undefined' ){\n                fieldEl.required = true;\n            }\n\n        }\n        \n    }\n\n}\n","\nimport { appendDomStringToNode }from '../helpers';\n\nimport { generateQAcode }       from './generateQAcode';\nimport { populateAnswers }      from './populateAnswers';\nimport { callbackFns }          from '../listenerCallbacks';\n\nimport Form from 'formjs-plugin';\n\nexport const buildSurvey = ( formEl, options, internals, data ) => {\n    \n    const self = formEl.surveyjs,\n          formName = formEl.getAttribute('name') || '',\n          surveyContEl = formEl.closest('[data-surveyjs-container]');\n    \n    // REPLACE SURVEY ID AND FORM NAME IN LOCALSTORAGE NAME\n    self.internals.localStorageName = internals.localStorageName.replace( /{{surveyId}}/g, data.id );\n    self.internals.localStorageName = internals.localStorageName.replace( /{{surveyFormName}}/g, formName );\n    \n    // PRINT GENERAL SURVEY DATA: TITLE AND DESCRIPTION\n    const checkData = data => { return typeof data !== 'undefined' ? data : ''; };\n    if( surveyContEl.querySelector('[data-surveyjs-title]') ){\n        surveyContEl.querySelector('[data-surveyjs-title]').textContent = checkData( data.title );\n    }\n    if( surveyContEl.querySelector('[data-surveyjs-description]') ){\n        surveyContEl.querySelector('[data-surveyjs-description]').textContent = checkData( data.description );\n    }\n    \n    // ITERATES THE QUESTIONS ( AND ALSO THEIR ANSWERS )...AND RETURN ALL THE HTML CODE\n    const qaHtmlAll = generateQAcode( formEl, options, data.questions );\n    // PRINT ALL QUESTIONS & ANSWERS\n    appendDomStringToNode( qaHtmlAll, formEl.querySelector('[data-surveyjs-body]') );\n\n    // FILL ANSWERS WITH LOCAL STORAGE ( IF AVAILABLE )\n    if( options.useLocalStorage ){\n        populateAnswers( formEl, self.internals );\n    } else { console.warn('LOCAL STORAGE IS NOT SUPPORTED!'); }\n\n    // INIT FIELDS VALIDATION\n    // THIS WILL RUN BEFORE FORMJS VALIDATION FUNCTION SO THAT USERS CANNOT SKIP REQUIRED FIELDS VALIDATION\n    const validateOnEvents = (options.fieldOptions && options.fieldOptions.validateOnEvents) || Form.prototype.options.fieldOptions.validateOnEvents;\n    validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.addEventListener(eventName, callbackFns.validation, useCapturing);\n    });\n\n    // CREATE & INITIALIZE FORMJS INSTANCE FOR SURVEY\n    const formJSoptions = {\n            fieldOptions: options.fieldOptions,\n            formOptions: options.formOptions\n        };\n    const formInstance = new Form( formEl, formJSoptions );\n\n    formEl.addEventListener('fjs.form:submit', event => {\n        event.data.then(() => {\n            // REMOVE SURVEY LOCAL STORAGE\n            if( options.useLocalStorage ){\n                localStorage.removeItem( self.internals.localStorageName );\n            }\n        });\n    });\n\n    return new Promise(resolve => {\n        resolve( formInstance.init() );\n    }).then(() => {\n        surveyContEl.classList.add('surveyjs-init-success');\n    });\n\n}\n","\nimport { ajaxCall } from './helpers';\nimport { buildSurvey } from './buildSurvey/buildSurvey';\n\nexport const retrieveSurvey = ( formEl, options, internals ) => {\n\n    formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforebegin', options.loadingBox );\n    return ajaxCall(options.url, options.initAjaxOptions)\n        .then(response => {\n            if( response.status.toLowerCase() === 'success' && response.data.questions && response.data.questions.length > 0 ){\n                return new Promise(resolve => {\n                    resolve( buildSurvey(formEl, options, internals, response.data) );\n                }).then(() => {\n                    return response;\n                });\n            }\n            return Promise.reject(response);\n        })\n        .finally(() => {\n            const loadingBoxEl = formEl.querySelector('[data-surveyjs-loading]');\n            if( loadingBoxEl ){\n                loadingBoxEl.parentNode.removeChild(loadingBoxEl);\n            }\n        });\n\n}\n","\nimport { callbackFns } from './listenerCallbacks';\n\nexport const destroy = formEl => {\n\n    formEl.formjs.options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.removeEventListener(eventName, callbackFns.validation, useCapturing);\n    });\n\n    delete formEl.surveyjs;\n    formEl.formjs.destroy();\n    \n}\n","\nimport { deepFreeze, mergeObjects } from './modules/helpers';\nimport { messages }             from './modules/messages';\nimport { options }              from './modules/options';\n\n// CONSTRUCTOR FUNCTION & PUBLIC METHODS\nimport { constructorFn }        from './modules/constructor';\nimport { retrieveSurvey }       from './modules/retrieveSurvey';\nimport { destroy }              from './modules/destroy';\n\nimport './index.css';\n\nconst version = '3.0.0';\n\nclass Survey {\n\n    constructor( formEl, optionsObj ){\n        constructorFn(this, formEl, optionsObj);\n    }\n\n    destroy(){\n        destroy(this.formEl);\n    }\n\n    init(){\n        return retrieveSurvey(this.formEl, this.options, this.internals)\n        .then(response => {\n            this.isInitialized = true;\n            this.data = deepFreeze(response.data);\n            return response;\n        });\n    }\n    \n    static addLanguage( langString, langObject ){\n        const langValue = langString.toLowerCase();\n        this.prototype.messages[langValue] = mergeObjects({}, this.prototype.messages[langValue], langObject);\n    }\n\n    static setOptions( optionsObj ){\n        this.prototype.options = mergeObjects({}, this.prototype.options, optionsObj);\n    }\n\n}\n\nSurvey.prototype.isInitialized = false;\nSurvey.prototype.messages = messages;\nSurvey.prototype.options = options;\nSurvey.prototype.version = version;\n\nexport default Survey;\n"],"sourceRoot":""}