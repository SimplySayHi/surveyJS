{"version":3,"file":"surveyjs.min.js","sources":["../src/modules/helpers/ajaxCall.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/deepFreeze.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelectorSurvey.js","../src/modules/helpers/isEmptyObject.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/replaceObjectKeysInString.js","../src/modules/helpers/sortList.js","../src/modules/helpers/toKebabCase.js","../src/modules/helpers/webStorage.js","../src/modules/messages.js","../src/modules/utils/getQuestionObject.js","../src/modules/optionsUtils.js","../src/modules/options.js","../src/modules/internals.js","../src/modules/utils/getAnswerIndexInWebStorage.js","../src/modules/listenerCallbacks.js","../src/modules/buildSurvey/generateQAcodeUtils/generateOptionTags.js","../src/modules/buildSurvey/generateQAcodeUtils/getAttributesStringHTML.js","../src/modules/buildSurvey/generateQAcodeUtils/getTemplates.js","../src/modules/buildSurvey/generateQAcodeUtils/generateAnswers.js","../src/modules/buildSurvey/generateQAcode.js","../src/modules/buildSurvey/populateAnswers.js","../src/modules/buildSurvey/buildSurvey.js","../src/modules/destroy.js","../src/index.js"],"sourcesContent":["\nexport const ajaxCall = ( url = location.href, options = {} ) => {\n\n    let timeoutTimer;\n\n    options.headers = new Headers( options.headers );\n\n    /* SET AbortController FOR timeout */\n    if ( options.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        options.signal = signal;\n\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, options.timeout);\n    }\n\n    return fetch( url, options )\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n        });\n        \n}\n","\nexport const customEvents = {\n    init: 'sjs:init'\n}\n","\nexport const deepFreeze = obj => {\n\n    Object.getOwnPropertyNames(obj).forEach(name => {\n        const prop = obj[name];\n        if( typeof prop === 'object' && prop !== null ){\n            deepFreeze(prop);\n        }\n    });\n    return Object.freeze(obj);\n    \n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelectorSurvey = '[data-surveyjs-form] input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]), [data-surveyjs-form] select, [data-surveyjs-form] textarea, [data-name=\"bind-surveyjs-answer\"]'\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const isEmptyObject = object => {\n    return isPlainObject(object) && Object.getOwnPropertyNames(object).length === 0;\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nexport const replaceObjectKeysInString = (obj, stringHTML) => {\n    return Object.keys(obj).reduce((accString, name) => {\n        const regexStr = new RegExp( '{{' + name + '}}', 'g' );\n        return accString.replace(regexStr, obj[name]);\n    }, stringHTML);\n}\n","\nexport const sortList = ( list ) => {\n    if( list[0]['sort'] ){\n        list.sort((a, b) => a['sort'] > b['sort']);\n    }\n    return list;\n}\n","\nexport const toKebabCase = ( string = '', useAllCaps = false ) => {\n    let newString = string.trim().replace(/(([_ ])([a-z]))|(([a-z])?([A-Z]))/g, (match, p1, p2, p3, p4, p5, p6) => {\n        const concatGroup = p3 ? '-' + p3 : (p5 || '') + '-' + p6;\n        return concatGroup.toLowerCase();\n    } );\n    return useAllCaps ? newString.toUpperCase() : newString;\n}\n","\nexport const webStorage = () => {\n\n    const checkLocalStorage = () => {\n        const mod = 'check_storage';\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    const isAvailable = checkLocalStorage();\n\n    if( isAvailable ){\n        // setObject METHOD FOR HTML STORAGE -> EG: localStorage.setObject( name, JSobj )\n        // TO STORE A JS OBJECT ( AS JSON STRING ) INSIDE THE STORAGE\n        Storage.prototype.setObject = function( key, value ) {\n            this.setItem( key, JSON.stringify(value) );\n        }\n\n        // getObject METHOD FOR HTML STORAGE -> EG: localStorage.getObject( name )\n        // RETURN THE DATA ( STORED AS JSON STRING ) AS JS OBJECT\n        Storage.prototype.getObject = function( key ) {\n            const value = this.getItem( key );\n            return value && JSON.parse( value );\n        }\n    }\n\n    return {\n        isAvailable: isAvailable\n    }\n\n}\n","\nexport const messages = {\n    it: {\n        loadingBox:         '<div class=\"surveyjs-loading\" data-surveyjs-loading><i class=\"glyphicon glyphicon-refresh icon-spin\"></i> Caricamento in corso...</div>',\n        maxChoice:          'RISPOSTE MAX',\n        fieldErrorMessage:  '&Egrave; necessario rispondere.',\n        fieldErrorMessageMultiChoice:  'Devi scegliere da {{checksMin}} a {{checksMax}} risposte.'\n    },\n    en: {\n        loadingBox:         '<div class=\"surveyjs-loading\" data-surveyjs-loading><i class=\"glyphicon glyphicon-refresh icon-spin\"></i> Loading...</div>',\n        maxChoice:          'ANSWERS MAX',\n        fieldErrorMessage:  'Answer is necessary.',\n        fieldErrorMessageMultiChoice:  'You must choose from {{checksMin}} to {{checksMax}} answers.'\n    }\n}\n","\nexport const getQuestionObject = ( data, questionId ) => {\n\n    const questions = data.questions,\n          qLength = questions.length;\n\n    let obj = {};\n    \n    for(let q=0; q<qLength; q++){\n        const question = questions[q];\n        if( question.id == questionId ){\n            obj = question;\n            break;\n        }\n    }\n\n    return obj;\n\n}","\nimport { fieldsStringSelectorSurvey, isEmptyObject, mergeObjects } from './helpers';\nimport { getQuestionObject } from './utils/getQuestionObject';\n\nexport const defaultCallbacksInOptions = {\n    formOptions: {\n\n        beforeSend: function beforeSend_surveyDefault( data ){\n            let isHacking = false;\n            const instance = this;\n            const surveyContEl = instance.formEl.closest('[data-surveyjs-container]');\n            const fieldsList = Array.from( surveyContEl.querySelectorAll(fieldsStringSelectorSurvey) );\n\n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                \n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                const questionEl = fieldEl.closest('[data-question-id]');\n                const questionId = questionEl ? questionEl.getAttribute('data-question-id') : '';\n                const questionObj = getQuestionObject( instance.data, questionId );\n\n                // BASED ON SURVEY JSON FILE, FORCE REQUIRED FIELDS TO BE VALIDATED\n                // THIS AVOIDS USERS TO HACK THE SURVEY, FOR EXAMPLE REMOVING required ATTRIBUTE FROM THE HTML\n                if( questionId !== '' && questionObj && !!questionObj.required ){\n\n                    const isRequiredFrom = fieldEl.matches('[data-required-from]');\n                    const reqMoreEl = document.querySelector(fieldEl.getAttribute('data-required-from'));\n                    if( !isRequiredFrom || ( isRequiredFrom && reqMoreEl.checked ) ){\n                        if( !fieldEl.required ){\n                            // FIELD IS NOT REQUIRED BUT IT SHOULD => USER HACKED FIELD\n                            isHacking = true;\n                        }\n                        fieldEl.required = true;\n                    }\n                    \n                }\n\n            });\n\n            if( isHacking ){\n                // USER IS HACKING FORM ( REMOVING ATTRIBUTE required FROM A FIELD )\n                // => FORCE VALIDATION TO SHOW ERROR AND STOP SUBMIT\n                const fieldOptions = mergeObjects({}, instance.options.fieldOptions, {focusOnRelated: false});\n                return instance.validateForm( fieldOptions )\n                    .then(formRes => {\n                        data.stopExecution = true;\n                        return data;\n                    });\n            }\n            return data;\n        },\n\n        getFormData: function getFormData_surveyDefault(){\n            const formEl = this.formEl;\n            const instance = formEl.formjs;\n            const fieldsList = Array.from( formEl.closest('[data-surveyjs-container]').querySelectorAll(fieldsStringSelectorSurvey) );\n            const obj = {\n                    answers: [],\n                    id: instance.data.id\n                };\n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                // EACH QUESTION HAS ITS OWN OBJECT ( qaObj ) THAT CONTAINS THE RELATED DATA:\n                // question:    THE QUESTION ID ( undefined FOR QUESTIONS WITH ATTRIBUTE data-required-form - will be skipped later )\n                // answer       AN OBJECT THAT CONTAINS THE FOLLOWS:\n                //                  value:      THE ANSWER VALUE\n                //                  related:    IF THE ANSWER IS REQUIRED FROM ANOTHER ANSWER (SEE BELOW)\n                const questionEl = fieldEl.closest('[data-question-id]'),\n                      questionId = questionEl ? questionEl.getAttribute('data-question-id') : '',\n                      qaObj = {\n                        question: questionId,\n                        answer: {\n                            value: fieldEl.value || ''\n                        }\n                    };\n\n                // A FIELD WITH ATTRIBUTE 'data-required-from' IS MANAGED TOGETHER WITH ITS RELATED FIELD ( WHICH HAS ATTRIBUTE 'data-require-more' )\n                // IF QUESTION ID IS EMPTY -> SKIP THE FIELD ( USEFUL FOR FORM FIELDS OUTSIDE THE SURVEY BODY )\n                if(\n                    fieldEl.matches('[data-required-from]') || \n                    questionId === '' || \n                    isEmptyObject( getQuestionObject(instance.data, questionId) )\n                ){ return; }\n\n                if( type === 'radio' ){\n                    const containerEl = fieldEl.closest('form') ? formEl : fieldEl.closest(instance.options.fieldOptions.questionContainer);\n                    const checkedEl = containerEl.querySelector('[name=\"'+ name +'\"]:checked');\n\n                    qaObj.answer.value = (checkedEl && checkedEl.value) || '';\n\n                    // FOR RADIO THAT REQUIRE THE USER TO GIVE ONE MORE ANSWER\n                    if( checkedEl && checkedEl.matches('[data-require-more]') ){\n                        qaObj.answer.related = formEl.querySelector('[data-required-from=\"#'+ checkedEl.id +'\"]').value;\n                    }\n                }\n\n                if( type === 'checkbox' && fieldEl.matches('[data-checks]') ){\n                    qaObj.answer.value = [];\n                    Array.from(formEl.querySelectorAll('[name=\"'+ name +'\"]:checked')).forEach(el => {\n                        qaObj.answer.value.push( el.value );\n                    });\n                }\n                \n                obj.answers.push( qaObj );\n            });\n        \n            return obj;\n        }\n    \n    }\n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n    cssClasses: {\n        checkbox:           'form-check-input',\n        default:            'form-control',\n        file:               'form-control-file',\n        label:              'form-check-label',\n        radio:              'form-check-input',\n        wrapper: {\n            checkbox:       'form-check',\n            default:        '',\n            radio:          'form-check'\n        }\n    },\n    fieldErrorFeedback:     true,\n    formOptions: {\n        beforeSend:         [defaultCallbacksInOptions.formOptions.beforeSend],\n        getFormData:        defaultCallbacksInOptions.formOptions.getFormData\n    },\n    initAjaxOptions:        {\n        cache:              'no-store',\n        credentials:        'same-origin',\n        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept':       'application/json'\n        },\n        method:             'GET',\n        mode:               'same-origin',\n        redirect:           'follow',\n        timeout:            0\n    },\n    lang:                   'en',\n    templates: {\n        fieldError: '<div class=\"surveyjs-field-error-message\">{{fieldErrorMessage}}</div>',\n\n        input:      '<input {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-input surveyjs-{{answerType}} {{fieldClasses}}\" />',\n\n        label:      '<label for=\"{{answerCode}}\" class=\"surveyjs-label {{labelClasses}}\">{{labelString}}</label>',\n\n        question:   '<div data-question-id=\"{{questionId}}\" data-formjs-question class=\"surveyjs-question-box clearfix\">'+\n                        '<div class=\"surveyjs-question-header\">Question {{questionNumber}}</div>'+\n                        '<div class=\"surveyjs-question-body\">'+\n                            '<div class=\"surveyjs-question-text\">{{questionText}}</div>'+\n                            '<div class=\"surveyjs-answers-box form-group clearfix\">'+\n                                '{{answersHTML}}'+\n                                '{{fieldErrorTemplate}}'+\n                            '</div>'+\n                        '</div>'+\n                    '</div>',\n        \n        select:     '<select {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-select {{fieldClasses}}\">'+\n                        '{{optionsHtml}}'+\n                    '</select>',\n\n        textarea:   '<textarea {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}\" class=\"surveyjs-textarea {{fieldClasses}}\"></textarea>',\n\n        wrapper: {\n            default:    '<div class=\"surveyjs-single-answer surveyjs-field-container surveyjs-answer-{{answerType}} {{wrapperClasses}}\">'+\n                            '{{fieldTemplate}}'+\n                            '{{labelTemplate}}'+\n                        '</div>',\n\n            nested:     '<div class=\"surveyjs-nested-parent surveyjs-single-answer surveyjs-field-container surveyjs-answer-{{answerType}}\">'+\n                            '{{labelTemplate}}'+\n                            '<div class=\"surveyjs-nested-container surveyjs-field-indent\">'+\n                                '{{nestedFieldsHTML}}'+\n                            '</div>'+\n                        '</div>',\n                    \n            related:    '<div class=\"surveyjs-single-answer surveyjs-field-container input-group {{wrapperClasses}}\">'+\n                            '<div class=\"input-group-prepend\">'+\n                                '<div class=\"input-group-text form-check surveyjs-answer-radio\">'+\n                                    '{{fieldTemplate}}'+\n                                    '{{labelTemplate}}'+\n                                '</div>'+\n                            '</div>'+\n                            '{{relatedFieldHTML}}'+\n                        '</div>'\n        }\n    },\n    useWebStorage:          true\n}\n","\nexport const internals = {\n    storageArray: [],\n    storageName: 'Survey_' + location.href + '_{{surveyFormName}}_surveyId[{{surveyId}}]'\n}\n","\nexport const getAnswerIndexInWebStorage = ( internals, fieldName, multiChoiceValue = '' ) => {\n\n    const wsSurvey = sessionStorage.getObject( internals.storageName );\n            \n    if( wsSurvey ){\n        const wsSurveyLength = wsSurvey.length;\n        \n        for(let ws=0; ws<wsSurveyLength; ws++){\n            const lsItem = wsSurvey[ws];\n\n            if( lsItem.field === fieldName ){\n                if( multiChoiceValue ){\n                    if( lsItem.value !== multiChoiceValue ){\n                        continue;\n                    }\n                }\n                return ws;\n            }\n        }\n    }\n    \n    return -1;\n\n}","\nimport { isEmptyObject, isFieldForChangeEvent } from './helpers';\nimport { getAnswerIndexInWebStorage }           from './utils/getAnswerIndexInWebStorage';\nimport { getQuestionObject }                    from './utils/getQuestionObject';\n\nexport const callbackFns = {\n\n    submit: function( event ){\n        const self = event.target.formjs;\n        event.data.then(() => {\n            if( self.options.useWebStorage ){\n                sessionStorage.removeItem( self.internals.storageName );\n            }\n        });\n    },\n\n    validation: function( event ){\n\n        const eventName = event.type,\n              fieldEl = event.target,\n              self = fieldEl.closest('form').formjs,\n              internals = self.internals,\n              containerEl = fieldEl.closest( self.options.fieldOptions.questionContainer ),\n              fieldValue = fieldEl.value,\n              isMultiChoice = fieldEl.matches('[data-checks]'),\n              isRequireMore = fieldEl.matches('[data-require-more]'),\n              isRequiredFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = isRequiredFrom ? containerEl.querySelector(fieldEl.getAttribute('data-required-from')) : null;\n\n        // VARS USED TO VALIDATE THE FILED IF IT IS REQUIRED\n        const itemEl = isRequiredFrom ? reqMoreEl : fieldEl,\n              questionId = itemEl.id ? itemEl.id.split('-')[2] : 'id-not-found',\n              isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl),\n              questionObj = getQuestionObject(self.data, questionId);\n\n        // IF IT'S NOT A SURVEY QUESTION -> SKIP\n        if( isEmptyObject(questionObj) ){ return true; }\n\n        if(\n            (isFieldForChangeEventBoolean && eventName === 'change') ||\n            (!isFieldForChangeEventBoolean && eventName !== 'change')\n        ){\n            \n            // MANAGE ITEMS IN LOCAL STORAGE ( IF AVAILABLE AND USABLE )\n            if( self.options.useWebStorage && !fieldEl.matches('[data-exclude-storage]') ){\n                const inArrayPos = getAnswerIndexInWebStorage( internals, fieldEl.name, (isMultiChoice ? fieldValue : false) );\n                const inArrayRequireMorePos = getAnswerIndexInWebStorage( internals, fieldEl.name + '-more' );\n\n                let storageArray = internals.storageArray;\n\n                if( !isRequireMore && !isRequiredFrom && inArrayRequireMorePos !== -1 ){\n                    storageArray.splice(inArrayRequireMorePos, 1);\n                }\n\n                if( inArrayPos !== -1 ){\n                    if( isMultiChoice ){\n                        if( !fieldEl.checked && storageArray[inArrayPos].value === fieldValue ){\n                            // REMOVE ITEM FROM LS\n                            storageArray.splice(inArrayPos, 1);\n                        } else {\n                            // ADD ITEM TO LS\n                            storageArray.push( { field: fieldEl.name, value: fieldValue } );\n                        }\n                    } else {\n                        if( fieldValue !== '' ){\n                            storageArray[inArrayPos].value = fieldValue;\n                        } else {\n                            storageArray.splice(inArrayPos, 1); \n                        }\n                    }\n                } else {\n                    if( fieldValue !== '' ){\n                        if( isRequiredFrom && fieldValue !== '' ){\n                            const oldFieldNamePos = getAnswerIndexInWebStorage( internals, reqMoreEl.name );\n                            if( oldFieldNamePos !== -1 ){\n                                storageArray.splice(oldFieldNamePos, 1);\n                            }\n                            storageArray.push( { field: reqMoreEl.name, value: reqMoreEl.value } );\n                        }\n                        storageArray.push( { field: fieldEl.name, value: fieldValue } );\n                        if( isRequireMore ){\n                            const elReqFromEl = fieldEl.closest('form').querySelector( '[data-required-from=\"#' + fieldEl.id + '\"]' );\n                            storageArray.push( { field: elReqFromEl.name, value: elReqFromEl.value } );\n                        }\n                    }\n                }\n\n                sessionStorage.setObject( internals.storageName, storageArray );\n            }\n\n            // BASED ON JSON DATA, FORCE REQUIRED FIELDS TO BE VALIDATED\n            if( typeof questionObj.required !== 'undefined' ){\n                fieldEl.required = true;\n            }\n\n        }\n        \n    }\n\n}\n","\nimport { sortList } from '../../helpers';\n\nexport const generateOptionTags = ( optionsList = [] ) => {\n\n    return sortList( optionsList ).reduce((optionsHTML, opt) => {\n        return optionsHTML += `<option value=\"${opt.value}\">${opt.label}</option>`;\n    }, '');\n\n}","\nimport { toKebabCase } from '../../helpers';\n\nexport const getAttributesStringHTML = ( answerObj, answerCode, isRequired ) => {\n    const excludedAttrs = ['data', 'id', 'label', 'nested', 'related', 'sort'];\n    \n    if( /^(option|textarea)$/.test(answerObj.type) ){\n        excludedAttrs.push('type');\n    }\n\n    let string = '';\n\n    Object.keys(answerObj)\n        .filter(name => excludedAttrs.indexOf(name) === -1)\n        .forEach(name => {\n            string += ` ${name}=\"${answerObj[name]}\"`;\n        });\n\n    if( answerObj.data ){\n        Object.keys(answerObj.data).forEach(name => {\n            string += ` data-${toKebabCase(name)}=\"${answerObj.data[name]}\"`;\n        });\n    }\n\n    if( isRequired ){\n        string += ' required';\n    }\n\n    if( answerObj.related ){\n        string += ' data-require-more';\n    }\n\n    string += ` id=\"${answerCode}\"`;\n    string += ` data-answer-id=\"${answerObj.id}\"`;\n\n    return string.trim();\n}\n","\nexport const getTemplates = ( templates, answerType ) => {\n    return {\n        field: templates[answerType] || templates.input,\n        label: /^(checkbox|nested|radio|related)$/.test(answerType) ? templates.label : '',\n        wrapper: templates.wrapper[answerType] || templates.wrapper.default\n    }\n}\n","\nimport { mergeObjects, replaceObjectKeysInString, sortList } from '../../helpers';\nimport { generateOptionTags }       from './generateOptionTags';\nimport { getAttributesStringHTML }  from './getAttributesStringHTML';\nimport { getTemplates }             from './getTemplates';\n\nexport const generateAnswers = ( options, answersList, extraData ) => {\n\n    let allAnswersHTML = '';\n    let previousType = '';\n\n    sortList( answersList ).forEach((answer, index) => {\n\n        let answerHTML = '';\n\n        // COLLECT USEFUL DATA\n        // answerType => checkbox, date, email, radio, select, text, textarea, etc...\n        const answerType = answer.type === 'option' ? 'select' : answer.type;\n        \n        if( answerType === 'select' && previousType === answerType ){ return; }\n\n        previousType = answerType;\n\n        if( extraData.question.checks ){\n            answer = mergeObjects({}, answer, {data:{checks:extraData.question.checks}});\n        }\n        \n        const answerCode = `${answerType}-${extraData.surveyId}-${extraData.question.id}-${answerType === 'select' ? (index + 1) : answer.id}`;\n        const answerData = {\n            questionNumber: extraData.question.index + 1,\n            wrapperClasses: options.cssClasses.wrapper[answerType] || options.cssClasses.wrapper.default,\n            fieldAttributes: getAttributesStringHTML( answer, answerCode, extraData.question.isRequired ),\n            fieldClasses: options.cssClasses[answerType] || options.cssClasses.default,\n\n            answerType,\n            answerCode,\n            addMoreName: '',\n\n            labelString: answer.label || '',\n            labelClasses: options.cssClasses.label\n        };\n\n        let relatedFieldHTML = '';\n        if( answer.related ){\n            const relatedType = answer.related.type || 'select';\n            const relatedIsSelect = relatedType === 'select';\n            const relatedObj = relatedIsSelect ? mergeObjects({}, answer) : answer.related;\n\n            relatedObj.type = relatedIsSelect ? 'option' : relatedType;\n            relatedObj.id = `${answer.id}-more`;\n            relatedObj.data = mergeObjects({}, relatedObj.data, {requiredFrom:'#'+answerCode});\n            delete relatedObj.related;\n\n            const answerDataRelated = {\n                fieldAttributes: getAttributesStringHTML(relatedObj, `${answerCode}-more`, false),\n                answerType: relatedType,\n                addMoreName: '-more',\n                fieldClasses: relatedIsSelect ? options.cssClasses.select : (options.cssClasses[relatedType] || options.cssClasses.default)\n            };\n\n            relatedFieldHTML = options.templates[relatedType] || options.templates.input;\n            if( relatedIsSelect ){\n                const optionsHtml = generateOptionTags( answer.related );\n                relatedFieldHTML = relatedFieldHTML.replace('{{optionsHtml}}', optionsHtml);\n            }\n\n            relatedFieldHTML = replaceObjectKeysInString(answerDataRelated, relatedFieldHTML);\n        }\n        \n        // TAKE RIGHT TEMPLATES ( wrapper, field and label ) AND PUT ALL TOGETHER\n        // answerTypeForTemplate => related, input, nested, select, textarea, etc...\n        const answerTypeForTemplate = answer.related ? 'related' : (answer.nested ? 'nested' : answerType);\n        const templates = getTemplates( options.templates, answerTypeForTemplate );\n\n        let nestedFieldsHTML = '';\n        if( answer.nested ){\n            nestedFieldsHTML = generateAnswers( options, answer.nested, extraData );\n        }\n\n        let optionsHtml = '';\n        if( answerType === 'select' ){\n            optionsHtml = generateOptionTags( answersList );\n        }\n\n        answerHTML = templates.wrapper\n                        .replace('{{relatedFieldHTML}}', relatedFieldHTML)\n                        .replace('{{fieldTemplate}}', templates.field)\n                        .replace('{{optionsHtml}}', optionsHtml)\n                        .replace('{{labelTemplate}}', templates.label)\n                        .replace('{{nestedFieldsHTML}}', nestedFieldsHTML);\n        allAnswersHTML += replaceObjectKeysInString(answerData, answerHTML);\n\n    });\n\n    return allAnswersHTML;\n\n}\n","\nimport { replaceObjectKeysInString, sortList } from '../helpers';\nimport { generateAnswers } from './generateQAcodeUtils/generateAnswers';\n\nexport const generateQAcode = ( formEl, options, surveyData ) => {\n\n    const questionsList = sortList( surveyData.questions );\n    const qaDataLength = questionsList.length;\n    \n    let qaCodeAll = '';\n    \n    for(let i=0; i<qaDataLength; i++){\n        const questionObj = questionsList[i];\n\n        let qaHtml = options.templates.question;\n        const questionId = questionObj.id;\n        const questionNumber = i + 1;\n        const extraData = {\n            surveyId: surveyData.id,\n            question: {\n                id: questionId,\n                index: i,\n                isRequired: !!questionObj.required\n            }\n        };\n\n        if( questionObj.checks ){\n            extraData.question.checks = questionObj.checks;\n        }\n        \n        let answersHTML = generateAnswers( options, questionObj.answers, extraData );\n\n        // MANAGE EXTERNAL QUESTION\n        if( questionObj.external ){\n            const externalCont = formEl.closest('[data-surveyjs-container]').querySelector('[data-surveyjs-external]');\n            externalCont.setAttribute('data-question-id', questionId);\n\n            questionObj.answers.forEach((answer, index) => {\n                const bindAnswerEl = externalCont.querySelectorAll('[data-field]')[index];\n                const fieldProps = {\n                        id: `${answer.type}-${extraData.surveyId}-${questionId}-${answer.id}`,\n                        name: `${bindAnswerEl.name}${questionNumber}`,\n                        type: answer.type,\n                        value: answer.value,\n                        required: !!questionObj.required\n                    };\n                \n                Object.keys(fieldProps).forEach(name => {\n                    bindAnswerEl[name] = fieldProps[name];\n                });\n\n                bindAnswerEl.setAttribute('data-answer-id', answer.id);\n\n                const answerCont = bindAnswerEl.closest('[data-answer]');\n                answerCont.querySelector('label').setAttribute('for', fieldProps.id);\n                answerCont.querySelector('[data-label]').innerHTML = answer.label;\n                externalCont.querySelector('[data-question]').innerHTML = questionObj.question;\n            });\n\n            continue;\n        }\n\n        const maxChoice = questionObj.checks ? JSON.parse(questionObj.checks) : '';\n        const checksMin = maxChoice[0] || '';\n        const checksMax = maxChoice[1] || '';\n        const maxChoiceText = maxChoice && options.maxChoice ? ' ('+ checksMax +' '+ options.maxChoice +')' : '';\n\n        const questionData = {\n            questionId,\n            questionNumber,\n            questionText: questionObj.question + maxChoiceText,\n            answersHTML,\n            fieldErrorTemplate: options.fieldErrorFeedback ? options.templates.fieldError : ''\n        };\n        qaHtml = replaceObjectKeysInString(questionData, qaHtml);\n\n        if( options.fieldErrorFeedback && options.templates.fieldError.indexOf('{{fieldErrorMessage}}') !== -1 ){\n            const fieldErrorMessage = maxChoice !== '' ? options.fieldErrorMessageMultiChoice : (questionObj.errorMessage || options.fieldErrorMessage);\n            qaHtml = qaHtml.replace( /{{fieldErrorMessage}}/g, fieldErrorMessage );\n        }\n\n        qaCodeAll += replaceObjectKeysInString({checksMin, checksMax}, qaHtml);\n    }\n    \n    return qaCodeAll;\n\n}\n","\nexport const populateAnswers = ( formEl, internals ) => {\n\n    const WS = sessionStorage.getObject( internals.storageName );\n    if( WS ){\n        const surveyContEl = formEl.closest('[data-surveyjs-container]');\n        internals.storageArray = WS;\n        WS.forEach(item => {\n            const fieldFirst = surveyContEl.querySelector( '[name=\"' + item.field + '\"]' ),\n                  isRadioOrCheckbox = fieldFirst.matches('[type=\"radio\"], [type=\"checkbox\"]'),\n                  fieldEl = ( isRadioOrCheckbox ? surveyContEl.querySelector('[name=\"' + item.field + '\"][value=\"' + item.value + '\"]') : fieldFirst );\n            \n            if( isRadioOrCheckbox ){\n                fieldEl.checked = true;\n            } else {\n                fieldEl.value = item.value;\n            }\n        });\n    }\n\n}\n","\nimport { generateQAcode }       from './generateQAcode';\nimport { populateAnswers }      from './populateAnswers';\n\nexport const buildSurvey = ( formEl, options, internals, data ) => {\n    \n    const formName = formEl.getAttribute('name') || '';\n    \n    // REPLACE SURVEY ID AND FORM NAME IN WEB STORAGE NAME\n    internals.storageName = internals.storageName.replace( /{{surveyId}}/, data.id );\n    internals.storageName = internals.storageName.replace( /{{surveyFormName}}/, formName );\n    \n    const qaHtmlAll = generateQAcode( formEl, options, data );\n    formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforeend', qaHtmlAll );\n\n    // FILL ANSWERS WITH LOCAL STORAGE ( IF AVAILABLE )\n    if( options.useWebStorage ){\n        populateAnswers( formEl, internals );\n    }\n\n}\n","\nimport { callbackFns } from './listenerCallbacks';\n\nexport const destroy = formEl => {\n\n    formEl.formjs.options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.removeEventListener(eventName, callbackFns.validation, useCapturing);\n    });\n    formEl.removeEventListener('fjs.form:submit', callbackFns.submit);\n    \n}\n","\nimport { ajaxCall, customEvents, deepFreeze, dispatchCustomEvent, mergeObjects, webStorage } from './modules/helpers';\nimport { messages }     from './modules/messages';\nimport { options }      from './modules/options';\nimport { internals }    from './modules/internals';\nimport { callbackFns }  from './modules/listenerCallbacks';\nimport { buildSurvey }  from './modules/buildSurvey/buildSurvey';\nimport { destroy }      from './modules/destroy';\n\nimport Form from 'formjs-plugin';\n\nimport './index.scss';\n\nconst version = '3.0.0';\n\nclass Survey extends Form {\n\n    constructor( formEl, optionsObj = {} ){\n        if( !optionsObj.url || typeof optionsObj.url !== 'string' ){\n            throw new Error('\"options.url\" is missing or not a string!');\n        }\n\n        // SET THE lang VALUE IN options ( MANDATORY FOR OTHER OPERATIONS )\n        const customLang = typeof optionsObj.lang === 'string' && optionsObj.lang.toLowerCase();\n        const langValue = customLang && Survey.prototype.messages[customLang] ? customLang : Survey.prototype.options.lang;\n        \n        // MERGE OPTIONS AND messages OF THE CHOSEN lang INSIDE options\n        const options = mergeObjects( {}, Survey.prototype.options, Survey.prototype.messages[langValue], optionsObj );\n\n        if( !webStorage().isAvailable ){\n            options.useWebStorage = false;\n        }\n\n        // CREATE FORM INSTANCE FOR SURVEY\n        super( formEl, options );\n        const self = this;\n        self.internals = internals;\n        self.options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n            const useCapturing = eventName === 'blur' ? true : false;\n            self.formEl.addEventListener(eventName, callbackFns.validation, useCapturing);\n        });\n        self.formEl.addEventListener('fjs.form:submit', callbackFns.submit);\n\n        // CREATE SURVEY\n        self.formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforebegin', self.options.loadingBox );\n        const retrieveSurvey = ajaxCall(self.options.url, self.options.initAjaxOptions)\n            .then(response => {\n                if( response.status.toLowerCase() !== 'success' ){\n                    return Promise.reject(response);\n                }\n                return new Promise(resolve => {\n                    if( response.data.questions && response.data.questions.length > 0 ){\n                        buildSurvey(self.formEl, self.options, self.internals, response.data);\n                        super.init().then(() => {\n                            self.isInitialized = true;\n                            self.data = response.data;\n                            deepFreeze(self.data);\n                            self.formEl.closest('[data-surveyjs-container]').classList.add('surveyjs-init-success');\n                            resolve(response);\n                        });\n                    } else {\n                        resolve(response);\n                    }\n                });\n            })\n            .finally(() => {\n                const loadingBoxEl = self.formEl.querySelector('[data-surveyjs-loading]');\n                if( loadingBoxEl ){\n                    loadingBoxEl.parentNode.removeChild(loadingBoxEl);\n                }\n            });\n        \n        dispatchCustomEvent( self.formEl, customEvents.init, retrieveSurvey );\n    }\n\n    destroy(){\n        destroy(this.formEl);\n        super.destroy();\n    }\n    \n    static addLanguage( langString, langObject ){\n        const langValue = langString.toLowerCase();\n        Survey.prototype.messages[langValue] = mergeObjects({}, Survey.prototype.messages[langValue], langObject);\n    }\n\n    static setOptions( optionsObj ){\n        Survey.prototype.options = mergeObjects({}, Survey.prototype.options, optionsObj);\n    }\n\n}\n\nSurvey.prototype.isInitialized = false;\nSurvey.prototype.messages = messages;\nSurvey.prototype.options = options;\nSurvey.prototype.version = version;\n\nexport default Survey;\n"],"names":["ajaxCall","timeoutTimer","url","location","href","options","headers","Headers","timeout","controller","AbortController","signal","window","setTimeout","abort","fetch","then","response","ok","json","Promise","reject","error","clearTimeout","customEvents","init","deepFreeze","obj","Object","getOwnPropertyNames","forEach","name","prop","_typeof","freeze","isPlainObject","object","prototype","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","data","eventOptions","bubbles","eventObj","Event","dispatchEvent","fieldsStringSelectorSurvey","isEmptyObject","length","isFieldForChangeEvent","fieldEl","matches","replaceObjectKeysInString","stringHTML","reduce","accString","regexStr","RegExp","replace","sortList","list","sort","a","b","toKebabCase","string","useAllCaps","newString","trim","match","p1","p2","p3","p4","p5","p6","toLowerCase","toUpperCase","webStorage","isAvailable","mod","localStorage","setItem","removeItem","e","checkLocalStorage","Storage","setObject","value","JSON","stringify","getObject","this","getItem","parse","messages","it","loadingBox","maxChoice","fieldErrorMessage","fieldErrorMessageMultiChoice","en","getQuestionObject","questionId","questions","qLength","q","question","id","defaultCallbacksInOptions","formOptions","beforeSend","isHacking","instance","surveyContEl","formEl","closest","fieldsList","querySelectorAll","fieldNameCheck","fieldTypeCheck","type","questionEl","getAttribute","questionObj","required","isRequiredFrom","reqMoreEl","document","querySelector","checked","fieldOptions","focusOnRelated","validateForm","formRes","stopExecution","getFormData","formjs","answers","qaObj","answer","checkedEl","questionContainer","related","el","cssClasses","checkbox","file","label","radio","wrapper","fieldErrorFeedback","initAjaxOptions","cache","credentials","method","mode","redirect","lang","templates","fieldError","input","select","textarea","nested","useWebStorage","internals","storageArray","storageName","getAnswerIndexInWebStorage","fieldName","multiChoiceValue","wsSurvey","sessionStorage","wsSurveyLength","ws","lsItem","field","callbackFns","submit","event","self","target","validation","containerEl","fieldValue","isMultiChoice","isRequireMore","itemEl","split","isFieldForChangeEventBoolean","inArrayPos","inArrayRequireMorePos","splice","oldFieldNamePos","elReqFromEl","generateOptionTags","optionsList","optionsHTML","opt","getAttributesStringHTML","answerObj","answerCode","isRequired","excludedAttrs","test","indexOf","getTemplates","answerType","generateAnswers","answersList","extraData","allAnswersHTML","previousType","index","answerHTML","checks","surveyId","answerData","questionNumber","wrapperClasses","fieldAttributes","fieldClasses","addMoreName","labelString","labelClasses","relatedFieldHTML","relatedType","relatedIsSelect","relatedObj","requiredFrom","answerDataRelated","optionsHtml","answerTypeForTemplate","nestedFieldsHTML","generateQAcode","surveyData","questionsList","qaDataLength","qaCodeAll","i","qaHtml","answersHTML","external","externalCont","setAttribute","bindAnswerEl","fieldProps","answerCont","innerHTML","checksMin","checksMax","maxChoiceText","questionData","questionText","fieldErrorTemplate","errorMessage","populateAnswers","WS","item","fieldFirst","isRadioOrCheckbox","buildSurvey","formName","qaHtmlAll","insertAdjacentHTML","destroy","validateOnEvents","useCapturing","removeEventListener","version","Survey","optionsObj","Error","customLang","langValue","addEventListener","retrieveSurvey","status","resolve","isInitialized","classList","add","loadingBoxEl","parentNode","removeChild","langString","langObject","Form"],"mappings":"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"}