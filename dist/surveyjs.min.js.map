{"version":3,"file":"surveyjs.min.js","sources":["../src/modules/helpers/ajaxCall.js","../src/modules/helpers/appendDomStringToNode.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/deepFreeze.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelectorSurvey.js","../src/modules/helpers/isEmptyObject.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/webStorage.js","../src/modules/messages.js","../src/modules/utils/getQuestionObject.js","../src/modules/optionsUtils.js","../src/modules/options.js","../src/modules/internals.js","../src/modules/utils/getAnswerIndexInLocalStorage.js","../src/modules/listenerCallbacks.js","../src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/generateOptionTags.js","../src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/attribute.js","../src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/input.js","../src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/nested.js","../src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/select.js","../src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/textarea.js","../src/modules/buildSurvey/generateQAcodeUtils/generateFieldHTML.js","../src/modules/buildSurvey/generateQAcodeUtils/replaceTemplateStrings.js","../src/modules/buildSurvey/generateQAcodeUtils/iterateAnswers.js","../src/modules/buildSurvey/generateQAcode.js","../src/modules/buildSurvey/populateAnswers.js","../src/modules/buildSurvey/buildSurvey.js","../src/modules/destroy.js","../src/index.js"],"sourcesContent":["\nexport const ajaxCall = ( url = location.href, options = {} ) => {\n\n    let timeoutTimer;\n\n    options.headers = new Headers( options.headers );\n\n    /* SET AbortController FOR timeout */\n    if ( options.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        options.signal = signal;\n\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, options.timeout);\n    }\n\n    return fetch( url, options )\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n        });\n        \n}\n","\nexport const appendDomStringToNode = ( HTMLstring, parentNode ) => {\n\n    const tmpEl = document.createElement('div');\n    tmpEl.innerHTML = HTMLstring;\n    Array.from( tmpEl.childNodes ).forEach((elem) => {\n        parentNode.appendChild( elem );\n    });\n\n}\n","\nexport const customEvents = {\n    init: 'sjs:init'\n}\n","\nexport const deepFreeze = obj => {\n\n    Object.getOwnPropertyNames(obj).forEach(name => {\n        const prop = obj[name];\n        if( typeof prop === 'object' && prop !== null ){\n            deepFreeze(prop);\n        }\n    });\n    return Object.freeze(obj);\n    \n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelectorSurvey = '[data-surveyjs-form] input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]), [data-surveyjs-form] select, [data-surveyjs-form] textarea, [data-name=\"bind-surveyjs-answer\"]'\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const isEmptyObject = object => {\n    return isPlainObject(object) && Object.getOwnPropertyNames(object).length === 0;\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nexport const webStorage = () => {\n\n    const checkLocalStorage = () => {\n        const mod = 'check_storage';\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    const isAvailable = checkLocalStorage();\n\n    if( isAvailable ){\n        // setObject METHOD FOR HTML STORAGE -> EG: localStorage.setObject( name, JSobj )\n        // TO STORE A JS OBJECT ( AS JSON STRING ) INSIDE THE STORAGE\n        Storage.prototype.setObject = function( key, value ) {\n            this.setItem( key, JSON.stringify(value) );\n        }\n\n        // getObject METHOD FOR HTML STORAGE -> EG: localStorage.getObject( name )\n        // RETURN THE DATA ( STORED AS JSON STRING ) AS JS OBJECT\n        Storage.prototype.getObject = function( key ) {\n            const value = this.getItem( key );\n            return value && JSON.parse( value );\n        }\n    }\n\n    return {\n        isAvailable: isAvailable\n    }\n\n}\n","\nexport const messages = {\n    it: {\n        loadingBox:         '<div class=\"surveyjs-loading\" data-surveyjs-loading><i class=\"glyphicon glyphicon-refresh icon-spin\"></i> Caricamento in corso...</div>',\n        selectFirstOption:  'Seleziona una risposta...',\n        textareaPlaceholder:'Scrivi la tua risposta...',\n        maxChoiceText:      'RISPOSTE MAX',\n        fieldErrorMessage:  '&Egrave; necessario rispondere.',\n        fieldErrorMessageMultiChoice:  'Puoi scegliere da {{checksMin}} a {{checksMax}} risposte.'\n    },\n    en: {\n        loadingBox:         '<div class=\"surveyjs-loading\" data-surveyjs-loading><i class=\"glyphicon glyphicon-refresh icon-spin\"></i> Loading...</div>',\n        selectFirstOption:  'Select your answer...',\n        textareaPlaceholder:'Write here your answer...',\n        maxChoiceText:      'ANSWERS MAX',\n        fieldErrorMessage:  'Answer is necessary.',\n        fieldErrorMessageMultiChoice:  'You can choose from {{checksMin}} to {{checksMax}} answers.'\n    }\n}\n","\nexport const getQuestionObject = ( data, questionId ) => {\n\n    const questions = data.questions,\n          qLength = questions.length;\n\n    let obj = {};\n    \n    for(let q=0; q<qLength; q++){\n        const question = questions[q];\n        if( question.id == questionId ){\n            obj = question;\n            break;\n        }\n    }\n\n    return obj;\n\n}","\nimport { fieldsStringSelectorSurvey, isEmptyObject, mergeObjects } from './helpers';\nimport { getQuestionObject } from './utils/getQuestionObject';\n\nexport const defaultCallbacksInOptions = {\n    formOptions: {\n\n        beforeSend: function beforeSend_surveyDefault( data ){\n            let isHacking = false;\n            const instance = this;\n            const surveyContEl = instance.formEl.closest('[data-surveyjs-container]');\n            const fieldsList = Array.from( surveyContEl.querySelectorAll(fieldsStringSelectorSurvey) );\n\n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                \n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                const questionIdEl = fieldEl.closest('[data-question-id]');\n                const questionId = questionIdEl ? questionIdEl.getAttribute('data-question-id') : '';\n                const questionObj = getQuestionObject( instance.data, questionId );\n\n                // BASED ON SURVEY JSON FILE, FORCE REQUIRED FIELDS TO BE VALIDATED\n                // THIS AVOIDS USERS TO HACK THE SURVEY, FOR EXAMPLE REMOVING required ATTRIBUTE FROM THE HTML\n                if( questionId !== '' && questionObj && typeof questionObj.required !== 'undefined' ){\n\n                    const isRequiredFrom = fieldEl.matches('[data-required-from]');\n                    const reqMoreEl = document.querySelector(fieldEl.getAttribute('data-required-from'));\n                    if( !isRequiredFrom || ( isRequiredFrom && reqMoreEl.checked ) ){\n                        if( !fieldEl.required ){\n                            // FIELD IS NOT REQUIRED BUT IT SHOULD => USER HACKED FIELD\n                            isHacking = true;\n                        }\n                        fieldEl.required = true;\n                    }\n                    \n                }\n\n            });\n\n            if( isHacking ){\n                // USER IS HACKING FORM ( REMOVING ATTRIBUTE required FROM A FIELD )\n                // => FORCE VALIDATION TO SHOW ERROR AND STOP SUBMIT\n                const fieldOptions = mergeObjects({}, instance.options.fieldOptions, {focusOnRelated: false});\n                return instance.validateForm( fieldOptions )\n                    .then(formRes => {\n                        data.stopExecution = true;\n                        return data;\n                    });\n            }\n            return data;\n        },\n\n        getFormData: function getFormData_surveyDefault(){\n            const formEl = this.formEl;\n            const instance = formEl.formjs;\n            const fieldsList = Array.from( formEl.closest('[data-surveyjs-container]').querySelectorAll(fieldsStringSelectorSurvey) );\n            const obj = {\n                    answers: [],\n                    id: instance.data.id\n                };\n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                // EACH QUESTION HAS ITS OWN OBJECT ( qaObj ) THAT CONTAINS THE RELATED DATA:\n                // question:    THE QUESTION ID ( undefined FOR QUESTIONS WITH ATTRIBUTE data-required-form - will be skipped later )\n                // answer       AN OBJECT THAT CONTAINS THE FOLLOWS:\n                //                  id_answer:      THE ANSWER ID\n                //                  text:           IF THE FIELD IS A TEXTAREA\n                //                  attributes:     IF THE ANSWER IS NESTED OR IS REQUIRED FROM ANOTHER ANSWER (SEE BELOW)\n                const questionIdEl = fieldEl.closest('[data-question-id]'),\n                      questionId = questionIdEl ? questionIdEl.getAttribute('data-question-id') : '',\n                      fieldValue = fieldEl.value,\n                      qaObj = {\n                        question: questionId,\n                        answer: {\n                            id_answer: [ fieldValue ]\n                        }\n                    };\n\n                // A FIELD WITH ATTRIBUTE 'data-required-from' IS MANAGED TOGETHER WITH ITS RELATED FIELD ( WHICH HAS ATTRIBUTE 'data-require-more' )\n                // IF QUESTION ID IS EMPTY -> SKIP THE FIELD ( USEFUL FOR FORM FIELDS OUTSIDE THE SURVEY BODY )\n                if( fieldEl.matches('[data-required-from]') || questionId === '' || isEmptyObject(getQuestionObject( instance.data, questionId )) ){ return; }\n                                    \n                if( fieldEl.matches('textarea') ){\n                    qaObj.answer.id_answer = [ '' ];\n                    qaObj.answer.text = fieldValue;\n                }\n\n                if( type === 'radio' ){\n                    const containerEl = (fieldEl.closest('form') ? formEl : fieldEl.closest('[data-formjs-question]') ),\n                          elem = containerEl.querySelector('[name=\"'+ name +'\"]:checked');\n                    \n                    if( elem ){\n                        // FOR RADIO THAT REQUIRE THE USER TO GIVE ONE MORE ANSWER\n                        if( elem.matches('[data-require-more]') ){\n                            qaObj.answer.attributes = formEl.querySelector('[data-required-from=\"#'+ elem.id +'\"]').value.trim();\n                        }\n                        \n                        if( elem.matches('[data-nested-index]') ){\n                            qaObj.answer.attributes = elem.getAttribute('data-nested-index');\n                        }\n                        \n                        qaObj.answer.id_answer = [ elem.value.trim() ];\n                    } else {\n                        qaObj.answer.id_answer = [ '' ];\n                    }\n                }\n\n                if( type === 'checkbox' && fieldEl.matches('[data-checks]') ){\n                    qaObj.answer.id_answer = [];\n                    Array.from(formEl.querySelectorAll('[name=\"'+ name +'\"]:checked')).forEach(el => {\n                        qaObj.answer.id_answer.push( el.value.trim() );\n                    });\n                }\n                \n                obj.answers.push( qaObj );\n            });\n        \n            return obj;\n        }\n    \n    }\n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n    cssClasses: {\n        checkbox:           'form-check-input',\n        default:            'form-control',\n        file:               'form-control-file',\n        label:              'form-check-label',\n        radio:              'form-check-input',\n        select:             'form-control',\n        textarea:           'form-control'\n    },\n    fieldErrorFeedback:     true,\n    formOptions: {\n        beforeSend:         [defaultCallbacksInOptions.formOptions.beforeSend],\n        getFormData:        defaultCallbacksInOptions.formOptions.getFormData\n    },\n    initAjaxOptions:        {\n        cache:              'no-store',\n        credentials:        'same-origin',\n        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept':       'application/json'\n        },\n        method:             'GET',\n        mode:               'same-origin',\n        redirect:           'follow',\n        timeout:            0\n    },\n    lang:                   'en',\n    templates: {\n        fieldError: '<div class=\"surveyjs-field-error-message\">{{fieldErrorMessage}}</div>',\n\n        input:      '<div class=\"surveyjs-single-answer surveyjs-input-container surveyjs-answer-{{answerType}} form-check\" data-answer-index=\"{{answerIndex}}\">'+\n                        '{{inputTagCode}}'+\n                        '{{labelTagCode}}'+\n                    '</div>',\n\n        inputGroup: '<div class=\"surveyjs-single-answer input-group\" data-answer-index=\"{{answerIndex}}\">'+\n                        '<div class=\"input-group-prepend\">'+\n                            '<div class=\"input-group-text form-check surveyjs-answer-{{answerType}}\">'+\n                                '<input type=\"{{answerType}}\" name=\"surveyjs-answer-{{questionNumber}}\" id=\"{{answerCode}}\" data-answer-id=\"{{answerId}}\" value=\"{{answerIdValue}}\" {{attrRequired}} data-require-more=\"\" class=\"surveyjs-input surveyjs-radio form-check-input\" />'+\n                                '<label for=\"{{answerCode}}\" class=\"surveyjs-label form-check-label\">{{answerString}}</label>'+\n                            '</div>'+\n                        '</div>'+\n                        '{{relatedAnswerField}}'+\n                    '</div>',\n        \n        inputTag:   '<input type=\"{{answerType}}\" {{attrSubtype}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-input surveyjs-{{answerType}} {{fieldClass}}\" id=\"{{answerCode}}\" {{nestedAnswer}} data-answer-root=\"{{progIdsJoined}}\" data-answer-id=\"{{answerId}}\" value=\"{{answerIdValue}}\" {{attrRequired}} {{validateIfFilled}} {{attrChecks}} {{attrRequiredFrom}} />',\n\n        labelTag:   '<label for=\"{{answerCode}}\" class=\"surveyjs-label {{labelClass}}\">{{answerString}}</label>',\n\n        question:   '<div data-question-id=\"{{questionId}}\" data-question-index=\"{{questionNumber}}\" data-formjs-question class=\"surveyjs-question-box clearfix\">'+\n                        '<div class=\"surveyjs-question-header\">Question {{questionNumber}}</div>'+\n                        '<div class=\"surveyjs-question-body\">'+\n                            '<div class=\"surveyjs-question-text\">{{questionText}}</div>'+\n                            '<div class=\"surveyjs-answers-box form-group clearfix\">'+\n                                '{{answersHtml}}'+\n                                '{{fieldErrorTemplate}}'+\n                            '</div>'+\n                        '</div>'+\n                    '</div>',\n\n        select:     '<div class=\"surveyjs-single-answer surveyjs-answer-select\" data-answer-index=\"{{answerIndex}}\">'+\n                        '{{selectTagCode}}'+\n                    '</div>',\n\n        selectTag:  '<select id=\"{{answerCode}}\" name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-select {{fieldClass}}\" {{attrRequired}} {{nestedAnswer}} data-answer-root=\"{{progIdsJoined}}\" {{attrRequiredFrom}}>'+\n                        '{{optionsHtml}}'+\n                    '</select>',\n\n        textarea:   '<div class=\"surveyjs-single-answer surveyjs-answer-textarea\">'+\n                        '<textarea id=\"{{answerCode}}\" data-answer-id=\"{{answerId}}\" {{nestedAnswer}} name=\"surveyjs-answer-{{questionNumber}}\" {{attrRequired}} class=\"surveyjs-textarea {{fieldClass}}\" {{answerMaxlength}} rows=\"6\" placeholder=\"{{answerPlaceholder}}\"></textarea>'+\n                    '</div>'\n    },\n    useLocalStorage:        true\n}\n","\nexport const internals = {\n    storageArray: [],\n    storageName: 'Survey_' + location.href + '_{{surveyFormName}}_surveyId[{{surveyId}}]'\n}\n","\nexport const getAnswerIndexInLocalStorage = ( internals, fieldName, multiChoiceValue = '' ) => {\n\n    const lsSurvey = localStorage.getObject( internals.storageName );\n            \n    if( lsSurvey ){\n        const lsSurveyLength = lsSurvey.length;\n        \n        for(let ls=0; ls<lsSurveyLength; ls++){\n            const lsItem = lsSurvey[ls];\n\n            if( lsItem.field === fieldName ){\n                if( multiChoiceValue ){\n                    if( lsItem.value !== multiChoiceValue ){\n                        continue;\n                    }\n                }\n                return ls;\n            }\n        }\n    }\n    \n    return -1;\n\n}","\nimport { isEmptyObject, isFieldForChangeEvent } from './helpers';\nimport { getAnswerIndexInLocalStorage }         from './utils/getAnswerIndexInLocalStorage';\nimport { getQuestionObject }                    from './utils/getQuestionObject';\n\nexport const callbackFns = {\n\n    // THIS WILL RUN BEFORE FORMJS VALIDATION FUNCTION SO THAT USERS CANNOT SKIP REQUIRED FIELDS VALIDATION ( WHILE TYPING )\n    validation: function( event ){\n\n        const eventName = event.type,\n              fieldEl = event.target,\n              self = fieldEl.closest('form').formjs,\n              internals = self.internals,\n              containerEl = fieldEl.closest('[data-formjs-question]'),\n              fieldValue = fieldEl.value ? fieldEl.value.trim() : fieldEl.value,\n              isMultiChoice = fieldEl.matches('[data-checks]'),\n              isRequireMore = fieldEl.matches('[data-require-more]'),\n              isRequiredFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = isRequiredFrom ? containerEl.querySelector(fieldEl.getAttribute('data-required-from')) : null;\n\n        // VARS USED TO VALIDATE THE FILED IF IT IS REQUIRED\n        const itemEl = isRequiredFrom ? reqMoreEl : fieldEl,\n              questionId = itemEl.id ? itemEl.id.split('-')[1] : 'id-not-found',\n              isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl),\n              questionObj = getQuestionObject(self.data, questionId);\n\n        // IF IT'S NOT A SURVEY QUESTION -> SKIP\n        if( isEmptyObject(questionObj) ){ return true; }\n\n        if(\n            (isFieldForChangeEventBoolean && eventName === 'change') ||\n            (!isFieldForChangeEventBoolean && eventName !== 'change')\n        ){\n            \n            // MANAGE ITEMS IN LOCAL STORAGE ( IF AVAILABLE AND USABLE )\n            if( self.options.useLocalStorage && !fieldEl.matches('[data-exclude-storage]') ){\n                const inArrayPos = getAnswerIndexInLocalStorage( internals, fieldEl.name, (isMultiChoice ? fieldValue : false) ),\n                    inArrayRequireMorePos = getAnswerIndexInLocalStorage( internals, fieldEl.name + '-more' );\n\n                let storageArray = internals.storageArray;\n\n                if( !isRequireMore && !isRequiredFrom && inArrayRequireMorePos !== -1 ){\n                    storageArray.splice(inArrayRequireMorePos, 1);\n                }\n\n                if( inArrayPos !== -1 ){\n                    if( isMultiChoice ){\n                        if( !fieldEl.checked && storageArray[inArrayPos].value === fieldValue ){\n                            // REMOVE ITEM FROM LS\n                            storageArray.splice(inArrayPos, 1);\n                        } else {\n                            // ADD ITEM TO LS\n                            storageArray.push( { field: fieldEl.name, value: fieldValue } );\n                        }\n                    } else {\n                        if( fieldValue !== '' ){\n                            storageArray[inArrayPos].value = fieldValue;\n                        } else {\n                            storageArray.splice(inArrayPos, 1); \n                        }\n                    }\n                } else {\n                    if( fieldValue !== '' ){\n                        if( isRequiredFrom && fieldValue !== '' ){\n                            const oldFieldNamePos = getAnswerIndexInLocalStorage( internals, reqMoreEl.name );\n\n                            if( oldFieldNamePos !== -1 ){\n                                storageArray.splice(oldFieldNamePos, 1);\n                            }\n                            storageArray.push( { field: reqMoreEl.name, value: reqMoreEl.value.trim() } );\n                        }\n                        storageArray.push( { field: fieldEl.name, value: fieldValue } );\n                        if( isRequireMore ){\n                            const elReqFromEl = fieldEl.closest('form').querySelector( '[data-required-from=\"#' + fieldEl.id + '\"]' );\n                            storageArray.push( { field: elReqFromEl.name, value: elReqFromEl.value.trim() } );\n                        }\n                    }\n                }\n\n                localStorage.setObject( internals.storageName, storageArray );\n            }\n\n            // BASED ON JSON DATA, FORCE REQUIRED FIELDS TO BE VALIDATED\n            if( typeof questionObj.required !== 'undefined' ){\n                fieldEl.required = true;\n            }\n\n        }\n        \n    }\n\n}\n","\nexport const generateOptionTags = ( optionsList = [], options ) => {\n\n    let optionsHtml = optionsList[0].id === '' ? '' : '<option value=\"\">'+ options.selectFirstOption +'</option>';\n\n    optionsList.forEach(opt => {\n        optionsHtml += '<option value=\"'+ opt.id +'\" data-answer-id=\"'+ opt.id +'\">'+ opt.answer +'</option>';\n    });\n\n    return optionsHtml;\n\n}","\nimport { generateOptionTags } from './generateOptionTags';\n\n// RELATED ANSWER\n// IF AN ANSWER REQUIRE TO FILL OR SELECT ANOTHER RELATED ANSWER\nexport const attribute = ( options, data ) => {\n\n    const objData = data.objData,\n          aHtml = options.templates.inputGroup,\n          attr = data.answer.attribute,\n          attributeIsArray = Array.isArray(attr),\n          relatedAnswerField = attributeIsArray ? options.templates.selectTag : options.templates.inputTag;\n    \n    objData.fieldClass = options.cssClasses.default;\n    \n    if( attributeIsArray ){\n        // CREATE A GROUP WITH A RADIO INPUT AND ITS RELATED ANSWER (A SELECT FIELD)\n        objData.fieldClass = options.cssClasses.select;\n        objData.optionsHtml = generateOptionTags(attr, options);\n    }\n\n    return { aHtml, relatedAnswerField, objData };\n}\n","\nexport const input = ( options, data ) => {\n\n    const objData = data.objData,\n          aHtml = data.beforeCode + options.templates.input + data.afterCode;\n\n    if( objData.answerType !== 'checkbox' && objData.answerType !== 'radio' ){\n        // EVERY INPUT FIELD THAT IS NOT A CHECKBOX OR RADIO ( TEXT, EMAIL, NUMBER, PASSWORD, RANGE AND SO ON... )\n        objData.nestedAnswer += ' class=\"' + objData.fieldClass + '\"';\n    }\n    \n    return { aHtml, objData };\n}\n","\n// NESTED ANSWER -> IT IS A CHILD ANSWER OF ITS PARENT\n// EXAMPLE:\n// IF 'WEBSITE' IS THE PARENT ANSWER\n// IT CAN HAVE THESE CHILDREN ANSWERS: PC - SMARTPHONE - TABLET\n// SO THE PARENT ANSWER IS PRINTED AS TEXT ( WITHOUT THE INPUT FIELD ) AND ITS nested ANSWERS WILL BE LOOPED\nexport const nested = ( options, data ) => {\n\n    const objData = data.objData;\n\n    let labelForNested = options.templates.labelTag;\n    labelForNested = labelForNested.replace(/{{answerCode}}/g, objData.answerCode);\n    labelForNested = labelForNested.replace(/{{labelClass}}/g, options.cssClasses.label + ' surveyjs-field-indent-0');\n    labelForNested = labelForNested.replace(/{{answerString}}/g, data.answer.answer);\n\n    const aHtml = data.beforeCode + '<div class=\"surveyjs-'+ objData.answerType +'\">' + labelForNested + '</div>' + data.afterCode;\n\n    return { aHtml, objData };\n}\n","\nimport { generateOptionTags } from './generateOptionTags';\n\nexport const select = ( options, data ) => {\n\n    const objData = data.objData,\n          aHtml = data.beforeCode + options.templates.select + data.afterCode;\n    \n    objData.optionsHtml = generateOptionTags( data.obj.answers, options );\n\n    return { aHtml, objData };\n}\n","\nexport const textarea = ( options, data ) => {\n\n    const objData = data.objData,\n          aHtml = options.templates.textarea;\n\n    objData.answerPlaceholder = data.answer.placeholder || options.textareaPlaceholder;\n\n    return { aHtml, objData };\n}\n","\nimport { attribute }    from './fieldsHTML/attribute';\nimport { input }        from './fieldsHTML/input';\nimport { nested }       from './fieldsHTML/nested';\nimport { select }       from './fieldsHTML/select';\nimport { textarea }     from './fieldsHTML/textarea';\n\nexport const generateFieldHTML = {\n        attribute, input, nested, select, textarea\n}\n","\nexport const replaceTemplateStrings = ( options, fieldData, objData ) => {\n\n    if( objData.optionsHtml !== '' ){\n        fieldData.aHtml = fieldData.aHtml.replace( /{{selectTagCode}}/g, options.templates.selectTag );\n    }\n\n    if( fieldData.relatedAnswerField ){\n        const relatedAnswerKeys = {\n              answerCode: '', answerType: 'text', fieldClass: objData.fieldClass,\n              answerIdValue: '', attrRequired: '', addMoreName: '-more',\n              attrRequiredFrom: 'data-required-from=\"#'+ objData.answerCode +'\"'\n            };\n            \n        for(let reKey in relatedAnswerKeys){\n            const regexStrRe = new RegExp( '{{' + reKey + '}}', 'g' );\n            fieldData.relatedAnswerField = fieldData.relatedAnswerField.replace( regexStrRe, relatedAnswerKeys[reKey] );    \n        }\n        \n        fieldData.aHtml = fieldData.aHtml.replace( /{{relatedAnswerField}}/g, fieldData.relatedAnswerField );\n    } else {\n        fieldData.aHtml = fieldData.aHtml.replace( /{{addMoreName}}/g, '' );\n        fieldData.aHtml = fieldData.aHtml.replace( /{{attrRequiredFrom}}/g, '' );\n    }\n    \n    for( let key in objData ){\n        const regexStr = new RegExp( '{{' + key + '}}', 'g' );\n        fieldData.aHtml = fieldData.aHtml.replace( regexStr, objData[key] );\n    }\n\n    return fieldData.aHtml;\n\n}","\nimport { generateFieldHTML } from './generateFieldHTML';\nimport { replaceTemplateStrings } from './replaceTemplateStrings';\n\nlet progIds = [];\n\nexport const iterateAnswers = ( formEl, options, obj, qID, qIdx, attrReq ) => {\n\n    // obj          MUST BE AN ARRAY OF STRINGS OR AN OBJECT THAT CONTAINS 'answers' AS ARRAY (THE FUNCTION iterateAnswers LOOPS UNTIL A STRING IS FOUND, AND PRINTS IT)\n    // qIdx         INDEX OF THE QUESTION\n    // attrReq      HTML REQUIRED ATTRIBUTE THAT WILL BE PRINTED (THIS PARAMETER MUST NOT BE PASSED INITIALLY. IT IS AUTOMATICALLY PASSED INSIDE THE LOOP IF NECESSARY)\n    // aLoopHtml    THE CODE OF ALL ANSWERS ( PRINTED ONLY AT THE END )\n\n    qID = obj.id ? obj.id : (qID || 0);\n\n    let list = Array.isArray(obj) ? obj : obj.answers,\n        listL = list.length,\n        i = qIdx || 0,\n        aLoopHtml = '';\n    \n    const needsBinding = obj.question === 'hidden-privacy' ? true : false;\n\n    if( list[0]['sort'] ){\n        list.sort((a, b) => {\n            return a['sort'] > b['sort'];\n        });\n    }\n\n    for(let a=0; a<listL; a++){\n\n        let answer = list[a],\n            aNum = a + 1,\n            qNum = i + 1,\n            aType = answer.type,\n            aId = answer.id,\n            progIdsLength = progIds.length,\n            progIdsJoined = progIdsLength > 0 ? progIds.join('-') : '',\n            getSettingsFieldClass = () => {\n                let aType = answer.type === 'option' ? 'select' : answer.type;\n                return options.cssClasses[aType] || options.cssClasses.default;\n            };\n\n        let fieldData = { aHtml: '' };\n        \n        // ALL THESE OBJECT KEYS WILL REPLACE {{key}} WITH objData.KEY IN HTML STRING\n        let objData = {\n            // answerId         ANSWER ID AS FROM THE JSON. THIS IS USED AS VALUE ATTRIBUTE OF THE ANSWER\n            // answerType       ANSWER TYPE AS FROM THE JSON. USED TO CHECK WHICH FIELD MUST BE CREATED ( EG: text, radio, checkbox, select, textarea )\n            // nestedAnswer     CREATES THE data-nested-index ATTRIBUTE TO PRINT IF AN ANSWER IS NESTED ( SEE BELOW FOR NESTED ANSWERS )\n            // answerCode       ID ATTRIBUTE OF THE ANSWER\n            //                  ( BUILT AS: \"answerType-questionID-answerID-questionNumber[-nestingLevels]-answerNumber\" )\n            //                  ONLY AN ATTRIBUTE-ANSWER DOES NOT USE THE answerCode\n                labelTagCode: aType === 'checkbox' || aType === 'radio' ? options.templates.labelTag : '',\n                answerId: aId,\n                answerIdValue: aType === 'text' ? '' : aId,\n                answerIndex: aNum,\n                answerName: 'surveyjs-answer-'+qNum,\n                answerPlaceholder: '',\n                answerMaxlength: answer.maxlength ? 'maxlength=\"' + answer.maxlength + '\"' : '',\n                answerString: typeof answer.answer === 'string' ? answer.answer : '',\n                answerType: aType,\n                attrRequired: typeof obj.required !== 'undefined' ? 'required' : (typeof attrReq !== 'undefined' ? attrReq : ''),\n                fieldClass: getSettingsFieldClass(),\n                nestedAnswer: progIdsJoined !== '' ? 'data-nested-index=\"'+ aNum +'\"' : '' ,\n                optionsHtml: '',\n                progIdsJoined: progIdsJoined,\n                questionNumber: qNum,\n                answerCode: (aType === 'option' ? 'select' : aType) +'-' + qID +'-'+ (aId || 0) + '-' + qNum + (progIdsJoined !== '' ? '-'+progIdsJoined : '') +'-'+ aNum,\n                attrChecks: obj.checks ? 'data-checks=\"' + obj.checks + '\"' : '',\n                attrSubtype: answer.subtype ? 'data-subtype=\"' + answer.subtype + '\"' : '',\n                validateIfFilled: typeof obj.validateIfFilled !== 'undefined' ? 'data-validate-if-filled' : ''\n            };\n        \n        if( needsBinding ){\n            \n            const boundedFieldEl = formEl.closest('[data-surveyjs-container]').querySelectorAll('[data-name=\"bind-surveyjs-answer\"]')[a],\n                fieldProps = {\n                    id: objData.answerCode,\n                    name: objData.answerName,\n                    type: aType,\n                    value: objData.answerId\n                };\n            \n            if( typeof obj.required !== 'undefined' ){ fieldProps.required = true; }\n            \n            for(let key in fieldProps){\n                boundedFieldEl[key] = fieldProps[key];\n            }\n            boundedFieldEl.setAttribute('data-answer-id', objData.answerId);\n            boundedFieldEl.closest('div').querySelector('label').setAttribute('for', objData.answerCode);\n            boundedFieldEl.closest('div').querySelector('label span').textContent = answer.answer;\n            \n            continue;\n            \n        }\n        \n        if( typeof answer.answer === 'string' || typeof answer.answer === 'number' ){\n\n                // beforeCode       MANAGE FIELD INDENT ( FOR NESTED ANSWERS - SEE BELOW )\n                // afterCode        MANAGE FIELD INDENT ( FOR NESTED ANSWERS - SEE BELOW )\n                let surveyFieldType = ( answer.attribute ? 'attribute' : (answer.nested ? 'nested' : ( aType === 'option' ? 'select' : aType )) ),\n                      beforeCode = progIdsLength > 0 && a === 0 ? '<div class=\"surveyjs-field-indent\">' : '',\n                      afterCode = progIdsLength > 0 && a === listL - 1 ? '</div>' : '',\n                      data = { answer, objData, beforeCode, afterCode, obj };\n\n                if( typeof generateFieldHTML[surveyFieldType] === 'undefined' ){\n                    surveyFieldType = 'input';\n                }\n\n                // GENERATE FIELD HTML CODE FROM surveyFieldType\n                fieldData = generateFieldHTML[surveyFieldType]( options, data );\n                \n                objData = fieldData.objData;\n\n                if( answer.nested ){\n                    progIds.push( aNum );\n                    aLoopHtml += fieldData.aHtml;\n                    aLoopHtml += iterateAnswers(formEl, options, answer.nested, qID, i, objData.attrRequired);\n                    continue;\n                }\n\n                // IF LOOPING A NESTED ANSWER AND THE END OF THAT ARRAY IS REACHED\n                // REMOVE THE LAST ITEM OF progIds ( SO AT THE NEXT LOOP IT WILL NOT INDENT THE ANSWER )\n                if( progIdsLength > 0 && a === listL-1 ){ progIds.pop(); }\n\n        }\n\n        fieldData.aHtml = replaceTemplateStrings(options, fieldData, objData);\n        aLoopHtml += fieldData.aHtml;\n        \n        if( aType === 'option' ){\n            a = a + obj.answers.length;\n        }\n        \n    }\n\n    return aLoopHtml;\n\n}\n","\nimport { iterateAnswers } from './generateQAcodeUtils/iterateAnswers';\n\nexport const generateQAcode = ( formEl, options, questionsList = [] ) => {\n\n    const qaData = questionsList[0]['sort'] ? questionsList.sort((a, b) => { return a['sort'] > b['sort']; }) : questionsList,\n          qaDataLength = qaData.length;\n    \n    let qaCodeAll = '';\n    \n    for(let i=0; i<qaDataLength; i++){\n        const item = qaData[i],\n              maxChoice = item.checks ? JSON.parse(item.checks) : '',\n              checksMin = maxChoice.length > 0 ? maxChoice[0] : '',\n              checksMax = maxChoice.length > 0 ? maxChoice[1] : '';\n\n        let aHtml = '',\n            qaHtml = options.templates.question;\n\n        // HTML CODE FOR THE ANSWER/S\n        aHtml += iterateAnswers( formEl, options, item, item.id, i );\n\n        if( item.question === 'hidden-privacy' ){\n            const bindAnswerEl = formEl.closest('[data-surveyjs-container]').querySelector('[data-name=\"bind-surveyjs-answer\"]');\n            if( bindAnswerEl ){\n                bindAnswerEl.closest('[data-formjs-question]').setAttribute('data-question-id', item.id);\n                continue;\n            }\n        }\n\n        // REPLACE QUESTION DATA AND ANSWERS HTML IN LOCAL VARIABLE qaHtml\n        qaHtml = qaHtml.replace( /{{questionId}}/g, item.id );\n        qaHtml = qaHtml.replace( /{{questionNumber}}/g, (i+1) );\n        qaHtml = qaHtml.replace( /{{questionText}}/g, item.question + ( maxChoice !== '' ? ' ('+ checksMax +' '+ options.maxChoiceText +')' : '' ) );\n        qaHtml = qaHtml.replace( /{{answersHtml}}/g, aHtml );\n        qaHtml = qaHtml.replace( /{{fieldErrorTemplate}}/g, ( options.fieldErrorFeedback ? options.templates.fieldError : '' ) );\n        if( options.fieldErrorFeedback && options.templates.fieldError.indexOf('{{fieldErrorMessage}}') !== -1 ){\n            const message = maxChoice !== '' ? options.fieldErrorMessageMultiChoice : options.fieldErrorMessage;\n            qaHtml = qaHtml.replace( /{{fieldErrorMessage}}/g, message ).replace( /{{checksMin}}/g, checksMin ).replace( /{{checksMax}}/g, checksMax );\n        }\n\n        qaCodeAll += qaHtml;\n    }\n    \n    return qaCodeAll;\n\n}\n","\nexport const populateAnswers = ( formEl, internals ) => {\n\n    const LS = localStorage.getObject( internals.storageName );\n    if( LS ){\n        const surveyContEl = formEl.closest('[data-surveyjs-container]');\n        internals.storageArray = LS;\n        LS.forEach(item => {\n            const fieldFirst = surveyContEl.querySelector( '[name=\"' + item.field + '\"]' ),\n                  isRadioOrCheckbox = fieldFirst.matches('[type=\"radio\"], [type=\"checkbox\"]'),\n                  fieldEl = ( isRadioOrCheckbox ? surveyContEl.querySelector( '[name=\"' + item.field + '\"][value=\"' + item.value + '\"]' ) :   fieldFirst );\n            \n            if( isRadioOrCheckbox ){\n                fieldEl.checked = true;\n            } else {\n                fieldEl.value = item.value;\n            }\n        });\n    }\n\n}\n","\nimport { appendDomStringToNode }from '../helpers';\nimport { generateQAcode }       from './generateQAcode';\nimport { populateAnswers }      from './populateAnswers';\n\nexport const buildSurvey = ( formEl, options, internals, data ) => {\n    \n    const self = formEl.formjs,\n          formName = formEl.getAttribute('name') || '';\n    \n    // REPLACE SURVEY ID AND FORM NAME IN LOCALSTORAGE NAME\n    self.internals.storageName = internals.storageName.replace( /{{surveyId}}/g, data.id );\n    self.internals.storageName = internals.storageName.replace( /{{surveyFormName}}/g, formName );\n    \n    // ITERATES THE QUESTIONS ( AND ALSO THEIR ANSWERS )...AND RETURN ALL THE HTML CODE\n    const qaHtmlAll = generateQAcode( formEl, options, data.questions );\n    // PRINT ALL QUESTIONS & ANSWERS\n    appendDomStringToNode( qaHtmlAll, formEl.querySelector('[data-surveyjs-body]') );\n\n    // FILL ANSWERS WITH LOCAL STORAGE ( IF AVAILABLE )\n    if( options.useLocalStorage ){\n        populateAnswers( formEl, self.internals );\n    }\n\n}\n","\nimport { callbackFns } from './listenerCallbacks';\n\nexport const destroy = formEl => {\n\n    formEl.formjs.options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.removeEventListener(eventName, callbackFns.validation, useCapturing);\n    });\n    \n}\n","\nimport { ajaxCall, customEvents, deepFreeze, dispatchCustomEvent, mergeObjects, webStorage } from './modules/helpers';\nimport { messages }             from './modules/messages';\nimport { options }              from './modules/options';\nimport { internals }            from './modules/internals';\nimport { callbackFns }          from './modules/listenerCallbacks';\nimport { buildSurvey }          from './modules/buildSurvey/buildSurvey';\nimport { destroy }              from './modules/destroy';\n\nimport Form from 'formjs-plugin';\n\nimport './index.scss';\n\nconst version = '3.0.0';\n\nclass Survey extends Form {\n\n    constructor( formEl, optionsObj = {} ){\n        if( !optionsObj.url || typeof optionsObj.url !== 'string' ){\n            throw new Error('\"options.url\" is missing or not a string!');\n        }\n\n        // SET THE lang VALUE IN options ( MANDATORY FOR OTHER OPERATIONS )\n        const customLang = typeof optionsObj.lang === 'string' && optionsObj.lang.toLowerCase();\n        const langValue = customLang && Survey.prototype.messages[customLang] ? customLang : Survey.prototype.options.lang;\n        \n        // MERGE OPTIONS AND messages OF THE CHOSEN lang INSIDE options\n        const options = mergeObjects( {}, Survey.prototype.options, Survey.prototype.messages[langValue], optionsObj );\n\n        if( options.templates.input.indexOf('{{inputTagCode}}') !== -1 ){\n            options.templates.input = options.templates.input.replace( /{{inputTagCode}}/g, options.templates.inputTag );\n        }\n\n        options.templates.labelTag = options.templates.labelTag.replace(/{{labelClass}}/g, options.cssClasses.label);\n\n        if( !webStorage().isAvailable ){\n            options.useLocalStorage = false;\n        }\n\n        // CREATE FORM INSTANCE FOR SURVEY\n        super( formEl, options );\n        const self = this;\n        self.internals = internals;\n        self.options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n            const useCapturing = eventName === 'blur' ? true : false;\n            self.formEl.addEventListener(eventName, callbackFns.validation, useCapturing);\n        });\n        self.formEl.addEventListener('fjs.form:submit', event => {\n            event.data.then(() => {\n                if( self.options.useLocalStorage ){\n                    localStorage.removeItem( self.internals.storageName );\n                }\n            });\n        });\n\n        // CREATE SURVEY\n        self.formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforebegin', self.options.loadingBox );\n        const retrieveSurvey = ajaxCall(self.options.url, self.options.initAjaxOptions)\n            .then(response => {\n                if( response.status.toLowerCase() !== 'success' ){\n                    return Promise.reject(response);\n                }\n                return new Promise(resolve => {\n                    if( response.data.questions && response.data.questions.length > 0 ){\n                        buildSurvey(self.formEl, self.options, self.internals, response.data);\n                        super.init().then(() => {\n                            self.isInitialized = true;\n                            self.data = response.data;\n                            deepFreeze(self.data);\n                            self.formEl.closest('[data-surveyjs-container]').classList.add('surveyjs-init-success');\n                            resolve(response);\n                        });\n                    } else {\n                        resolve(response);\n                    }\n                });\n            })\n            .finally(() => {\n                const loadingBoxEl = self.formEl.querySelector('[data-surveyjs-loading]');\n                if( loadingBoxEl ){\n                    loadingBoxEl.parentNode.removeChild(loadingBoxEl);\n                }\n            });\n        \n        dispatchCustomEvent( self.formEl, customEvents.init, retrieveSurvey );\n    }\n\n    destroy(){\n        destroy(this.formEl);\n        super.destroy();\n    }\n    \n    static addLanguage( langString, langObject ){\n        const langValue = langString.toLowerCase();\n        Survey.prototype.messages[langValue] = mergeObjects({}, Survey.prototype.messages[langValue], langObject);\n    }\n\n    static setOptions( optionsObj ){\n        Survey.prototype.options = mergeObjects({}, Survey.prototype.options, optionsObj);\n    }\n\n}\n\nSurvey.prototype.isInitialized = false;\nSurvey.prototype.messages = messages;\nSurvey.prototype.options = options;\nSurvey.prototype.version = version;\n\nexport default Survey;\n"],"names":["ajaxCall","timeoutTimer","url","location","href","options","headers","Headers","timeout","controller","AbortController","signal","window","setTimeout","abort","fetch","then","response","ok","json","Promise","reject","error","clearTimeout","appendDomStringToNode","HTMLstring","parentNode","tmpEl","document","createElement","innerHTML","Array","from","childNodes","forEach","elem","appendChild","customEvents","init","deepFreeze","obj","Object","getOwnPropertyNames","name","prop","_typeof","freeze","isPlainObject","object","prototype","toString","call","mergeObjects","out","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","eventName","data","eventOptions","bubbles","eventObj","Event","dispatchEvent","fieldsStringSelectorSurvey","isEmptyObject","length","isFieldForChangeEvent","fieldEl","matches","webStorage","isAvailable","mod","localStorage","setItem","removeItem","e","checkLocalStorage","Storage","setObject","value","JSON","stringify","getObject","this","getItem","parse","messages","it","loadingBox","selectFirstOption","textareaPlaceholder","maxChoiceText","fieldErrorMessage","fieldErrorMessageMultiChoice","en","getQuestionObject","questionId","questions","qLength","q","question","id","defaultCallbacksInOptions","formOptions","beforeSend","isHacking","instance","surveyContEl","formEl","closest","fieldsList","querySelectorAll","fieldNameCheck","fieldTypeCheck","type","questionIdEl","getAttribute","questionObj","required","isRequiredFrom","reqMoreEl","querySelector","checked","fieldOptions","focusOnRelated","validateForm","formRes","stopExecution","getFormData","formjs","answers","fieldValue","qaObj","answer","id_answer","text","attributes","trim","el","cssClasses","checkbox","file","label","radio","select","textarea","fieldErrorFeedback","initAjaxOptions","cache","credentials","method","mode","redirect","lang","templates","fieldError","input","inputGroup","inputTag","labelTag","selectTag","useLocalStorage","internals","storageArray","storageName","getAnswerIndexInLocalStorage","fieldName","multiChoiceValue","lsSurvey","lsSurveyLength","ls","lsItem","field","callbackFns","validation","event","target","self","containerEl","isMultiChoice","isRequireMore","itemEl","split","isFieldForChangeEventBoolean","inArrayPos","inArrayRequireMorePos","splice","oldFieldNamePos","elReqFromEl","generateOptionTags","optionsList","optionsHtml","opt","attribute","objData","aHtml","attr","attributeIsArray","relatedAnswerField","fieldClass","beforeCode","afterCode","answerType","nestedAnswer","nested","labelForNested","replace","answerCode","answerPlaceholder","placeholder","generateFieldHTML","replaceTemplateStrings","fieldData","relatedAnswerKeys","answerIdValue","attrRequired","addMoreName","attrRequiredFrom","reKey","regexStrRe","RegExp","regexStr","progIds","iterateAnswers","qID","qIdx","attrReq","list","listL","i","aLoopHtml","needsBinding","sort","a","b","aNum","qNum","aType","aId","progIdsLength","progIdsJoined","join","labelTagCode","answerId","answerIndex","answerName","answerMaxlength","maxlength","answerString","getSettingsFieldClass","questionNumber","attrChecks","checks","attrSubtype","subtype","validateIfFilled","boundedFieldEl","fieldProps","setAttribute","textContent","surveyFieldType","pop","generateQAcode","questionsList","qaData","qaDataLength","qaCodeAll","item","maxChoice","checksMin","checksMax","qaHtml","bindAnswerEl","indexOf","message","populateAnswers","LS","fieldFirst","isRadioOrCheckbox","buildSurvey","formName","qaHtmlAll","destroy","validateOnEvents","useCapturing","removeEventListener","version","Survey","optionsObj","Error","customLang","toLowerCase","langValue","addEventListener","insertAdjacentHTML","retrieveSurvey","status","resolve","isInitialized","classList","add","loadingBoxEl","removeChild","langString","langObject","Form"],"mappings":"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"}