{"version":3,"file":"surveyjs-esm.min.js","sources":["../src/modules/helpers/ajaxCall.js","../src/modules/helpers/deepFreeze.js","../src/modules/helpers/fieldsStringSelectorSurvey.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/isEmptyObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/webStorage.js","../src/modules/utils/getQuestionObject.js","../src/modules/optionsUtils.js","../src/modules/options.js","../src/modules/internals.js","../src/modules/utils/getAnswerIndexInLocalStorage.js","../src/modules/listenerCallbacks.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/generateOptionTags.js","../src/modules/buildSurvey/generateQAcodeUtils/generateFieldHTML.js","../src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/attribute.js","../src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/input.js","../src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/nested.js","../src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/select.js","../src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/textarea.js","../src/modules/buildSurvey/generateQAcodeUtils/replaceTemplateStrings.js","../src/modules/buildSurvey/generateQAcodeUtils/iterateAnswers.js","../src/modules/buildSurvey/buildSurvey.js","../src/modules/helpers/appendDomStringToNode.js","../src/modules/buildSurvey/generateQAcode.js","../src/modules/buildSurvey/populateAnswers.js","../src/index.js","../src/modules/destroy.js","../src/modules/messages.js"],"sourcesContent":["\nexport const ajaxCall = ( url = location.href, options = {} ) => {\n\n    let timeoutTimer;\n\n    options.headers = new Headers( options.headers );\n\n    /* SET AbortController FOR timeout */\n    if ( options.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        options.signal = signal;\n\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, options.timeout);\n    }\n\n    return fetch( url, options )\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n        });\n        \n}\n","\nexport const deepFreeze = obj => {\n\n    Object.getOwnPropertyNames(obj).forEach(name => {\n        const prop = obj[name];\n        if( typeof prop === 'object' && prop !== null ){\n            deepFreeze(prop);\n        }\n    });\n    return Object.freeze(obj);\n    \n}\n","\nexport const fieldsStringSelectorSurvey = '[data-surveyjs-form] input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]), [data-surveyjs-form] select, [data-surveyjs-form] textarea, [data-name=\"bind-surveyjs-answer\"]'\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const isEmptyObject = object => {\n    return isPlainObject(object) && Object.getOwnPropertyNames(object).length === 0;\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    for(let i=1; i<arguments.length; i++){\n        const obj = arguments[i];\n\n        if(!obj){ continue; }\n\n        for(let key in obj){\n            const obj_isArray = Array.isArray(obj[key]);\n            const obj_isObject = isPlainObject(obj[key]);\n\n            // COPY ONLY ENUMERABLE PROPERTIES\n            if( obj.hasOwnProperty(key) ){\n                if( obj_isArray ){\n\n                    if( typeof out[key] === 'undefined' ){\n                        out[key] = [];\n                    }\n                    out[key] = out[key].concat( obj[key].slice(0) );\n\n                } else if( obj_isObject ){\n\n                    out[key] = mergeObjects(out[key], obj[key]);\n\n                } else {\n\n                    // * STRING | NUMBER | BOOLEAN | FUNCTION\n                    if( Array.isArray(out[key]) ){\n                        // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                        out[key].push(obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n\n                }\n            }\n        }\n    }\n\n    return out;\n}\n","\nexport const webStorage = () => {\n\n    const checkLocalStorage = () => {\n        const mod = 'check_storage';\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    const isAvailable = checkLocalStorage();\n\n    if( isAvailable ){\n        // setObject METHOD FOR HTML STORAGE -> EG: localStorage.setObject( name, JSobj )\n        // TO STORE A JS OBJECT ( AS JSON STRING ) INSIDE THE STORAGE\n        Storage.prototype.setObject = function( key, value ) {\n            this.setItem( key, JSON.stringify(value) );\n        }\n\n        // getObject METHOD FOR HTML STORAGE -> EG: localStorage.getObject( name )\n        // RETURN THE DATA ( STORED AS JSON STRING ) AS JS OBJECT\n        Storage.prototype.getObject = function( key ) {\n            const value = this.getItem( key );\n            return value && JSON.parse( value );\n        }\n    }\n\n    return {\n        isAvailable: isAvailable\n    }\n\n}\n","\nexport const getQuestionObject = ( data, questionId ) => {\n\n    const questions = data.questions,\n          qLength = questions.length;\n\n    let obj = {};\n    \n    for(let q=0; q<qLength; q++){\n        const question = questions[q];\n        if( question.id == questionId ){\n            obj = question;\n            break;\n        }\n    }\n\n    return obj;\n\n}","\nimport { fieldsStringSelectorSurvey, isEmptyObject, mergeObjects } from './helpers';\nimport { getQuestionObject } from './utils/getQuestionObject';\n\nexport const defaultCallbacksInOptions = {\n    formOptions: {\n\n        beforeSend: function beforeSend_surveyDefault( data ){\n            const instance = this.formEl.formjs;\n            const surveyContEl = this.formEl.closest('[data-surveyjs-container]');\n            const fieldsList = Array.from( surveyContEl.querySelectorAll(fieldsStringSelectorSurvey) );\n\n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                \n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                const questionIdEl = fieldEl.closest('[data-question-id]');\n                const questionId = questionIdEl ? questionIdEl.getAttribute('data-question-id') : '';\n                const questionObj = getQuestionObject( instance.data, questionId );\n\n                // BASED ON SURVEY JSON FILE, FORCE REQUIRED FIELDS TO BE VALIDATED\n                // THIS AVOIDS USERS TO HACK THE SURVEY, FOR EXAMPLE REMOVING required ATTRIBUTE FROM THE HTML\n                if( questionId !== '' && questionObj && typeof questionObj.required !== 'undefined' ){\n\n                    const isRequiredFrom = fieldEl.matches('[data-required-from]');\n                    const reqMoreEl = document.querySelector(fieldEl.getAttribute('data-required-from'));\n                    if( !isRequiredFrom || ( isRequiredFrom && reqMoreEl.checked ) ){\n                        fieldEl.required = true;\n                    }\n                    \n                }\n\n            });\n\n            const fieldOptions = mergeObjects({}, instance.options.fieldOptions, {focusOnRelated: false});\n            return new Promise(resolve => {\n                this.formEl.formjs.validateForm( fieldOptions ).then(formRes => {\n                    if( !formRes.result ){\n                        data.stopExecution = true;\n                    }\n                    resolve( data );\n                });\n            });\n        },\n\n        getFormData: function getFormData_surveyDefault(){\n            const formEl = this.formEl;\n            const instance = formEl.formjs;\n            const fieldsList = Array.from( formEl.closest('[data-surveyjs-container]').querySelectorAll(fieldsStringSelectorSurvey) );\n            const obj = {\n                    answers: [],\n                    id: instance.data.id\n                };\n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                // EACH QUESTION HAS ITS OWN OBJECT ( qaObj ) THAT CONTAINS THE RELATED DATA:\n                // question:    THE QUESTION ID ( undefined FOR QUESTIONS WITH ATTRIBUTE data-required-form - will be skipped later )\n                // answer       AN OBJECT THAT CONTAINS THE FOLLOWS:\n                //                  id_answer:      THE ANSWER ID\n                //                  text:           IF THE FIELD IS A TEXTAREA\n                //                  attributes:     IF THE ANSWER IS NESTED OR IS REQUIRED FROM ANOTHER ANSWER (SEE BELOW)\n                const questionIdEl = fieldEl.closest('[data-question-id]'),\n                      questionId = questionIdEl ? questionIdEl.getAttribute('data-question-id') : '',\n                      fieldValue = fieldEl.value,\n                      qaObj = {\n                        question: questionId,\n                        answer: {\n                            id_answer: [ fieldValue ]\n                        }\n                    };\n\n                // A FIELD WITH ATTRIBUTE 'data-required-from' IS MANAGED TOGETHER WITH ITS RELATED FIELD ( WHICH HAS ATTRIBUTE 'data-require-more' )\n                // IF QUESTION ID IS EMPTY -> SKIP THE FIELD ( USEFUL FOR FORM FIELDS OUTSIDE THE SURVEY BODY )\n                if( fieldEl.matches('[data-required-from]') || questionId === '' || isEmptyObject(getQuestionObject( instance.data, questionId )) ){ return; }\n                                    \n                if( fieldEl.matches('textarea') ){\n                    qaObj.answer.id_answer = [ '' ];\n                    qaObj.answer.text = fieldValue;\n                }\n\n                if( type === 'radio' ){\n                    const containerEl = (fieldEl.closest('form') ? formEl : fieldEl.closest('[data-formjs-question]') ),\n                          elem = containerEl.querySelector('[name=\"'+ name +'\"]:checked');\n                    \n                    if( elem ){\n                        // FOR RADIO THAT REQUIRE THE USER TO GIVE ONE MORE ANSWER\n                        if( elem.matches('[data-require-more]') ){\n                            qaObj.answer.attributes = formEl.querySelector('[data-required-from=\"#'+ elem.id +'\"]').value.trim();\n                        }\n                        \n                        if( elem.matches('[data-nested-index]') ){\n                            qaObj.answer.attributes = elem.getAttribute('data-nested-index');\n                        }\n                        \n                        qaObj.answer.id_answer = [ elem.value.trim() ];\n                    } else {\n                        qaObj.answer.id_answer = [ '' ];\n                    }\n                }\n\n                if( type === 'checkbox' && fieldEl.matches('[data-checks]') ){\n                    qaObj.answer.id_answer = [];\n                    Array.from(formEl.querySelectorAll('[name=\"'+ name +'\"]:checked')).forEach(el => {\n                        qaObj.answer.id_answer.push( el.value.trim() );\n                    });\n                }\n                \n                obj.answers.push( qaObj );\n            });\n        \n            return obj;\n        }\n    \n    }\n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n    cssClasses: {\n        checkbox:           'form-check-input',\n        default:            'form-control',\n        file:               'form-control-file',\n        label:              'form-check-label',\n        radio:              'form-check-input',\n        select:             'form-control',\n        textarea:           'form-control'\n    },\n    fieldErrorFeedback:     true,\n    formOptions: {\n        beforeSend:         [defaultCallbacksInOptions.formOptions.beforeSend],\n        getFormData:        defaultCallbacksInOptions.formOptions.getFormData\n    },\n    initAjaxOptions:        {\n        cache:              'no-store',\n        credentials:        'same-origin',\n        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept':       'application/json'\n        },\n        method:             'GET',\n        mode:               'same-origin',\n        redirect:           'follow',\n        timeout:            0\n    },\n    lang:                   'en',\n    templates: {\n        fieldError: '<div class=\"surveyjs-field-error-message\">{{fieldErrorMessage}}</div>',\n\n        input:      '<div class=\"surveyjs-single-answer surveyjs-input-container surveyjs-answer-{{answerType}} form-check\" data-answer-index=\"{{answerIndex}}\">'+\n                        '{{inputTagCode}}'+\n                        '{{labelTagCode}}'+\n                    '</div>',\n\n        inputGroup: '<div class=\"surveyjs-single-answer input-group\" data-answer-index=\"{{answerIndex}}\">'+\n                        '<div class=\"input-group-prepend\">'+\n                            '<div class=\"input-group-text form-check surveyjs-answer-{{answerType}}\">'+\n                                '<input type=\"{{answerType}}\" name=\"surveyjs-answer-{{questionNumber}}\" id=\"{{answerCode}}\" data-answer-id=\"{{answerId}}\" value=\"{{answerIdValue}}\" {{attrRequired}} data-require-more=\"\" class=\"surveyjs-input surveyjs-radio form-check-input\" />'+\n                                '<label for=\"{{answerCode}}\" class=\"surveyjs-label form-check-label\">{{answerString}}</label>'+\n                            '</div>'+\n                        '</div>'+\n                        '{{relatedAnswerField}}'+\n                    '</div>',\n        \n        inputTag:   '<input type=\"{{answerType}}\" {{attrSubtype}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-input surveyjs-{{answerType}} {{fieldClass}}\" id=\"{{answerCode}}\" {{nestedAnswer}} data-answer-root=\"{{progIdsJoined}}\" data-answer-id=\"{{answerId}}\" value=\"{{answerIdValue}}\" {{attrRequired}} {{validateIfFilled}} {{attrChecks}} {{attrRequiredFrom}} />',\n\n        labelTag:   '<label for=\"{{answerCode}}\" class=\"surveyjs-label {{labelClass}}\">{{answerString}}</label>',\n\n        question:   '<div data-question-id=\"{{questionId}}\" data-question-index=\"{{questionNumber}}\" data-formjs-question class=\"surveyjs-question-box clearfix\">'+\n                        '<div class=\"surveyjs-question-header\">Question {{questionNumber}}</div>'+\n                        '<div class=\"surveyjs-question-body\">'+\n                            '<div class=\"surveyjs-question-text\">{{questionText}}</div>'+\n                            '<div class=\"surveyjs-answers-box form-group clearfix\">'+\n                                '{{answersHtml}}'+\n                                '{{fieldErrorTemplate}}'+\n                            '</div>'+\n                        '</div>'+\n                    '</div>',\n\n        select:     '<div class=\"surveyjs-single-answer surveyjs-answer-select\" data-answer-index=\"{{answerIndex}}\">'+\n                        '{{selectTagCode}}'+\n                    '</div>',\n\n        selectTag:  '<select id=\"{{answerCode}}\" name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-select {{fieldClass}}\" {{attrRequired}} {{nestedAnswer}} data-answer-root=\"{{progIdsJoined}}\" {{attrRequiredFrom}}>'+\n                        '{{optionsHtml}}'+\n                    '</select>',\n\n        textarea:   '<div class=\"surveyjs-single-answer surveyjs-answer-textarea\">'+\n                        '<textarea id=\"{{answerCode}}\" data-answer-id=\"{{answerId}}\" {{nestedAnswer}} name=\"surveyjs-answer-{{questionNumber}}\" {{attrRequired}} class=\"surveyjs-textarea {{fieldClass}}\" {{answerMaxlength}} rows=\"6\" placeholder=\"{{answerPlaceholder}}\"></textarea>'+\n                    '</div>'\n    },\n    useLocalStorage:        true\n}\n","\nexport const internals = {\n    storageArray: [],\n    storageName: 'Survey_' + location.href + '_{{surveyFormName}}_surveyId[{{surveyId}}]'\n}\n","\nexport const getAnswerIndexInLocalStorage = ( internals, fieldName, multiChoiceValue = '' ) => {\n\n    const lsSurvey = localStorage.getObject( internals.storageName );\n            \n    if( lsSurvey ){\n        const lsSurveyLength = lsSurvey.length;\n        \n        for(let ls=0; ls<lsSurveyLength; ls++){\n            const lsItem = lsSurvey[ls];\n\n            if( lsItem.field === fieldName ){\n                if( multiChoiceValue ){\n                    if( lsItem.value !== multiChoiceValue ){\n                        continue;\n                    }\n                }\n                return ls;\n            }\n        }\n    }\n    \n    return -1;\n\n}","\nimport { isEmptyObject, isFieldForChangeEvent } from './helpers';\nimport { getAnswerIndexInLocalStorage }         from './utils/getAnswerIndexInLocalStorage';\nimport { getQuestionObject }                    from './utils/getQuestionObject';\n\nexport const callbackFns = {\n\n    // THIS WILL RUN BEFORE FORMJS VALIDATION FUNCTION SO THAT USERS CANNOT SKIP REQUIRED FIELDS VALIDATION ( WHILE TYPING )\n    validation: function( event ){\n\n        const eventName = event.type,\n              fieldEl = event.target,\n              self = fieldEl.closest('form').formjs,\n              internals = self.internals,\n              containerEl = fieldEl.closest('[data-formjs-question]'),\n              fieldValue = fieldEl.value ? fieldEl.value.trim() : fieldEl.value,\n              isMultiChoice = fieldEl.matches('[data-checks]'),\n              isRequireMore = fieldEl.matches('[data-require-more]'),\n              isRequiredFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = isRequiredFrom ? containerEl.querySelector(fieldEl.getAttribute('data-required-from')) : null;\n\n        // VARS USED TO VALIDATE THE FILED IF IT IS REQUIRED\n        const itemEl = isRequiredFrom ? reqMoreEl : fieldEl,\n              questionId = itemEl.id ? itemEl.id.split('-')[1] : 'id-not-found',\n              isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl),\n              questionObj = getQuestionObject(self.data, questionId);\n\n        // IF IT'S NOT A SURVEY QUESTION -> SKIP\n        if( isEmptyObject(questionObj) ){ return true; }\n\n        if(\n            (isFieldForChangeEventBoolean && eventName === 'change') ||\n            (!isFieldForChangeEventBoolean && eventName !== 'change')\n        ){\n            \n            // MANAGE ITEMS IN LOCAL STORAGE ( IF AVAILABLE AND USABLE )\n            if( self.options.useLocalStorage && !fieldEl.matches('[data-exclude-storage]') ){\n                const inArrayPos = getAnswerIndexInLocalStorage( internals, fieldEl.name, (isMultiChoice ? fieldValue : false) ),\n                    inArrayRequireMorePos = getAnswerIndexInLocalStorage( internals, fieldEl.name + '-more' );\n\n                let storageArray = internals.storageArray;\n\n                if( !isRequireMore && !isRequiredFrom && inArrayRequireMorePos !== -1 ){\n                    storageArray.splice(inArrayRequireMorePos, 1);\n                }\n\n                if( inArrayPos !== -1 ){\n                    if( isMultiChoice ){\n                        if( !fieldEl.checked && storageArray[inArrayPos].value === fieldValue ){\n                            // REMOVE ITEM FROM LS\n                            storageArray.splice(inArrayPos, 1);\n                        } else {\n                            // ADD ITEM TO LS\n                            storageArray.push( { field: fieldEl.name, value: fieldValue } );\n                        }\n                    } else {\n                        if( fieldValue !== '' ){\n                            storageArray[inArrayPos].value = fieldValue;\n                        } else {\n                            storageArray.splice(inArrayPos, 1); \n                        }\n                    }\n                } else {\n                    if( fieldValue !== '' ){\n                        if( isRequiredFrom && fieldValue !== '' ){\n                            const oldFieldNamePos = getAnswerIndexInLocalStorage( internals, reqMoreEl.name );\n\n                            if( oldFieldNamePos !== -1 ){\n                                storageArray.splice(oldFieldNamePos, 1);\n                            }\n                            storageArray.push( { field: reqMoreEl.name, value: reqMoreEl.value.trim() } );\n                        }\n                        storageArray.push( { field: fieldEl.name, value: fieldValue } );\n                        if( isRequireMore ){\n                            const elReqFromEl = fieldEl.closest('form').querySelector( '[data-required-from=\"#' + fieldEl.id + '\"]' );\n                            storageArray.push( { field: elReqFromEl.name, value: elReqFromEl.value.trim() } );\n                        }\n                    }\n                }\n\n                localStorage.setObject( internals.storageName, storageArray );\n            }\n\n            // BASED ON JSON DATA, FORCE REQUIRED FIELDS TO BE VALIDATED\n            if( typeof questionObj.required !== 'undefined' ){\n                fieldEl.required = true;\n            }\n\n        }\n        \n    }\n\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nexport const generateOptionTags = ( optionsList = [], options ) => {\n\n    let optionsHtml = optionsList[0].id === '' ? '' : '<option value=\"\">'+ options.selectFirstOption +'</option>';\n\n    optionsList.forEach(opt => {\n        optionsHtml += '<option value=\"'+ opt.id +'\" data-answer-id=\"'+ opt.id +'\">'+ opt.answer +'</option>';\n    });\n\n    return optionsHtml;\n\n}","\nimport { attribute }    from './fieldsHTML/attribute';\nimport { input }        from './fieldsHTML/input';\nimport { nested }       from './fieldsHTML/nested';\nimport { select }       from './fieldsHTML/select';\nimport { textarea }     from './fieldsHTML/textarea';\n\nexport const generateFieldHTML = {\n        attribute, input, nested, select, textarea\n}\n","\nimport { generateOptionTags } from './generateOptionTags';\n\n// RELATED ANSWER\n// IF AN ANSWER REQUIRE TO FILL OR SELECT ANOTHER RELATED ANSWER\nexport const attribute = ( options, data ) => {\n\n    const objData = data.objData,\n          aHtml = options.templates.inputGroup,\n          attr = data.answer.attribute,\n          attributeIsArray = Array.isArray(attr),\n          relatedAnswerField = attributeIsArray ? options.templates.selectTag : options.templates.inputTag;\n    \n    objData.fieldClass = options.cssClasses.default;\n    \n    if( attributeIsArray ){\n        // CREATE A GROUP WITH A RADIO INPUT AND ITS RELATED ANSWER (A SELECT FIELD)\n        objData.fieldClass = options.cssClasses.select;\n        objData.optionsHtml = generateOptionTags(attr, options);\n    }\n\n    return { aHtml, relatedAnswerField, objData };\n}\n","\nexport const input = ( options, data ) => {\n\n    const objData = data.objData,\n          aHtml = data.beforeCode + options.templates.input + data.afterCode;\n\n    if( objData.answerType !== 'checkbox' && objData.answerType !== 'radio' ){\n        // EVERY INPUT FIELD THAT IS NOT A CHECKBOX OR RADIO ( TEXT, EMAIL, NUMBER, PASSWORD, RANGE AND SO ON... )\n        objData.nestedAnswer += ' class=\"' + objData.fieldClass + '\"';\n    }\n    \n    return { aHtml, objData };\n}\n","\n// NESTED ANSWER -> IT IS A CHILD ANSWER OF ITS PARENT\n// EXAMPLE:\n// IF 'WEBSITE' IS THE PARENT ANSWER\n// IT CAN HAVE THESE CHILDREN ANSWERS: PC - SMARTPHONE - TABLET\n// SO THE PARENT ANSWER IS PRINTED AS TEXT ( WITHOUT THE INPUT FIELD ) AND ITS nested ANSWERS WILL BE LOOPED\nexport const nested = ( options, data ) => {\n\n    const objData = data.objData;\n\n    let labelForNested = options.templates.labelTag;\n    labelForNested = labelForNested.replace(/{{answerCode}}/g, objData.answerCode);\n    labelForNested = labelForNested.replace(/{{labelClass}}/g, options.cssClasses.label + ' surveyjs-field-indent-0');\n    labelForNested = labelForNested.replace(/{{answerString}}/g, data.answer.answer);\n\n    const aHtml = data.beforeCode + '<div class=\"surveyjs-'+ objData.answerType +'\">' + labelForNested + '</div>' + data.afterCode;\n\n    return { aHtml, objData };\n}\n","\nimport { generateOptionTags } from './generateOptionTags';\n\nexport const select = ( options, data ) => {\n\n    const objData = data.objData,\n          aHtml = data.beforeCode + options.templates.select + data.afterCode;\n    \n    objData.optionsHtml = generateOptionTags( data.obj.answers, options );\n\n    return { aHtml, objData };\n}\n","\nexport const textarea = ( options, data ) => {\n\n    const objData = data.objData,\n          aHtml = options.templates.textarea;\n\n    objData.answerPlaceholder = data.answer.placeholder || options.textareaPlaceholder;\n\n    return { aHtml, objData };\n}\n","\nexport const replaceTemplateStrings = ( options, fieldData, objData ) => {\n\n    if( objData.optionsHtml !== '' ){\n        fieldData.aHtml = fieldData.aHtml.replace( /{{selectTagCode}}/g, options.templates.selectTag );\n    }\n\n    if( fieldData.relatedAnswerField ){\n        const relatedAnswerKeys = {\n              answerCode: '', answerType: 'text', fieldClass: objData.fieldClass,\n              answerIdValue: '', attrRequired: '', addMoreName: '-more',\n              attrRequiredFrom: 'data-required-from=\"#'+ objData.answerCode +'\"'\n            };\n            \n        for(let reKey in relatedAnswerKeys){\n            const regexStrRe = new RegExp( '{{' + reKey + '}}', 'g' );\n            fieldData.relatedAnswerField = fieldData.relatedAnswerField.replace( regexStrRe, relatedAnswerKeys[reKey] );    \n        }\n        \n        fieldData.aHtml = fieldData.aHtml.replace( /{{relatedAnswerField}}/g, fieldData.relatedAnswerField );\n    } else {\n        fieldData.aHtml = fieldData.aHtml.replace( /{{addMoreName}}/g, '' );\n        fieldData.aHtml = fieldData.aHtml.replace( /{{attrRequiredFrom}}/g, '' );\n    }\n    \n    for( let key in objData ){\n        const regexStr = new RegExp( '{{' + key + '}}', 'g' );\n        fieldData.aHtml = fieldData.aHtml.replace( regexStr, objData[key] );\n    }\n\n    return fieldData.aHtml;\n\n}","\nimport { generateFieldHTML } from './generateFieldHTML';\nimport { replaceTemplateStrings } from './replaceTemplateStrings';\n\nlet progIds = [];\n\nexport const iterateAnswers = ( formEl, options, obj, qID, qIdx, attrReq ) => {\n\n    // obj          MUST BE AN ARRAY OF STRINGS OR AN OBJECT THAT CONTAINS 'answers' AS ARRAY (THE FUNCTION iterateAnswers LOOPS UNTIL A STRING IS FOUND, AND PRINTS IT)\n    // qIdx         INDEX OF THE QUESTION\n    // attrReq      HTML REQUIRED ATTRIBUTE THAT WILL BE PRINTED (THIS PARAMETER MUST NOT BE PASSED INITIALLY. IT IS AUTOMATICALLY PASSED INSIDE THE LOOP IF NECESSARY)\n    // aLoopHtml    THE CODE OF ALL ANSWERS ( PRINTED ONLY AT THE END )\n\n    qID = obj.id ? obj.id : (qID || 0);\n\n    let list = Array.isArray(obj) ? obj : obj.answers,\n        listL = list.length,\n        i = qIdx || 0,\n        aLoopHtml = '';\n    \n    const needsBinding = obj.question === 'hidden-privacy' ? true : false;\n\n    if( list[0]['sort'] ){\n        list.sort((a, b) => {\n            return a['sort'] > b['sort'];\n        });\n    }\n\n    for(let a=0; a<listL; a++){\n\n        let answer = list[a],\n            aNum = a + 1,\n            qNum = i + 1,\n            aType = answer.type,\n            aId = answer.id,\n            progIdsLength = progIds.length,\n            progIdsJoined = progIdsLength > 0 ? progIds.join('-') : '',\n            getSettingsFieldClass = () => {\n                let aType = answer.type === 'option' ? 'select' : answer.type;\n                return options.cssClasses[aType] || options.cssClasses.default;\n            };\n\n        let fieldData = { aHtml: '' };\n        \n        // ALL THESE OBJECT KEYS WILL REPLACE {{key}} WITH objData.KEY IN HTML STRING\n        let objData = {\n            // answerId         ANSWER ID AS FROM THE JSON. THIS IS USED AS VALUE ATTRIBUTE OF THE ANSWER\n            // answerType       ANSWER TYPE AS FROM THE JSON. USED TO CHECK WHICH FIELD MUST BE CREATED ( EG: text, radio, checkbox, select, textarea )\n            // nestedAnswer     CREATES THE data-nested-index ATTRIBUTE TO PRINT IF AN ANSWER IS NESTED ( SEE BELOW FOR NESTED ANSWERS )\n            // answerCode       ID ATTRIBUTE OF THE ANSWER\n            //                  ( BUILT AS: \"answerType-questionID-answerID-questionNumber[-nestingLevels]-answerNumber\" )\n            //                  ONLY AN ATTRIBUTE-ANSWER DOES NOT USE THE answerCode\n                labelTagCode: aType === 'checkbox' || aType === 'radio' ? options.templates.labelTag : '',\n                answerId: aId,\n                answerIdValue: aType === 'text' ? '' : aId,\n                answerIndex: aNum,\n                answerName: 'surveyjs-answer-'+qNum,\n                answerPlaceholder: '',\n                answerMaxlength: answer.maxlength ? 'maxlength=\"' + answer.maxlength + '\"' : '',\n                answerString: typeof answer.answer === 'string' ? answer.answer : '',\n                answerType: aType,\n                attrRequired: typeof obj.required !== 'undefined' ? 'required' : (typeof attrReq !== 'undefined' ? attrReq : ''),\n                fieldClass: getSettingsFieldClass(),\n                nestedAnswer: progIdsJoined !== '' ? 'data-nested-index=\"'+ aNum +'\"' : '' ,\n                optionsHtml: '',\n                progIdsJoined: progIdsJoined,\n                questionNumber: qNum,\n                answerCode: (aType === 'option' ? 'select' : aType) +'-' + qID +'-'+ (aId || 0) + '-' + qNum + (progIdsJoined !== '' ? '-'+progIdsJoined : '') +'-'+ aNum,\n                attrChecks: obj.checks ? 'data-checks=\"' + obj.checks + '\"' : '',\n                attrSubtype: answer.subtype ? 'data-subtype=\"' + answer.subtype + '\"' : '',\n                validateIfFilled: typeof obj.validateIfFilled !== 'undefined' ? 'data-validate-if-filled' : ''\n            };\n        \n        if( needsBinding ){\n            \n            const boundedFieldEl = formEl.closest('[data-surveyjs-container]').querySelectorAll('[data-name=\"bind-surveyjs-answer\"]')[a],\n                fieldProps = {\n                    id: objData.answerCode,\n                    name: objData.answerName,\n                    type: aType,\n                    value: objData.answerId\n                };\n            \n            if( typeof obj.required !== 'undefined' ){ fieldProps.required = true; }\n            \n            for(let key in fieldProps){\n                boundedFieldEl[key] = fieldProps[key];\n            }\n            boundedFieldEl.setAttribute('data-answer-id', objData.answerId);\n            boundedFieldEl.closest('div').querySelector('label').setAttribute('for', objData.answerCode);\n            boundedFieldEl.closest('div').querySelector('label span').textContent = answer.answer;\n            \n            continue;\n            \n        }\n        \n        if( typeof answer.answer === 'string' || typeof answer.answer === 'number' ){\n\n                // beforeCode       MANAGE FIELD INDENT ( FOR NESTED ANSWERS - SEE BELOW )\n                // afterCode        MANAGE FIELD INDENT ( FOR NESTED ANSWERS - SEE BELOW )\n                let surveyFieldType = ( answer.attribute ? 'attribute' : (answer.nested ? 'nested' : ( aType === 'option' ? 'select' : aType )) ),\n                      beforeCode = progIdsLength > 0 && a === 0 ? '<div class=\"surveyjs-field-indent\">' : '',\n                      afterCode = progIdsLength > 0 && a === listL - 1 ? '</div>' : '',\n                      data = { answer, objData, beforeCode, afterCode, obj };\n\n                if( typeof generateFieldHTML[surveyFieldType] === 'undefined' ){\n                    surveyFieldType = 'input';\n                }\n\n                // GENERATE FIELD HTML CODE FROM surveyFieldType\n                fieldData = generateFieldHTML[surveyFieldType]( options, data );\n                \n                objData = fieldData.objData;\n\n                if( answer.nested ){\n                    progIds.push( aNum );\n                    aLoopHtml += fieldData.aHtml;\n                    aLoopHtml += iterateAnswers(formEl, options, answer.nested, qID, i, objData.attrRequired);\n                    continue;\n                }\n\n                // IF LOOPING A NESTED ANSWER AND THE END OF THAT ARRAY IS REACHED\n                // REMOVE THE LAST ITEM OF progIds ( SO AT THE NEXT LOOP IT WILL NOT INDENT THE ANSWER )\n                if( progIdsLength > 0 && a === listL-1 ){ progIds.pop(); }\n\n        }\n\n        fieldData.aHtml = replaceTemplateStrings(options, fieldData, objData);\n        aLoopHtml += fieldData.aHtml;\n        \n        if( aType === 'option' ){\n            a = a + obj.answers.length;\n        }\n        \n    }\n\n    return aLoopHtml;\n\n}\n","\nimport { appendDomStringToNode }from '../helpers';\nimport { generateQAcode }       from './generateQAcode';\nimport { populateAnswers }      from './populateAnswers';\n\nexport const buildSurvey = ( formEl, options, internals, data ) => {\n    \n    const self = formEl.formjs,\n          formName = formEl.getAttribute('name') || '',\n          surveyContEl = formEl.closest('[data-surveyjs-container]');\n    \n    // REPLACE SURVEY ID AND FORM NAME IN LOCALSTORAGE NAME\n    self.internals.storageName = internals.storageName.replace( /{{surveyId}}/g, data.id );\n    self.internals.storageName = internals.storageName.replace( /{{surveyFormName}}/g, formName );\n    \n    // PRINT GENERAL SURVEY DATA: TITLE AND DESCRIPTION\n    const checkData = data => { return typeof data !== 'undefined' ? data : ''; };\n    if( surveyContEl.querySelector('[data-surveyjs-title]') ){\n        surveyContEl.querySelector('[data-surveyjs-title]').textContent = checkData( data.title );\n    }\n    if( surveyContEl.querySelector('[data-surveyjs-description]') ){\n        surveyContEl.querySelector('[data-surveyjs-description]').textContent = checkData( data.description );\n    }\n    \n    // ITERATES THE QUESTIONS ( AND ALSO THEIR ANSWERS )...AND RETURN ALL THE HTML CODE\n    const qaHtmlAll = generateQAcode( formEl, options, data.questions );\n    // PRINT ALL QUESTIONS & ANSWERS\n    appendDomStringToNode( qaHtmlAll, formEl.querySelector('[data-surveyjs-body]') );\n\n    // FILL ANSWERS WITH LOCAL STORAGE ( IF AVAILABLE )\n    if( options.useLocalStorage ){\n        populateAnswers( formEl, self.internals );\n    }\n\n    const loadingBoxEl = formEl.querySelector('[data-surveyjs-loading]');\n    if( loadingBoxEl ){\n        loadingBoxEl.parentNode.removeChild(loadingBoxEl);\n    }\n\n}\n","\nexport const appendDomStringToNode = ( HTMLstring, parentNode ) => {\n\n    const tmpEl = document.createElement('div');\n    tmpEl.innerHTML = HTMLstring;\n    Array.from( tmpEl.childNodes ).forEach((elem) => {\n        parentNode.appendChild( elem );\n    });\n\n}\n","\nimport { iterateAnswers } from './generateQAcodeUtils/iterateAnswers';\n\nexport const generateQAcode = ( formEl, options, questionsList = [] ) => {\n\n    const qaData = questionsList[0]['sort'] ? questionsList.sort((a, b) => { return a['sort'] > b['sort']; }) : questionsList,\n          qaDataLength = qaData.length;\n    \n    let qaCodeAll = '';\n    \n    for(let i=0; i<qaDataLength; i++){\n        const item = qaData[i],\n              maxChoice = item.checks ? JSON.parse(item.checks) : '',\n              checksMin = maxChoice.length > 0 ? maxChoice[0] : '',\n              checksMax = maxChoice.length > 0 ? maxChoice[1] : '';\n\n        let aHtml = '',\n            qaHtml = options.templates.question;\n\n        // HTML CODE FOR THE ANSWER/S\n        aHtml += iterateAnswers( formEl, options, item, item.id, i );\n\n        if( item.question === 'hidden-privacy' ){\n            const bindAnswerEl = formEl.closest('[data-surveyjs-container]').querySelector('[data-name=\"bind-surveyjs-answer\"]');\n            if( bindAnswerEl ){\n                bindAnswerEl.closest('[data-formjs-question]').setAttribute('data-question-id', item.id);\n                continue;\n            }\n        }\n\n        // REPLACE QUESTION DATA AND ANSWERS HTML IN LOCAL VARIABLE qaHtml\n        qaHtml = qaHtml.replace( /{{questionId}}/g, item.id );\n        qaHtml = qaHtml.replace( /{{questionNumber}}/g, (i+1) );\n        qaHtml = qaHtml.replace( /{{questionText}}/g, item.question + ( maxChoice !== '' ? ' ('+ checksMax +' '+ options.maxChoiceText +')' : '' ) );\n        qaHtml = qaHtml.replace( /{{answersHtml}}/g, aHtml );\n        qaHtml = qaHtml.replace( /{{fieldErrorTemplate}}/g, ( options.fieldErrorFeedback ? options.templates.fieldError : '' ) );\n        if( options.fieldErrorFeedback && options.templates.fieldError.indexOf('{{fieldErrorMessage}}') !== -1 ){\n            const message = maxChoice !== '' ? options.fieldErrorMessageMultiChoice : options.fieldErrorMessage;\n            qaHtml = qaHtml.replace( /{{fieldErrorMessage}}/g, message ).replace( /{{checksMin}}/g, checksMin ).replace( /{{checksMax}}/g, checksMax );\n        }\n\n        qaCodeAll += qaHtml;\n    }\n    \n    return qaCodeAll;\n\n}\n","\nexport const populateAnswers = ( formEl, internals ) => {\n\n    const LS = localStorage.getObject( internals.storageName );\n    if( LS ){\n        const surveyContEl = formEl.closest('[data-surveyjs-container]');\n        internals.storageArray = LS;\n        LS.forEach(item => {\n            const fieldFirst = surveyContEl.querySelector( '[name=\"' + item.field + '\"]' ),\n                  isRadioOrCheckbox = fieldFirst.matches('[type=\"radio\"], [type=\"checkbox\"]'),\n                  fieldEl = ( isRadioOrCheckbox ? surveyContEl.querySelector( '[name=\"' + item.field + '\"][value=\"' + item.value + '\"]' ) :   fieldFirst );\n            \n            if( isRadioOrCheckbox ){\n                fieldEl.checked = true;\n            } else {\n                fieldEl.value = item.value;\n            }\n        });\n    }\n\n}\n","\nimport { ajaxCall, deepFreeze, mergeObjects, webStorage } from './modules/helpers';\nimport { messages }             from './modules/messages';\nimport { options }              from './modules/options';\nimport { internals }            from './modules/internals';\nimport { callbackFns }          from './modules/listenerCallbacks';\nimport { buildSurvey }          from './modules/buildSurvey/buildSurvey';\nimport { destroy }              from './modules/destroy';\n\nimport Form from 'formjs-plugin';\n\nimport './index.scss';\n\nconst version = '3.0.0';\n\nclass Survey extends Form {\n\n    constructor( formEl, optionsObj = {} ){\n        if( !optionsObj.url || typeof optionsObj.url !== 'string' ){\n            throw new Error('\"options.url\" is missing or not a string!');\n        }\n\n        // SET THE lang VALUE IN options ( MANDATORY FOR OTHER OPERATIONS )\n        const customLang = typeof optionsObj.lang === 'string' && optionsObj.lang.toLowerCase();\n        const langValue = customLang && Survey.prototype.messages[customLang] ? customLang : Survey.prototype.options.lang;\n        \n        // MERGE OPTIONS AND messages OF THE CHOSEN lang INSIDE options\n        const options = mergeObjects( {}, Survey.prototype.options, Survey.prototype.messages[langValue], optionsObj );\n\n        if( options.templates.input.indexOf('{{inputTagCode}}') !== -1 ){\n            options.templates.input = options.templates.input.replace( /{{inputTagCode}}/g, options.templates.inputTag );\n        }\n\n        options.templates.labelTag = options.templates.labelTag.replace(/{{labelClass}}/g, options.cssClasses.label);\n\n        if( !webStorage().isAvailable ){\n            options.useLocalStorage = false;\n        }\n\n        super( formEl, options );\n\n        this.internals = internals;\n\n        // INIT FIELDS VALIDATION\n        // THIS WILL RUN BEFORE FORMJS VALIDATION FUNCTION SO THAT USERS CANNOT SKIP REQUIRED FIELDS VALIDATION\n        this.options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n            const useCapturing = eventName === 'blur' ? true : false;\n            formEl.addEventListener(eventName, callbackFns.validation, useCapturing);\n        });\n\n        formEl.addEventListener('fjs.form:submit', event => {\n            event.data.then(() => {\n                // REMOVE SURVEY LOCAL STORAGE\n                if( options.useLocalStorage ){\n                    localStorage.removeItem( this.internals.storageName );\n                }\n            });\n        });\n    }\n\n    destroy(){\n        destroy(this.formEl);\n        super.destroy();\n    }\n\n    init(){\n        const self = this;\n        const formEl = self.formEl;\n        const options = self.options;\n\n        formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforebegin', options.loadingBox );\n\n        return ajaxCall(options.url, options.initAjaxOptions)\n            .then(response => {\n                if( response.status.toLowerCase() === 'success' && response.data.questions && response.data.questions.length > 0 ){\n                    return new Promise(resolve => {\n\n                        buildSurvey(formEl, options, self.internals, response.data);\n                        super.init().then(() => {\n                            self.isInitialized = true;\n                            self.data = response.data;\n                            deepFreeze(self.data);\n                            formEl.closest('[data-surveyjs-container]').classList.add('surveyjs-init-success');\n                            resolve(response);\n                        });\n\n                    });\n                }\n                return Promise.reject(response);\n            });\n    }\n    \n    static addLanguage( langString, langObject ){\n        const langValue = langString.toLowerCase();\n        Survey.prototype.messages[langValue] = mergeObjects({}, Survey.prototype.messages[langValue], langObject);\n    }\n\n    static setOptions( optionsObj ){\n        Survey.prototype.options = mergeObjects({}, Survey.prototype.options, optionsObj);\n    }\n\n}\n\nSurvey.prototype.isInitialized = false;\nSurvey.prototype.messages = messages;\nSurvey.prototype.options = options;\nSurvey.prototype.version = version;\n\nexport default Survey;\n","\nimport { callbackFns } from './listenerCallbacks';\n\nexport const destroy = formEl => {\n\n    formEl.formjs.options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.removeEventListener(eventName, callbackFns.validation, useCapturing);\n    });\n    \n}\n","\nexport const messages = {\n    it: {\n        loadingBox:         '<div class=\"surveyjs-loading\" data-surveyjs-loading><i class=\"glyphicon glyphicon-refresh icon-spin\"></i> Caricamento in corso...</div>',\n        selectFirstOption:  'Seleziona una risposta...',\n        textareaPlaceholder:'Scrivi la tua risposta...',\n        maxChoiceText:      'RISPOSTE MAX',\n        fieldErrorMessage:  '&Egrave; necessario rispondere.',\n        fieldErrorMessageMultiChoice:  'Puoi scegliere da {{checksMin}} a {{checksMax}} risposte.'\n    },\n    en: {\n        loadingBox:         '<div class=\"surveyjs-loading\" data-surveyjs-loading><i class=\"glyphicon glyphicon-refresh icon-spin\"></i> Loading...</div>',\n        selectFirstOption:  'Select your answer...',\n        textareaPlaceholder:'Write here your answer...',\n        maxChoiceText:      'ANSWERS MAX',\n        fieldErrorMessage:  'Answer is necessary.',\n        fieldErrorMessageMultiChoice:  'You can choose from {{checksMin}} to {{checksMax}} answers.'\n    }\n}\n"],"names":["deepFreeze","obj","Object","getOwnPropertyNames","forEach","name","prop","freeze","fieldsStringSelectorSurvey","isPlainObject","object","prototype","toString","call","isEmptyObject","length","mergeObjects","out","i","arguments","key","obj_isArray","Array","isArray","obj_isObject","hasOwnProperty","concat","slice","push","webStorage","isAvailable","mod","localStorage","setItem","removeItem","e","checkLocalStorage","Storage","setObject","value","this","JSON","stringify","getObject","getItem","parse","getQuestionObject","data","questionId","questions","qLength","q","question","id","defaultCallbacksInOptions","formOptions","beforeSend","instance","formEl","formjs","surveyContEl","closest","fieldsList","from","querySelectorAll","fieldNameCheck","fieldTypeCheck","fieldEl","type","matches","questionIdEl","getAttribute","questionObj","required","isRequiredFrom","reqMoreEl","document","querySelector","checked","fieldOptions","options","focusOnRelated","Promise","resolve","validateForm","then","formRes","result","stopExecution","getFormData","answers","fieldValue","qaObj","answer","id_answer","text","elem","attributes","trim","el","cssClasses","checkbox","default","file","label","radio","select","textarea","fieldErrorFeedback","initAjaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","lang","templates","fieldError","input","inputGroup","inputTag","labelTag","selectTag","useLocalStorage","internals","storageArray","storageName","location","href","getAnswerIndexInLocalStorage","fieldName","multiChoiceValue","lsSurvey","lsSurveyLength","ls","lsItem","field","callbackFns","event","eventName","target","self","containerEl","isMultiChoice","isRequireMore","itemEl","split","isFieldForChangeEventBoolean","isFieldForChangeEvent","inArrayPos","inArrayRequireMorePos","splice","oldFieldNamePos","elReqFromEl","generateOptionTags","optionsList","optionsHtml","selectFirstOption","opt","generateFieldHTML","attribute","objData","aHtml","attr","attributeIsArray","relatedAnswerField","fieldClass","beforeCode","afterCode","answerType","nestedAnswer","nested","labelForNested","replace","answerCode","answerPlaceholder","placeholder","textareaPlaceholder","replaceTemplateStrings","fieldData","relatedAnswerKeys","answerIdValue","attrRequired","addMoreName","attrRequiredFrom","reKey","regexStrRe","RegExp","regexStr","progIds","iterateAnswers","qID","qIdx","attrReq","list","listL","aLoopHtml","needsBinding","sort","a","b","aNum","qNum","aType","aId","progIdsLength","progIdsJoined","join","getSettingsFieldClass","labelTagCode","answerId","answerIndex","answerName","answerMaxlength","maxlength","answerString","questionNumber","attrChecks","checks","attrSubtype","subtype","validateIfFilled","boundedFieldEl","fieldProps","setAttribute","textContent","surveyFieldType","pop","buildSurvey","formName","checkData","title","description","HTMLstring","parentNode","tmpEl","createElement","innerHTML","childNodes","appendChild","appendDomStringToNode","questionsList","qaData","qaDataLength","qaCodeAll","item","maxChoice","checksMin","checksMax","qaHtml","bindAnswerEl","maxChoiceText","indexOf","message","fieldErrorMessageMultiChoice","fieldErrorMessage","generateQAcode","LS","fieldFirst","isRadioOrCheckbox","populateAnswers","loadingBoxEl","removeChild","Survey","Form","[object Object]","optionsObj","url","Error","customLang","toLowerCase","langValue","messages","super","validateOnEvents","useCapturing","addEventListener","removeEventListener","destroy","insertAdjacentHTML","loadingBox","timeoutTimer","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","json","reject","catch","error","finally","clearTimeout","ajaxCall","status","init","isInitialized","classList","add","langString","langObject","it","en","version"],"mappings":"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"}