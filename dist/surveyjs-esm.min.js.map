{"version":3,"file":"surveyjs-esm.min.js","sources":["../src/modules/helpers/ajaxCall.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/deepFreeze.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/fieldsStringSelectorSurvey.js","../src/modules/helpers/getQuestionId.js","../src/modules/helpers/isEmptyObject.js","../src/modules/helpers/replaceObjectKeysInString.js","../src/modules/helpers/sortList.js","../src/modules/helpers/webStorage.js","../src/modules/utils/getQuestionObject.js","../src/modules/optionsUtils.js","../src/modules/options.js","../src/modules/internals.js","../src/modules/listenerCallbacks/submit.js","../src/modules/utils/getAnswerIndexInWebStorage.js","../src/modules/listenerCallbacks/validation.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/helpers/arrayMove.js","../src/modules/buildSurvey/generateQAcodeUtils/generateOptionTags.js","../src/modules/buildSurvey/generateQAcodeUtils/getAttributesStringHTML.js","../src/modules/helpers/toKebabCase.js","../src/modules/buildSurvey/generateQAcodeUtils/generateAnswers.js","../src/modules/buildSurvey/generateQAcodeUtils/getTemplates.js","../src/modules/buildSurvey/buildSurvey.js","../src/modules/buildSurvey/generateQAcode.js","../src/index.js","../src/modules/buildSurvey/populateAnswers.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/destroy.js"],"sourcesContent":["\nexport const ajaxCall = ( url = location.href, options = {} ) => {\n\n    let timeoutTimer;\n\n    options.headers = new Headers( options.headers );\n\n    /* SET AbortController FOR timeout */\n    if ( options.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        options.signal = signal;\n\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, options.timeout);\n    }\n\n    return fetch( url, options )\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n        });\n        \n}\n","\nexport const customEvents = {\n    init: 'sjs:init'\n}\n","\nexport const deepFreeze = obj => {\n\n    Object.getOwnPropertyNames(obj).forEach(name => {\n        const prop = obj[name];\n        if( typeof prop === 'object' && prop !== null ){\n            deepFreeze(prop);\n        }\n    });\n    return Object.freeze(obj);\n    \n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nexport const fieldsStringSelectorSurvey = '[data-surveyjs-form] input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]), [data-surveyjs-form] select, [data-surveyjs-form] textarea, [data-name=\"bind-surveyjs-answer\"]'\n","\nexport const getQuestionId = fieldEl => {\n    const containerEl = fieldEl.closest('[data-question-id]');\n    return (containerEl && containerEl.getAttribute('data-question-id')) || '';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const isEmptyObject = object => {\n    return isPlainObject(object) && Object.getOwnPropertyNames(object).length === 0;\n}\n","\nexport const replaceObjectKeysInString = (obj, stringHTML) => {\n    return Object.keys(obj).reduce((accString, name) => {\n        const regexStr = new RegExp( '{{' + name + '}}', 'g' );\n        return accString.replace(regexStr, obj[name]);\n    }, stringHTML);\n}\n","\nexport const sortList = ( list ) => {\n    if( list[0]['sort'] ){\n        list.sort((a, b) => a['sort'] > b['sort']);\n    }\n    return list;\n}\n","\nexport const webStorage = () => {\n\n    const checkLocalStorage = () => {\n        const mod = 'check_storage';\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    const isAvailable = checkLocalStorage();\n\n    if( isAvailable ){\n        // setObject METHOD FOR HTML STORAGE -> EG: localStorage.setObject( name, JSobj )\n        // TO STORE A JS OBJECT ( AS JSON STRING ) INSIDE THE STORAGE\n        Storage.prototype.setObject = function( key, value ) {\n            this.setItem( key, JSON.stringify(value) );\n        }\n\n        // getObject METHOD FOR HTML STORAGE -> EG: localStorage.getObject( name )\n        // RETURN THE DATA ( STORED AS JSON STRING ) AS JS OBJECT\n        Storage.prototype.getObject = function( key ) {\n            const value = this.getItem( key );\n            return value && JSON.parse( value );\n        }\n    }\n\n    return {\n        isAvailable: isAvailable\n    }\n\n}\n","\nexport const getQuestionObject = ( data, questionId ) => {\n\n    const questions = data.questions,\n          qLength = questions.length;\n\n    let obj = {};\n    \n    for(let q=0; q<qLength; q++){\n        const question = questions[q];\n        if( question.id == questionId ){\n            obj = question;\n            break;\n        }\n    }\n\n    return obj;\n\n}","\nimport { fieldsStringSelectorSurvey, getQuestionId, isEmptyObject, mergeObjects } from './helpers';\nimport { getQuestionObject } from './utils/getQuestionObject';\n\nexport const defaultCallbacksInOptions = {\n    formOptions: {\n\n        beforeSend: function beforeSend_surveyDefault( data ){\n            let isHacking = false;\n            const instance = this;\n            const surveyContEl = instance.formEl.closest('[data-surveyjs-container]');\n            const fieldsList = Array.from( surveyContEl.querySelectorAll(fieldsStringSelectorSurvey) );\n\n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                \n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                const questionId = getQuestionId(fieldEl);\n                const questionObj = getQuestionObject( instance.data, questionId );\n\n                // BASED ON SURVEY JSON FILE, FORCE REQUIRED FIELDS TO BE VALIDATED\n                // THIS AVOIDS USERS TO HACK THE SURVEY, FOR EXAMPLE REMOVING required ATTRIBUTE FROM THE HTML\n                if( questionId !== '' && questionObj && !!questionObj.required ){\n\n                    const isRequiredFrom = fieldEl.matches('[data-required-from]');\n                    const reqMoreEl = document.querySelector(fieldEl.getAttribute('data-required-from'));\n                    if( !isRequiredFrom || ( isRequiredFrom && reqMoreEl.checked ) ){\n                        if( !fieldEl.required ){\n                            // FIELD IS NOT REQUIRED BUT IT SHOULD => USER HACKED FIELD\n                            isHacking = true;\n                        }\n                        fieldEl.required = true;\n                    }\n                    \n                }\n\n            });\n\n            if( isHacking ){\n                // USER IS HACKING FORM ( REMOVING ATTRIBUTE required FROM A FIELD )\n                // => FORCE VALIDATION TO SHOW ERROR AND STOP SUBMIT\n                const fieldOptions = mergeObjects({}, instance.options.fieldOptions, {focusOnRelated: false});\n                return instance.validateForm( fieldOptions )\n                    .then(formRes => {\n                        data.stopExecution = true;\n                        return data;\n                    });\n            }\n            return data;\n        },\n\n        getFormData: function getFormData_surveyDefault(){\n            const formEl = this.formEl;\n            const instance = formEl.formjs;\n            const fieldsList = Array.from( formEl.closest('[data-surveyjs-container]').querySelectorAll(fieldsStringSelectorSurvey) );\n            const obj = {\n                    answers: [],\n                    id: instance.data.id\n                };\n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                // EACH QUESTION HAS ITS OWN OBJECT ( qaObj ) THAT CONTAINS THE RELATED DATA:\n                // question:    THE QUESTION ID ( undefined FOR QUESTIONS WITH ATTRIBUTE data-required-form - will be skipped later )\n                // answer       AN OBJECT THAT CONTAINS THE FOLLOWS:\n                //                  value:      THE ANSWER VALUE\n                //                  related:    IF THE ANSWER IS REQUIRED FROM ANOTHER ANSWER (SEE BELOW)\n                const questionId = getQuestionId(fieldEl),\n                      qaObj = {\n                        question: questionId,\n                        answer: {\n                            value: fieldEl.value || ''\n                        }\n                    };\n\n                // A FIELD WITH ATTRIBUTE 'data-required-from' IS MANAGED TOGETHER WITH ITS RELATED FIELD ( WHICH HAS ATTRIBUTE 'data-require-more' )\n                // IF QUESTION ID IS EMPTY -> SKIP THE FIELD ( USEFUL FOR FORM FIELDS OUTSIDE THE SURVEY BODY )\n                if(\n                    fieldEl.matches('[data-required-from]') || \n                    questionId === '' || \n                    isEmptyObject( getQuestionObject(instance.data, questionId) )\n                ){ return; }\n\n                if( type === 'radio' ){\n                    const containerEl = fieldEl.closest('form') ? formEl : fieldEl.closest(instance.options.fieldOptions.questionContainer);\n                    const checkedEl = containerEl.querySelector('[name=\"'+ name +'\"]:checked');\n\n                    qaObj.answer.value = (checkedEl && checkedEl.value) || '';\n\n                    // FOR RADIO THAT REQUIRE THE USER TO GIVE ONE MORE ANSWER\n                    if( checkedEl && checkedEl.matches('[data-require-more]') ){\n                        qaObj.answer.related = formEl.querySelector('[data-required-from=\"#'+ checkedEl.id +'\"]').value;\n                    }\n                }\n\n                if( type === 'checkbox' && fieldEl.matches('[data-checks]') ){\n                    qaObj.answer.value = [];\n                    Array.from(formEl.querySelectorAll('[name=\"'+ name +'\"]:checked')).forEach(el => {\n                        qaObj.answer.value.push( el.value );\n                    });\n                }\n                \n                obj.answers.push( qaObj );\n            });\n        \n            return obj;\n        }\n    \n    }\n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n    cssClasses: {\n        checkbox:           'form-check-input',\n        default:            'form-control',\n        file:               'form-control-file',\n        label:              'form-check-label',\n        radio:              'form-check-input',\n        wrapper: {\n            checkbox:       'form-check',\n            default:        '',\n            radio:          'form-check'\n        }\n    },\n    fieldErrorFeedback:     true,\n    formOptions: {\n        beforeSend:         [defaultCallbacksInOptions.formOptions.beforeSend],\n        getFormData:        defaultCallbacksInOptions.formOptions.getFormData\n    },\n    initAjaxOptions: {\n        cache:              'no-store',\n        credentials:        'same-origin',\n        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept':       'application/json'\n        },\n        method:             'GET',\n        mode:               'same-origin',\n        redirect:           'follow',\n        timeout:            0\n    },\n    messages:{\n        maxChoice:                 'ANSWERS MAX',\n        errorMessage:              'Answer is necessary.',\n        errorMessageMultiChoice:   'You must choose from {{checksMin}} to {{checksMax}} answers.'\n    },\n    templates: {\n        error:      '<div class=\"surveyjs-error-message\">{{errorMessage}}</div>',\n        \n        input:      '<input {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-input surveyjs-{{answerType}} {{fieldClasses}}\" />',\n\n        label:      '<label for=\"{{answerCode}}\" class=\"surveyjs-label {{labelClasses}}\">{{labelString}}</label>',\n\n        loading:    '<div class=\"surveyjs-loading\" data-surveyjs-loading>Loading...</div>',\n\n        question:   '<div class=\"surveyjs-question-wrapper\" data-question-id=\"{{questionId}}\" data-formjs-question>'+\n                        '<div class=\"surveyjs-question-header\">Question {{questionNumber}}</div>'+\n                        '<div class=\"surveyjs-question-body\">'+\n                            '<div class=\"surveyjs-question-text\">{{questionText}}</div>'+\n                            '<div class=\"surveyjs-answers-wrapper form-group\">'+\n                                '{{answersHTML}}'+\n                                '{{errorsHTML}}'+\n                            '</div>'+\n                        '</div>'+\n                    '</div>',\n        \n        select:     '<select {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-select {{fieldClasses}}\">'+\n                        '{{optionsHtml}}'+\n                    '</select>',\n        \n        textarea:   '<textarea {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}\" class=\"surveyjs-textarea {{fieldClasses}}\"></textarea>',\n\n        wrapper: {\n            default:    '<div class=\"surveyjs-field-wrapper surveyjs-wrapper-{{answerType}} {{wrapperClasses}}\">'+\n                            '{{fieldTemplate}}'+\n                            '{{labelTemplate}}'+\n                        '</div>',\n\n            errors:     '<div class=\"surveyjs-errors-wrapper\" data-surveyjs-errors>{{errorTemplates}}</div>',\n            \n            nested:     '<div class=\"surveyjs-field-wrapper surveyjs-nested-parent surveyjs-wrapper-{{answerType}}\">'+\n                            '{{labelTemplate}}'+\n                            '<div class=\"surveyjs-nested-container surveyjs-field-indent\">'+\n                                '{{nestedFieldsHTML}}'+\n                            '</div>'+\n                        '</div>',\n            \n            related:    '<div class=\"surveyjs-field-wrapper input-group {{wrapperClasses}}\">'+\n                            '<div class=\"input-group-prepend\">'+\n                                '<div class=\"input-group-text form-check surveyjs-wrapper-radio\">'+\n                                    '{{fieldTemplate}}'+\n                                    '{{labelTemplate}}'+\n                                '</div>'+\n                            '</div>'+\n                            '{{relatedFieldHTML}}'+\n                        '</div>'\n        }\n    },\n    useWebStorage:          true\n}\n","\nexport const internals = {\n    storageArray: [],\n    storageName: 'Survey_' + location.href + '_{{surveyFormName}}_surveyId[{{surveyId}}]'\n}\n","\nexport function submit( event ){\n    const self = event.target.formjs;\n    event.data.then(() => {\n        if( self.options.useWebStorage ){\n            sessionStorage.removeItem( self.internals.storageName );\n        }\n    });\n}\n","\nexport const getAnswerIndexInWebStorage = ( internals, fieldName, multiChoiceValue = '' ) => {\n\n    const wsSurvey = sessionStorage.getObject( internals.storageName );\n            \n    if( wsSurvey ){\n        const wsSurveyLength = wsSurvey.length;\n        \n        for(let ws=0; ws<wsSurveyLength; ws++){\n            const lsItem = wsSurvey[ws];\n\n            if( lsItem.field === fieldName ){\n                if( multiChoiceValue ){\n                    if( lsItem.value !== multiChoiceValue ){\n                        continue;\n                    }\n                }\n                return ws;\n            }\n        }\n    }\n    \n    return -1;\n\n}","\nimport { getQuestionId, isEmptyObject, isFieldForChangeEvent } from '../helpers';\nimport { getAnswerIndexInWebStorage }   from '../utils/getAnswerIndexInWebStorage';\nimport { getQuestionObject }            from '../utils/getQuestionObject';\n\nexport function validation( event ){\n\n    const eventName = event.type,\n          fieldEl = event.target,\n          self = fieldEl.closest('form').formjs,\n          internals = self.internals,\n          containerEl = fieldEl.closest( self.options.fieldOptions.questionContainer ),\n          fieldValue = fieldEl.value,\n          isMultiChoice = fieldEl.matches('[data-checks]'),\n          isRequireMore = fieldEl.matches('[data-require-more]'),\n          isRequiredFrom = fieldEl.matches('[data-required-from]'),\n          reqMoreEl = isRequiredFrom ? containerEl.querySelector(fieldEl.getAttribute('data-required-from')) : null;\n\n    // VARS USED TO VALIDATE THE FILED IF IT IS REQUIRED\n    const itemEl = isRequiredFrom ? reqMoreEl : fieldEl,\n          questionId = getQuestionId(itemEl),\n          isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl),\n          questionObj = getQuestionObject(self.data, questionId);\n\n    // IF IT'S NOT A SURVEY QUESTION -> SKIP\n    if( isEmptyObject(questionObj) ){ return true; }\n\n    if(\n        (isFieldForChangeEventBoolean && eventName === 'change') ||\n        (!isFieldForChangeEventBoolean && eventName !== 'change')\n    ){\n        \n        // MANAGE ITEMS IN LOCAL STORAGE ( IF AVAILABLE AND USABLE )\n        if( self.options.useWebStorage && !fieldEl.matches('[data-exclude-storage]') ){\n            const inArrayPos = getAnswerIndexInWebStorage( internals, fieldEl.name, (isMultiChoice ? fieldValue : false) );\n            const inArrayRequireMorePos = getAnswerIndexInWebStorage( internals, fieldEl.name + '-more' );\n\n            let storageArray = internals.storageArray;\n\n            if( !isRequireMore && !isRequiredFrom && inArrayRequireMorePos !== -1 ){\n                storageArray.splice(inArrayRequireMorePos, 1);\n            }\n\n            if( inArrayPos !== -1 ){\n                if( isMultiChoice ){\n                    if( !fieldEl.checked && storageArray[inArrayPos].value === fieldValue ){\n                        // REMOVE ITEM FROM LS\n                        storageArray.splice(inArrayPos, 1);\n                    } else {\n                        // ADD ITEM TO LS\n                        storageArray.push( { field: fieldEl.name, value: fieldValue } );\n                    }\n                } else {\n                    if( fieldValue !== '' ){\n                        storageArray[inArrayPos].value = fieldValue;\n                    } else {\n                        storageArray.splice(inArrayPos, 1); \n                    }\n                }\n            } else {\n                if( fieldValue !== '' ){\n                    if( isRequiredFrom && fieldValue !== '' ){\n                        const oldFieldNamePos = getAnswerIndexInWebStorage( internals, reqMoreEl.name );\n                        if( oldFieldNamePos !== -1 ){\n                            storageArray.splice(oldFieldNamePos, 1);\n                        }\n                        storageArray.push( { field: reqMoreEl.name, value: reqMoreEl.value } );\n                    }\n                    storageArray.push( { field: fieldEl.name, value: fieldValue } );\n                    if( isRequireMore ){\n                        const elReqFromEl = fieldEl.closest('form').querySelector( '[data-required-from=\"#' + fieldEl.id + '\"]' );\n                        storageArray.push( { field: elReqFromEl.name, value: elReqFromEl.value } );\n                    }\n                }\n            }\n\n            sessionStorage.setObject( internals.storageName, storageArray );\n        }\n\n        // BASED ON JSON DATA, FORCE REQUIRED FIELDS TO BE VALIDATED\n        if( typeof questionObj.required !== 'undefined' ){\n            fieldEl.required = true;\n        }\n\n    }\n    \n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { arrayMove, getQuestionId } from '../helpers';\nimport { getQuestionObject } from '../utils/getQuestionObject';\n\nexport function validationEnd( event ){\n    const fieldEl = event.data.fieldEl;\n    const errors = event.data.errors;\n    const instance = event.target.formjs;\n    \n    const questionId = getQuestionId(fieldEl);\n    const questionObj = getQuestionObject(instance.data, questionId);\n\n    if( errors && isPlainObject(questionObj.errorMessage) ){\n        let errorsList = Object.keys(errors);\n        if( errors.rule ){\n            // PUT ERROR \"rule\" AS FIRST, SO THAT A GENERIC ERROR IS SHOWN BEFORE ALL OTHERS\n            const ruleIndex = errorsList.indexOf('rule');\n            errorsList = arrayMove(errorsList, ruleIndex, 0);\n        }\n        const errorsWrapper = fieldEl.closest( instance.options.fieldOptions.questionContainer ).querySelector('[data-surveyjs-errors]');\n        const errorsHTML = errorsList.reduce((accHTML, name) => {\n            const errorMessage = questionObj.errorMessage[name] || '';\n            return accHTML += errorMessage ? instance.options.templates.error.replace('{{errorMessage}}', errorMessage) : '';\n        }, '');\n\n        errorsWrapper.innerHTML = errorsHTML;\n    }\n}\n","\nexport const arrayMove = (array, from, to) => {\n    array.splice(to, 0, array.splice(from, 1)[0]);\n    return array;\n}\n","\nimport { sortList } from '../../helpers';\n\nexport const generateOptionTags = ( optionsList = [] ) => {\n\n    return sortList( optionsList ).reduce((optionsHTML, opt) => {\n        return optionsHTML += `<option value=\"${opt.value}\">${opt.label}</option>`;\n    }, '');\n\n}","\nimport { toKebabCase } from '../../helpers';\n\nexport const getAttributesStringHTML = ( answerObj, answerCode, isRequired ) => {\n    const excludedAttrs = ['data', 'id', 'label', 'nested', 'related', 'sort'];\n    \n    if( /^(option|textarea)$/.test(answerObj.type) ){\n        excludedAttrs.push('type', 'value');\n    }\n\n    let string = '';\n\n    Object.keys(answerObj)\n        .filter(name => excludedAttrs.indexOf(name) === -1)\n        .forEach(name => {\n            string += ` ${name}=\"${answerObj[name]}\"`;\n        });\n\n    if( answerObj.data ){\n        Object.keys(answerObj.data).forEach(name => {\n            string += ` data-${toKebabCase(name)}=\"${answerObj.data[name]}\"`;\n        });\n    }\n\n    if( isRequired ){\n        string += ' required';\n    }\n\n    if( answerObj.related ){\n        string += ' data-require-more';\n    }\n\n    string += ` id=\"${answerCode}\"`;\n\n    return string.trim();\n}\n","\nexport const toKebabCase = ( string = '', useAllCaps = false ) => {\n    let newString = string.trim().replace(/(([_ ])([a-z]))|(([a-z])?([A-Z]))/g, (match, p1, p2, p3, p4, p5, p6) => {\n        const concatGroup = p3 ? '-' + p3 : (p5 || '') + '-' + p6;\n        return concatGroup.toLowerCase();\n    } );\n    return useAllCaps ? newString.toUpperCase() : newString;\n}\n","\nimport { mergeObjects, replaceObjectKeysInString, sortList } from '../../helpers';\nimport { generateOptionTags }       from './generateOptionTags';\nimport { getAttributesStringHTML }  from './getAttributesStringHTML';\nimport { getTemplates }             from './getTemplates';\n\nexport const generateAnswers = ( answersList, extraData, options ) => {\n\n    let allAnswersHTML = '';\n    let previousType = '';\n\n    sortList( answersList ).forEach((answer, index) => {\n\n        let answerHTML = '';\n\n        // COLLECT USEFUL DATA\n        // answerType => checkbox, date, email, radio, select, text, textarea, etc...\n        const answerType = answer.type === 'option' ? 'select' : answer.type;\n        \n        if( answerType === 'select' && previousType === answerType ){ return; }\n\n        previousType = answerType;\n\n        if( extraData.question.checks ){\n            answer = mergeObjects({}, answer, {data:{checks:extraData.question.checks}});\n        }\n        \n        const answerCode = `${answerType}-${extraData.surveyId}-${extraData.question.id}-${answerType === 'select' ? (index + 1) : answer.id}`;\n        const answerData = {\n            questionNumber: extraData.question.index + 1,\n            wrapperClasses: options.cssClasses.wrapper[answerType] || options.cssClasses.wrapper.default,\n            fieldAttributes: getAttributesStringHTML( answer, answerCode, extraData.question.isRequired ),\n            fieldClasses: options.cssClasses[answerType] || options.cssClasses.default,\n\n            answerType,\n            answerCode,\n            addMoreName: '',\n\n            labelString: answer.label || '',\n            labelClasses: options.cssClasses.label\n        };\n\n        let relatedFieldHTML = '';\n        if( answer.related ){\n            const relatedType = answer.related.type || 'select';\n            const relatedIsSelect = relatedType === 'select';\n            const relatedObj = relatedIsSelect ? mergeObjects({}, answer) : answer.related;\n\n            relatedObj.type = relatedIsSelect ? 'option' : relatedType;\n            relatedObj.id = '';\n            relatedObj.data = mergeObjects({}, relatedObj.data, {requiredFrom:'#'+answerCode});\n            delete relatedObj.related;\n\n            const answerDataRelated = {\n                fieldAttributes: getAttributesStringHTML(relatedObj, '', false),\n                answerType: relatedType,\n                addMoreName: '-more',\n                fieldClasses: relatedIsSelect ? options.cssClasses.select : (options.cssClasses[relatedType] || options.cssClasses.default)\n            };\n\n            relatedFieldHTML = options.templates[relatedType] || options.templates.input;\n            if( relatedIsSelect ){\n                const optionsHtml = generateOptionTags( answer.related );\n                relatedFieldHTML = relatedFieldHTML.replace('{{optionsHtml}}', optionsHtml);\n            }\n\n            relatedFieldHTML = replaceObjectKeysInString(answerDataRelated, relatedFieldHTML);\n        }\n        \n        // TAKE RIGHT TEMPLATES ( wrapper, field and label ) AND PUT ALL TOGETHER\n        // answerTypeForTemplate => related, input, nested, select, textarea, etc...\n        const answerTypeForTemplate = answer.related ? 'related' : (answer.nested ? 'nested' : answerType);\n        const templates = getTemplates( answerTypeForTemplate, options.templates );\n\n        let nestedFieldsHTML = '';\n        if( answer.nested ){\n            nestedFieldsHTML = generateAnswers( answer.nested, extraData, options );\n        }\n\n        let optionsHtml = '';\n        if( answerType === 'select' ){\n            optionsHtml = generateOptionTags( answersList );\n        }\n\n        answerHTML = templates.wrapper\n                        .replace('{{relatedFieldHTML}}', relatedFieldHTML)\n                        .replace('{{fieldTemplate}}', templates.field)\n                        .replace('{{optionsHtml}}', optionsHtml)\n                        .replace('{{labelTemplate}}', templates.label)\n                        .replace('{{nestedFieldsHTML}}', nestedFieldsHTML);\n        allAnswersHTML += replaceObjectKeysInString(answerData, answerHTML);\n\n    });\n\n    return allAnswersHTML;\n\n}\n","\nexport const getTemplates = ( answerType, templates ) => {\n    return {\n        field: templates[answerType] || templates.input,\n        label: /^(checkbox|nested|radio|related)$/.test(answerType) ? templates.label : '',\n        wrapper: templates.wrapper[answerType] || templates.wrapper.default\n    }\n}\n","\nimport { generateQAcode } from './generateQAcode';\n\nexport const buildSurvey = ( data, formEl, options, internals ) => {\n    \n    const formName = formEl.getAttribute('name') || '';\n    \n    // REPLACE SURVEY ID AND FORM NAME IN WEB STORAGE NAME\n    internals.storageName = internals.storageName.replace( /{{surveyId}}/, data.id );\n    internals.storageName = internals.storageName.replace( /{{surveyFormName}}/, formName );\n    \n    const qaHtmlAll = generateQAcode( data.questions, data.id, options );\n    formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforeend', qaHtmlAll );\n\n    // MANAGE EXTERNAL QUESTION\n    const extQuestion = data.questions.filter(obj => obj.external)[0];\n    if( extQuestion ){\n        const externalCont = formEl.closest('[data-surveyjs-container]').querySelector('[data-surveyjs-external]');\n        \n        externalCont.setAttribute('data-question-id', extQuestion.id);\n        extQuestion.answers.forEach((answer, index) => {\n            const externalField = externalCont.querySelectorAll('[data-field]')[index];\n            const fieldProps = {\n                    id: `${answer.type}-${data.id}-${extQuestion.id}-${answer.id}`,\n                    type: answer.type,\n                    value: answer.value,\n                    required: !!extQuestion.required\n                };\n            \n            Object.keys(fieldProps).forEach(name => {\n                externalField[name] = fieldProps[name];\n            });\n\n            const answerCont = externalField.closest('[data-answer]');\n            answerCont.querySelector('label').setAttribute('for', fieldProps.id);\n            answerCont.querySelector('[data-label]').innerHTML = answer.label;\n            externalCont.querySelector('[data-question]').innerHTML = extQuestion.question;\n        });\n    }\n\n}\n","\nimport { isPlainObject, replaceObjectKeysInString, sortList } from '../helpers';\nimport { generateAnswers } from './generateQAcodeUtils/generateAnswers';\n\nexport const generateQAcode = ( questions, surveyId, options ) => {\n\n    return sortList( questions ).reduce((accCode, questionObj, index) => {\n        if( questionObj.external ){ return accCode; }\n\n        let qaHtml = options.templates.question;\n        const questionId = questionObj.id;\n        const questionNumber = index + 1;\n        const extraData = {\n            surveyId,\n            question: {\n                id: questionId,\n                index,\n                isRequired: !!questionObj.required\n            }\n        };\n\n        if( questionObj.checks ){\n            extraData.question.checks = questionObj.checks;\n        }\n        \n        let answersHTML = generateAnswers( questionObj.answers, extraData, options );\n\n        const maxChoice = questionObj.checks ? JSON.parse(questionObj.checks) : '';\n        const checksMin = maxChoice[0] || '';\n        const checksMax = maxChoice[1] || '';\n        const maxChoiceText = maxChoice && options.messages.maxChoice ? ' ('+ checksMax +' '+ options.messages.maxChoice +')' : '';\n\n        const questionData = {\n            questionId,\n            questionNumber,\n            questionText: questionObj.question + maxChoiceText,\n            answersHTML,\n            errorsHTML: options.fieldErrorFeedback ? options.templates.wrapper.errors : ''\n        };\n        qaHtml = replaceObjectKeysInString(questionData, qaHtml);\n\n        if( options.fieldErrorFeedback ){\n            let errorMessage = maxChoice !== '' ? options.messages.errorMessageMultiChoice : (questionObj.errorMessage || options.messages.errorMessage);\n\n            // CASE OF MULTIPLE ERROR MESSAGES FROM JSON DATA => DYNAMICALLY MANAGED VIA EVENT LISTENER IN CONSTRUCTOR\n            if( isPlainObject(errorMessage) ){\n                errorMessage = '';\n            }\n\n            qaHtml = qaHtml.replace( /{{errorTemplates}}/g, errorMessage );\n        }\n\n        return accCode += replaceObjectKeysInString({checksMin, checksMax}, qaHtml);\n    }, '');\n\n}\n","\nimport { ajaxCall, customEvents, deepFreeze, dispatchCustomEvent, mergeObjects, webStorage } from './modules/helpers';\nimport { options }          from './modules/options';\nimport { internals }        from './modules/internals';\nimport { submit, validation, validationEnd } from './modules/listenerCallbacks';\nimport { buildSurvey }      from './modules/buildSurvey/buildSurvey';\nimport { populateAnswers }  from './modules/buildSurvey/populateAnswers';\nimport { destroy }          from './modules/destroy';\n\nimport Form from 'formjs-plugin';\n\nimport './index.scss';\n\nconst version = '3.0.0';\n\nclass Survey extends Form {\n\n    constructor( formEl, optionsObj = {} ){\n        if( !optionsObj.url || typeof optionsObj.url !== 'string' ){\n            throw new Error('\"options.url\" is missing or not a string!');\n        }\n\n        const options = mergeObjects( {}, Survey.prototype.options, optionsObj );\n\n        if( !webStorage().isAvailable ){\n            options.useWebStorage = false;\n        }\n\n        // CREATE FORM INSTANCE FOR SURVEY\n        super( formEl, options );\n        const self = this;\n        self.internals = internals;\n        self.options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n            const useCapturing = eventName === 'blur' ? true : false;\n            self.formEl.addEventListener(eventName, validation, useCapturing);\n        });\n\n        self.formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforebegin', self.options.templates.loading );\n\n        // CREATE SURVEY\n        const retrieveSurvey = ajaxCall(self.options.url, self.options.initAjaxOptions)\n            .then(response => {\n                if( response.status.toLowerCase() !== 'success' ){\n                    return Promise.reject(response);\n                }\n                return new Promise(resolve => {\n                    self.data = response.data;\n                    if( self.data.questions && self.data.questions.length > 0 ){\n                        buildSurvey(self.data, self.formEl, self.options, self.internals);\n                        if( self.options.useWebStorage ){\n                            populateAnswers(self.formEl, self.internals);\n                        }\n                        deepFreeze(self.data);\n                        self.formEl.addEventListener('fjs.field:validation', validationEnd);\n                        self.formEl.addEventListener('fjs.form:submit', submit);\n                        super.init().then(() => {\n                            self.isInitialized = true;\n                            self.formEl.closest('[data-surveyjs-container]').classList.add('surveyjs-init-success');\n                            resolve(response);\n                        });\n                    } else {\n                        resolve(response);\n                    }\n                });\n            })\n            .finally(() => {\n                const loadingBoxEl = self.formEl.querySelector('[data-surveyjs-loading]');\n                if( loadingBoxEl ){\n                    loadingBoxEl.parentNode.removeChild(loadingBoxEl);\n                }\n            });\n        \n        dispatchCustomEvent( self.formEl, customEvents.init, retrieveSurvey );\n    }\n\n    destroy(){\n        destroy(this.formEl);\n        super.destroy();\n    }\n\n    static setOptions( optionsObj ){\n        Survey.prototype.options = mergeObjects({}, Survey.prototype.options, optionsObj);\n    }\n\n}\n\nSurvey.prototype.isInitialized = false;\nSurvey.prototype.options = options;\nSurvey.prototype.version = version;\n\nexport default Survey;\n","\nexport const populateAnswers = ( formEl, internals ) => {\n\n    const WS = sessionStorage.getObject( internals.storageName );\n    if( WS ){\n        const surveyContEl = formEl.closest('[data-surveyjs-container]');\n        internals.storageArray = WS;\n        WS.forEach(item => {\n            const fieldFirst = surveyContEl.querySelector( '[name=\"' + item.field + '\"]' ),\n                  isRadioOrCheckbox = fieldFirst.matches('[type=\"radio\"], [type=\"checkbox\"]'),\n                  fieldEl = ( isRadioOrCheckbox ? surveyContEl.querySelector('[name=\"' + item.field + '\"][value=\"' + item.value + '\"]') : fieldFirst );\n            \n            if( isRadioOrCheckbox ){\n                fieldEl.checked = true;\n            } else {\n                fieldEl.value = item.value;\n            }\n        });\n    }\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nimport { submit, validation, validationEnd } from './listenerCallbacks';\n\nexport const destroy = formEl => {\n\n    formEl.formjs.options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.removeEventListener(eventName, validation, useCapturing);\n    });\n    formEl.removeEventListener('fjs.field:validation', validationEnd);\n    formEl.removeEventListener('fjs.form:submit', submit);\n    \n}\n"],"names":["customEvents","deepFreeze","obj","Object","getOwnPropertyNames","forEach","name","prop","freeze","isPlainObject","object","prototype","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","fieldsStringSelectorSurvey","getQuestionId","fieldEl","containerEl","closest","getAttribute","isEmptyObject","length","replaceObjectKeysInString","stringHTML","reduce","accString","regexStr","RegExp","replace","sortList","list","sort","a","b","webStorage","isAvailable","mod","localStorage","setItem","removeItem","e","checkLocalStorage","Storage","setObject","value","this","JSON","stringify","getObject","getItem","parse","getQuestionObject","data","questionId","questions","qLength","q","question","id","defaultCallbacksInOptions","formOptions","beforeSend","isHacking","instance","surveyContEl","formEl","fieldsList","querySelectorAll","fieldNameCheck","fieldTypeCheck","type","matches","questionObj","required","isRequiredFrom","reqMoreEl","document","querySelector","checked","fieldOptions","options","focusOnRelated","validateForm","then","formRes","stopExecution","getFormData","formjs","answers","qaObj","answer","checkedEl","questionContainer","related","el","cssClasses","checkbox","default","file","label","radio","wrapper","fieldErrorFeedback","initAjaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","messages","maxChoice","errorMessage","errorMessageMultiChoice","templates","error","input","loading","select","textarea","errors","nested","useWebStorage","internals","storageArray","storageName","location","href","submit","event","self","target","sessionStorage","getAnswerIndexInWebStorage","fieldName","multiChoiceValue","wsSurvey","wsSurveyLength","ws","lsItem","field","validation","eventName","fieldValue","isMultiChoice","isRequireMore","isFieldForChangeEventBoolean","isFieldForChangeEvent","inArrayPos","inArrayRequireMorePos","splice","oldFieldNamePos","elReqFromEl","validationEnd","errorsList","rule","ruleIndex","indexOf","to","array","errorsWrapper","errorsHTML","accHTML","innerHTML","generateOptionTags","optionsList","optionsHTML","opt","getAttributesStringHTML","answerObj","answerCode","isRequired","excludedAttrs","test","string","useAllCaps","newString","trim","match","p1","p2","p3","p4","p5","p6","toLowerCase","toUpperCase","toKebabCase","generateAnswers","answersList","extraData","allAnswersHTML","previousType","index","answerHTML","answerType","checks","surveyId","answerData","questionNumber","wrapperClasses","fieldAttributes","fieldClasses","addMoreName","labelString","labelClasses","relatedFieldHTML","relatedType","relatedIsSelect","relatedObj","requiredFrom","answerDataRelated","optionsHtml","getTemplates","nestedFieldsHTML","buildSurvey","formName","qaHtmlAll","accCode","external","qaHtml","answersHTML","checksMin","checksMax","maxChoiceText","questionData","questionText","generateQAcode","insertAdjacentHTML","extQuestion","externalCont","setAttribute","externalField","fieldProps","answerCont","Survey","Form","[object Object]","optionsObj","url","Error","super","validateOnEvents","split","useCapturing","addEventListener","retrieveSurvey","timeoutTimer","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","json","Promise","reject","catch","finally","clearTimeout","ajaxCall","status","resolve","WS","item","fieldFirst","isRadioOrCheckbox","populateAnswers","init","isInitialized","classList","add","loadingBoxEl","parentNode","removeChild","elem","eventOptions","bubbles","eventObj","Event","dispatchEvent","dispatchCustomEvent","removeEventListener","destroy","version"],"mappings":"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"}