{"version":3,"file":"surveyjs-esm.min.js","sources":["../src/modules/version.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/deepFreeze.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/getQuestionId.js","../src/modules/helpers/isEmptyObject.js","../src/modules/helpers/replaceObjectKeysInString.js","../src/modules/helpers/sortList.js","../src/modules/helpers/webStorage.js","../src/modules/utils/getQuestionObject.js","../src/modules/options.js","../src/modules/optionsUtils.js","../src/modules/helpers/fieldsStringSelectorSurvey.js","../src/modules/internals.js","../src/modules/listenerCallbacks/submit.js","../src/modules/utils/getAnswerIndex.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/helpers/arrayMove.js","../src/modules/buildSurvey/generateQAcodeUtils/generateOptionTags.js","../src/modules/buildSurvey/generateQAcodeUtils/getAttributesStringHTML.js","../src/modules/helpers/toKebabCase.js","../src/modules/buildSurvey/generateQAcodeUtils/generateAnswers.js","../src/modules/buildSurvey/generateQAcodeUtils/getTemplates.js","../src/modules/buildSurvey/buildSurvey.js","../src/modules/buildSurvey/generateQAcode.js","../src/index.js","../src/modules/helpers/ajaxCall.js","../src/modules/buildSurvey/populateAnswers.js","../src/modules/destroy.js"],"sourcesContent":["\nexport const version = '4.0.0';\n","\nexport const customEvents = {\n    destroy: 'sjs:destroy',\n    init: 'sjs:init'\n}\n","\nexport const deepFreeze = obj => {\n\n    Object.getOwnPropertyNames(obj).forEach(name => {\n        const prop = obj[name];\n        if( typeof prop === 'object' && prop !== null ){\n            deepFreeze(prop);\n        }\n    });\n    return Object.freeze(obj);\n    \n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const getQuestionId = fieldEl => {\n    const containerEl = fieldEl.closest('[data-question-id]');\n    return (containerEl && containerEl.getAttribute('data-question-id')) || '';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const isEmptyObject = object => {\n    return isPlainObject(object) && Object.getOwnPropertyNames(object).length === 0;\n}\n","\nexport const replaceObjectKeysInString = (obj, stringHTML) => {\n    return Object.keys(obj).reduce((accString, name) => {\n        const regexStr = new RegExp( '{{' + name + '}}', 'g' );\n        return accString.replace(regexStr, obj[name]);\n    }, stringHTML);\n}\n","\nexport const sortList = ( list ) => {\n    if( list[0]['sort'] ){\n        list.sort((a, b) => a['sort'] > b['sort']);\n    }\n    return list;\n}\n","\nexport const webStorage = () => {\n\n    const checkLocalStorage = () => {\n        const mod = 'check_storage';\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    const isAvailable = checkLocalStorage();\n\n    if( isAvailable ){\n        // setObject METHOD FOR HTML STORAGE -> EG: localStorage.setObject( name, JSobj )\n        // TO STORE A JS OBJECT ( AS JSON STRING ) INSIDE THE STORAGE\n        Storage.prototype.setObject = function( key, value ) {\n            this.setItem( key, JSON.stringify(value) );\n        }\n\n        // getObject METHOD FOR HTML STORAGE -> EG: localStorage.getObject( name )\n        // RETURN THE DATA ( STORED AS JSON STRING ) AS JS OBJECT\n        Storage.prototype.getObject = function( key ) {\n            const value = this.getItem( key );\n            return value && JSON.parse( value );\n        }\n    }\n\n    return {\n        isAvailable: isAvailable\n    }\n\n}\n","\nexport const getQuestionObject = ( questions, questionId ) => {\n\n    const qLength = questions.length;\n\n    let obj = {};\n    \n    for(let q=0; q<qLength; q++){\n        const question = questions[q];\n        if( question.id == questionId ){\n            obj = question;\n            break;\n        }\n    }\n\n    return obj;\n\n}","\nimport { optionsUtils } from './optionsUtils';\n\nexport const options = {\n    cssClasses: {\n        checkbox:           'form-check-input',\n        field:              'form-control',\n        file:               'form-control-file',\n        label:              'form-check-label',\n        radio:              'form-check-input',\n        wrapper: {\n            checkbox:       'form-check',\n            field:          '',\n            radio:          'form-check'\n        }\n    },\n    formOptions: {\n        getFormData:        optionsUtils.formOptions.getFormData\n    },\n    initAjaxOptions: {\n        cache:              'no-store',\n        credentials:        'same-origin',\n        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept':       'application/json'\n        },\n        method:             'GET',\n        mode:               'same-origin',\n        redirect:           'follow',\n        timeout:            0\n    },\n    messages:{\n        maxChoice:          'answers max',\n        error:              'Answer is necessary.',\n        errorMultiChoice:   'You must choose from {{checksMin}} to {{checksMax}} answers.'\n    },\n    showErrorMessage:       true,\n    templates: {\n        error:              '<div class=\"surveyjs-error-message\">{{errorMessage}}</div>',\n        \n        input:              '<input {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-input surveyjs-{{answerType}} {{fieldClasses}}\" />',\n\n        label:              '<label for=\"{{answerCode}}\" class=\"surveyjs-label {{labelClasses}}\">{{labelString}}</label>',\n\n        loading:            '<div class=\"surveyjs-loading\" data-surveyjs-loading>Loading...</div>',\n        \n        select:             '<select {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-select {{fieldClasses}}\">'+\n                                '{{optionsHtml}}'+\n                            '</select>',\n        \n        textarea:           '<textarea {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}\" class=\"surveyjs-textarea {{fieldClasses}}\"></textarea>',\n\n        wrapper: {\n            field:          '<div class=\"surveyjs-field-wrapper surveyjs-{{answerType}}-wrapper {{wrapperClasses}}\">'+\n                                '{{fieldTemplate}}'+\n                                '{{labelTemplate}}'+\n                            '</div>',\n            \n            nested:         '<div class=\"surveyjs-field-wrapper surveyjs-nested-wrapper\">'+\n                                '{{labelTemplate}}'+\n                                '<div class=\"surveyjs-nested-inner\">'+\n                                    '{{nestedFieldsHTML}}'+\n                                '</div>'+\n                            '</div>',\n\n            question:       '<div class=\"surveyjs-question-wrapper\" data-question-id=\"{{questionId}}\" data-formjs-question>'+\n                                '<div class=\"surveyjs-question-text\">{{questionText}}</div>'+\n                                '<div class=\"surveyjs-answers-wrapper\">'+\n                                    '{{answersHTML}}'+\n                                '</div>'+\n                                '<div class=\"surveyjs-errors-wrapper\" data-surveyjs-errors>{{errorTemplates}}</div>'+\n                            '</div>',\n            \n            related:        '<div class=\"surveyjs-field-wrapper surveyjs-related-wrapper input-group\">'+\n                                '<div class=\"input-group-prepend\">'+\n                                    '<div class=\"surveyjs-radio-wrapper input-group-text form-check\">'+\n                                        '{{fieldTemplate}}'+\n                                        '{{labelTemplate}}'+\n                                    '</div>'+\n                                '</div>'+\n                                '{{relatedFieldHTML}}'+\n                            '</div>'\n        }\n    },\n    useWebStorage:          true\n}\n","\nimport { fieldsStringSelectorSurvey, getQuestionId, isEmptyObject } from './helpers';\nimport { getQuestionObject } from './utils/getQuestionObject';\n\nexport const optionsUtils = {\n    formOptions: {\n\n        getFormData: function getFormData_surveyDefault( $filteredFields, trimValues ){\n            const instance = this;\n            const $form = instance.$form;\n            const fieldsList = Array.from( $form.closest('[data-surveyjs-wrapper]').querySelectorAll(fieldsStringSelectorSurvey) );\n            const obj = {\n                    answers: [],\n                    id: instance.data.id\n                };\n            \n            let fieldNameCheck = '';\n            let fieldTypeCheck = '';\n\n            fieldsList.forEach($field => {\n                const type = $field.type;\n                const name = $field.name;\n\n                if( name === fieldNameCheck && type === fieldTypeCheck ){ return; }\n                \n                if( !$field.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                // EACH QUESTION HAS ITS OWN OBJECT ( qaObj ) THAT CONTAINS THE RELATED DATA:\n                // question:    THE QUESTION ID ( undefined FOR QUESTIONS WITH ATTRIBUTE data-required-form - will be skipped later )\n                // answer       AN OBJECT THAT CONTAINS THE FOLLOWS:\n                //                  value:      THE ANSWER VALUE\n                //                  related:    IF THE ANSWER IS REQUIRED FROM ANOTHER ANSWER (SEE BELOW)\n                const questionId = getQuestionId($field);\n                const qaObj = {\n                        question: questionId,\n                        answer: {\n                            value: trimValues ? $field.value.trim() : ($field.value || '')\n                        }\n                    };\n\n                // A FIELD WITH ATTRIBUTE 'data-required-from' IS MANAGED TOGETHER WITH ITS RELATED FIELD ( WHICH HAS ATTRIBUTE 'data-require-more' )\n                // IF QUESTION ID IS EMPTY -> SKIP THE FIELD ( USEFUL FOR FORM FIELDS OUTSIDE THE SURVEY BODY )\n                if(\n                    $field.matches('[data-required-from]') || \n                    questionId === '' || \n                    isEmptyObject( getQuestionObject(instance.data.questions, questionId) )\n                ){ return; }\n\n                if( type === 'radio' ){\n                    const $container = $field.closest('form') ? $form : $field.closest(instance.options.fieldOptions.questionContainer);\n                    const $checked = $container.querySelector('[name=\"'+ name +'\"]:checked');\n\n                    qaObj.answer.value = ($checked && $checked.value) || '';\n\n                    // FOR RADIO THAT REQUIRE THE USER TO GIVE ONE MORE ANSWER\n                    if( $checked && $checked.matches('[data-require-more]') ){\n                        qaObj.answer.related = $form.querySelector('[data-required-from=\"#'+ $checked.id +'\"]').value;\n                    }\n                }\n\n                if( type === 'checkbox' && $field.matches('[data-checks]') ){\n                    qaObj.answer.value = [];\n                    Array.from($form.querySelectorAll('[name=\"'+ name +'\"]:checked')).forEach($el => {\n                        qaObj.answer.value.push( $el.value );\n                    });\n                }\n                \n                obj.answers.push( qaObj );\n            });\n        \n            return obj;\n        }\n    \n    }\n}\n","\nexport const fieldsStringSelectorSurvey = '[data-surveyjs-form] input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]), [data-surveyjs-form] select, [data-surveyjs-form] textarea, [data-surveyjs-external] [data-field]'\n","\nexport const internals = {\n    storageName: 'Survey_' + location.href + '_{{surveyFormName}}_surveyId[{{surveyId}}]'\n}\n","\nexport function submit( event ){\n    const self = event.target.surveyjs;\n    event.detail.then(() => {\n        if( self.options.useWebStorage ){\n            sessionStorage.removeItem( self.internals.storageName );\n        }\n    });\n}\n","\nexport const getAnswerIndex = ( list, fieldName, multiChoiceValue = '' ) => {\n\n    const listLength = list.length;\n\n    for(let item = 0; item < listLength; item++){\n        const lsItem = list[item];\n        if( lsItem.name === fieldName ){\n            if( multiChoiceValue ){\n                if( lsItem.value !== multiChoiceValue ){\n                    continue;\n                }\n            }\n            return item;\n        }\n    }\n    \n    return -1;\n\n}","\nimport { arrayMove, getQuestionId, isEmptyObject }  from '../helpers';\nimport { getQuestionObject }                        from '../utils/getQuestionObject';\nimport { getAnswerIndex }                           from '../utils/getAnswerIndex';\n\nexport function validationEnd( event ){\n    const $field = event.detail.$field;\n    const errors = event.detail.errors;\n    const instance = $field.closest('form').surveyjs;\n    const options = instance.options;\n    const $errorsWrapper = $field.closest( options.fieldOptions.questionContainer ).querySelector('[data-surveyjs-errors]');\n    \n    const questionId = getQuestionId($field);\n    const questionObj = getQuestionObject(instance.data.questions, questionId);\n\n    // IF IT'S NOT A SURVEY QUESTION -> SKIP\n    if( isEmptyObject(questionObj) ){ return true; }\n\n    // MANAGE MULTIPLE ERROR MESSAGES\n    if( $errorsWrapper && errors && isPlainObject(questionObj.errorMessage) ){\n        let errorsList = Object.keys(errors);\n        if( errors.rule ){\n            // PUT ERROR \"rule\" AS FIRST, SO THAT A GENERIC ERROR IS SHOWN BEFORE ALL OTHERS\n            const ruleIndex = errorsList.indexOf('rule');\n            errorsList = arrayMove(errorsList, ruleIndex, 0);\n        }\n        const errorsHTML = errorsList.reduce((accHTML, name) => {\n            const errorMessage = questionObj.errorMessage[name] || '';\n            return accHTML += errorMessage ? options.templates.error.replace('{{errorMessage}}', errorMessage) : '';\n        }, '');\n\n        $errorsWrapper.innerHTML = errorsHTML;\n    }\n\n    // MANAGE ITEMS IN LOCAL STORAGE ( IF AVAILABLE AND ACTIVE )\n    if( !event.detail.isCheckingForm && options.useWebStorage && !$field.matches('[data-exclude-storage]') ){\n        const storageName = instance.internals.storageName;\n        let storageArray = sessionStorage.getObject( storageName ) || [];\n\n        const name = $field.name;\n        const value = $field.value;\n        const isRequiredFrom = $field.matches('[data-required-from]');\n        const isMultiChoice = $field.matches('[data-checks]');\n        const isRequireMore = $field.matches('[data-require-more]');\n        const $reqMore = isRequiredFrom ? document.querySelector($field.getAttribute('data-required-from')) : null;\n\n        const inArrayRequireMorePos = getAnswerIndex( storageArray, name + '-more' );            \n        if( !isRequireMore && !isRequiredFrom && inArrayRequireMorePos >= 0 ){\n            // WHEN CHECKING A RADIO WITHOUT RELATED ANSWER ( IN A LIST OF RADIOS WITH ONE REQ-MORE ) => REMOVE RELATED ANSWER FROM STORAGE\n            storageArray.splice(inArrayRequireMorePos, 1);\n        }\n\n        const inArrayPos = getAnswerIndex( storageArray, name, (isMultiChoice ? value : false) );\n        if( inArrayPos >= 0 ){\n            // REMOVE ITEM FROM LS\n            storageArray.splice(inArrayPos, 1);\n            if( (isMultiChoice && $field.checked) || (!isMultiChoice && value !== '') ){\n                // ADD ITEM TO LS\n                storageArray.push( { name, value } );\n            }\n        } else if( value !== '' ){\n            if( isRequiredFrom ){\n                const reqMorePos = getAnswerIndex( storageArray, $reqMore.name );\n                if( reqMorePos >= 0 ){\n                    storageArray.splice(reqMorePos, 1);\n                }\n                storageArray.push( { name: $reqMore.name, value: $reqMore.value } );\n            }\n            storageArray.push( { name, value } );\n        }\n\n        sessionStorage.setObject( storageName, storageArray );\n    }\n\n    // BASED ON JSON DATA, FORCE REQUIRED FIELDS TO BE VALIDATED\n    if( questionObj.required && !$field.required && !$field.matches('[data-required-from]') ){\n        $field.required = true;\n        instance.validateField($field);\n    }\n}\n","\nexport const arrayMove = (array, from, to) => {\n    array.splice(to, 0, array.splice(from, 1)[0]);\n    return array;\n}\n","\nimport { sortList } from '../../helpers';\n\nexport const generateOptionTags = ( optionsList = [] ) => {\n\n    return sortList( optionsList ).reduce((optionsHTML, opt) => {\n        return optionsHTML += `<option value=\"${opt.value}\">${opt.label}</option>`;\n    }, '');\n\n}","\nimport { toKebabCase } from '../../helpers';\n\nexport const getAttributesStringHTML = ( answerObj, answerCode, isRequired ) => {\n    const excludedAttrs = ['data', 'id', 'label', 'nested', 'related', 'sort'];\n    \n    if( /^(option|textarea)$/.test(answerObj.type) ){\n        excludedAttrs.push('type', 'value');\n    }\n\n    let string = '';\n\n    Object.keys(answerObj)\n        .filter(name => excludedAttrs.indexOf(name) === -1)\n        .forEach(name => {\n            string += ` ${name}=\"${answerObj[name]}\"`;\n        });\n\n    if( answerObj.data ){\n        Object.keys(answerObj.data).forEach(name => {\n            string += ` data-${toKebabCase(name)}=\"${answerObj.data[name]}\"`;\n        });\n    }\n\n    if( isRequired ){\n        string += ' required';\n    }\n\n    if( answerObj.related ){\n        string += ' data-require-more';\n    }\n\n    string += ` id=\"${answerCode}\"`;\n\n    return string.trim();\n}\n","\nexport const toKebabCase = ( string = '', useAllCaps = false ) => {\n    let newString = string.trim().replace(/(([_ ])([a-z]))|(([a-z])?([A-Z]))/g, (match, p1, p2, p3, p4, p5, p6) => {\n        const concatGroup = p3 ? '-' + p3 : (p5 || '') + '-' + p6;\n        return concatGroup.toLowerCase();\n    } );\n    return useAllCaps ? newString.toUpperCase() : newString;\n}\n","\nimport { mergeObjects, replaceObjectKeysInString, sortList } from '../../helpers';\nimport { generateOptionTags }       from './generateOptionTags';\nimport { getAttributesStringHTML }  from './getAttributesStringHTML';\nimport { getTemplates }             from './getTemplates';\n\nexport const generateAnswers = ( answersList, extraData, options ) => {\n\n    let allAnswersHTML = '';\n    let previousType = '';\n\n    sortList( answersList ).forEach((answer, index) => {\n\n        let answerHTML = '';\n\n        // COLLECT USEFUL DATA\n        // answerType => checkbox, date, email, radio, select, text, textarea, etc...\n        const answerType = answer.type === 'option' ? 'select' : answer.type;\n        \n        if( answerType === 'select' && previousType === answerType ){ return; }\n\n        previousType = answerType;\n\n        if( extraData.question.checks ){\n            answer = mergeObjects({}, answer, {data:{checks:extraData.question.checks}});\n        }\n        \n        const answerCode = `${answerType}-${extraData.surveyId}-${extraData.question.id}-${answerType === 'select' ? (index + 1) : answer.id}`;\n        const answerData = {\n            questionNumber: extraData.question.index + 1,\n            wrapperClasses: options.cssClasses.wrapper[answerType] || options.cssClasses.wrapper.field,\n            fieldAttributes: getAttributesStringHTML( answer, answerCode, extraData.question.isRequired ),\n            fieldClasses: options.cssClasses[answerType] || options.cssClasses.field,\n\n            answerType,\n            answerCode,\n            addMoreName: '',\n\n            labelString: answer.label || '',\n            labelClasses: options.cssClasses.label\n        };\n\n        let relatedFieldHTML = '';\n        if( answer.related ){\n            const relatedType = answer.related.type || 'select';\n            const relatedIsSelect = relatedType === 'select';\n            const relatedObj = relatedIsSelect ? mergeObjects({}, answer) : answer.related;\n\n            relatedObj.type = relatedIsSelect ? 'option' : relatedType;\n            relatedObj.id = '';\n            relatedObj.data = mergeObjects({}, relatedObj.data, {requiredFrom:'#'+answerCode});\n            delete relatedObj.related;\n\n            const answerDataRelated = {\n                fieldAttributes: getAttributesStringHTML(relatedObj, '', false),\n                answerType: relatedType,\n                addMoreName: '-more',\n                fieldClasses: relatedIsSelect ? options.cssClasses.select : (options.cssClasses[relatedType] || options.cssClasses.field)\n            };\n\n            relatedFieldHTML = options.templates[relatedType] || options.templates.input;\n            if( relatedIsSelect ){\n                const optionsHtml = generateOptionTags( answer.related );\n                relatedFieldHTML = relatedFieldHTML.replace('{{optionsHtml}}', optionsHtml);\n            }\n\n            relatedFieldHTML = replaceObjectKeysInString(answerDataRelated, relatedFieldHTML);\n        }\n        \n        // TAKE RIGHT TEMPLATES ( wrapper, field and label ) AND PUT ALL TOGETHER\n        // answerTypeForTemplate => related, input, nested, select, textarea, etc...\n        const answerTypeForTemplate = answer.related ? 'related' : (answer.nested ? 'nested' : answerType);\n        const templates = getTemplates( answerTypeForTemplate, options.templates );\n\n        let nestedFieldsHTML = '';\n        if( answer.nested ){\n            nestedFieldsHTML = generateAnswers( answer.nested, extraData, options );\n        }\n\n        let optionsHtml = '';\n        if( answerType === 'select' ){\n            optionsHtml = generateOptionTags( answersList );\n        }\n\n        answerHTML = templates.wrapper\n                        .replace('{{relatedFieldHTML}}', relatedFieldHTML)\n                        .replace('{{fieldTemplate}}', templates.field)\n                        .replace('{{optionsHtml}}', optionsHtml)\n                        .replace('{{labelTemplate}}', templates.label)\n                        .replace('{{nestedFieldsHTML}}', nestedFieldsHTML);\n        allAnswersHTML += replaceObjectKeysInString(answerData, answerHTML);\n\n    });\n\n    return allAnswersHTML;\n\n}\n","\nexport const getTemplates = ( answerType, templates ) => {\n    return {\n        field: templates[answerType] || templates.input,\n        label: /^(checkbox|nested|radio|related)$/.test(answerType) ? templates.label : '',\n        wrapper: templates.wrapper[answerType] || templates.wrapper.field\n    }\n}\n","\nimport { generateQAcode } from './generateQAcode';\n\nexport const buildSurvey = ( data, $form, options ) => {\n    \n    const qaHtmlAll = generateQAcode( data.questions, data.id, options );\n    $form.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforeend', qaHtmlAll );\n\n    // MANAGE EXTERNAL QUESTION\n    const extQuestions = data.questions.filter(obj => obj.external);\n    if( extQuestions.length > 0 ){\n        const $surveyWrapper = $form.closest('[data-surveyjs-wrapper]');\n        extQuestions.forEach((question, qIndex) => {\n\n            const $externalCont = $surveyWrapper.querySelector('[data-surveyjs-external=\"'+ (qIndex+1) +'\"]');\n            \n            $externalCont.setAttribute('data-question-id', question.id);\n\n            question.answers.forEach((answer, aIndex) => {\n                const $externalField = $externalCont.querySelectorAll('[data-field]')[aIndex];\n                const fieldProps = {\n                        id: `${answer.type}-${data.id}-${question.id}-${answer.id}`,\n                        type: answer.type,\n                        value: answer.value,\n                        required: !!question.required\n                    };\n                \n                Object.keys(fieldProps).forEach(name => {\n                    $externalField[name] = fieldProps[name];\n                });\n\n                const $answerCont = $externalField.closest('[data-answer]');\n                $answerCont.querySelector('label').setAttribute('for', fieldProps.id);\n                $answerCont.querySelector('[data-label]').innerHTML = answer.label;\n                $externalCont.querySelector('[data-question]').innerHTML = question.question;\n            });\n\n        });\n    }\n\n}\n","\nimport { isPlainObject, replaceObjectKeysInString, sortList } from '../helpers';\nimport { generateAnswers } from './generateQAcodeUtils/generateAnswers';\n\nexport const generateQAcode = ( questions, surveyId, options ) => {\n\n    return sortList( questions ).reduce((accCode, questionObj, index) => {\n        if( questionObj.external ){ return accCode; }\n\n        let questionHTML = options.templates.wrapper.question;\n        const questionId = questionObj.id;\n        const questionNumber = index + 1;\n        const extraData = {\n            surveyId,\n            question: {\n                id: questionId,\n                index,\n                isRequired: !!questionObj.required\n            }\n        };\n\n        if( questionObj.checks ){\n            extraData.question.checks = questionObj.checks;\n        }\n        \n        const answersHTML = generateAnswers( questionObj.answers, extraData, options );\n\n        const maxChoice = questionObj.checks ? JSON.parse(questionObj.checks) : '';\n        const checksMin = maxChoice[0] || '';\n        const checksMax = maxChoice[1] || '';\n        const maxChoiceText = maxChoice && options.messages.maxChoice ? ' ('+ checksMax +' '+ options.messages.maxChoice +')' : '';\n\n        const questionData = {\n            questionId,\n            questionNumber,\n            questionText: questionObj.question + maxChoiceText,\n            answersHTML\n        };\n        questionHTML = replaceObjectKeysInString(questionData, questionHTML);\n\n        if( options.showErrorMessage ){\n            let errorMessage = maxChoice !== '' ? options.messages.errorMultiChoice : (questionObj.errorMessage || options.messages.error);\n\n            // CASE OF MULTIPLE ERROR MESSAGES FROM JSON DATA => DYNAMICALLY MANAGED VIA EVENT LISTENER IN CONSTRUCTOR\n            if( isPlainObject(errorMessage) ){\n                errorMessage = '';\n            }\n\n            questionHTML = questionHTML.replace( /{{errorTemplates}}/g, errorMessage );\n        }\n\n        return accCode += replaceObjectKeysInString({checksMin, checksMax}, questionHTML);\n    }, '');\n\n}\n","\nimport { version }          from './modules/version';\nimport { ajaxCall, customEvents, deepFreeze, dispatchCustomEvent, mergeObjects, webStorage } from './modules/helpers';\nimport { options }          from './modules/options';\nimport { internals }        from './modules/internals';\nimport { submit, validationEnd } from './modules/listenerCallbacks';\nimport { buildSurvey }      from './modules/buildSurvey/buildSurvey';\nimport { populateAnswers }  from './modules/buildSurvey/populateAnswers';\nimport { destroy }          from './modules/destroy';\n\nimport Form from 'formjs-plugin';\n\nclass Survey extends Form {\n\n    constructor( form, optionsObj = {} ){\n        if( !optionsObj.url || typeof optionsObj.url !== 'string' ){\n            throw new Error('\"options.url\" is missing or not a string!');\n        }\n\n        optionsObj = mergeObjects( {}, Survey.prototype.options, optionsObj );\n\n        if( !webStorage().isAvailable ){\n            optionsObj.useWebStorage = false;\n        }\n\n        // CREATE FORM INSTANCE FOR SURVEY\n        super( form, optionsObj );\n        const self = this;\n        self.internals = internals;\n        const $form = self.$form;\n        optionsObj = self.options;\n        const selfInternals = self.internals;\n\n        $form.surveyjs = self;\n        $form.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforebegin', optionsObj.templates.loading );\n\n        // CREATE SURVEY\n        const retrieveSurvey = ajaxCall(optionsObj.url, optionsObj.initAjaxOptions)\n            .then(response => {\n                if( response.status.toLowerCase() !== 'success' ){\n                    return Promise.reject(response);\n                }\n\n                if( response.data.questions && response.data.questions.length > 0 ){\n                    // REPLACE SURVEY ID AND FORM NAME IN WEB STORAGE NAME\n                    selfInternals.storageName = selfInternals.storageName.replace( /{{surveyId}}/, response.data.id );\n                    selfInternals.storageName = selfInternals.storageName.replace( /{{surveyFormName}}/, ($form.getAttribute('name') || '') );\n\n                    buildSurvey(response.data, $form, optionsObj);\n                    \n                    if( optionsObj.useWebStorage ){\n                        populateAnswers($form, selfInternals);\n                    }\n                    \n                    Object.defineProperty(self, 'data', {\n                        value: deepFreeze(response.data)\n                    });\n                    \n                    $form.addEventListener('fjs.field:validation', validationEnd);\n                    $form.addEventListener('fjs.form:submit', submit);\n                    $form.closest('[data-surveyjs-wrapper]').classList.add('surveyjs-init-success');\n\n                    if( optionsObj.formOptions.onInitCheckFilled ){\n                        return super.validateFilledFields().then(fields => {\n                            self.isInitialized = true;\n                            $form.closest('[data-surveyjs-wrapper]').classList.add('surveyjs-init-success');\n                            return response\n                        });\n                    }\n\n                    self.isInitialized = true;\n                    return response\n                }\n                \n                return response;\n            })\n            .finally(() => {\n                const $loadingBox = $form.querySelector('[data-surveyjs-loading]');\n                if( $loadingBox ){\n                    $loadingBox.parentNode.removeChild($loadingBox);\n                }\n            });\n        \n        dispatchCustomEvent( $form, customEvents.init, { detail: retrieveSurvey } );\n    }\n\n    destroy(){\n        super.destroy();\n        destroy(this.$form);\n        dispatchCustomEvent( this.$form, customEvents.destroy );\n    }\n\n    static setOptions( optionsObj ){\n        Survey.prototype.options = mergeObjects({}, Survey.prototype.options, optionsObj);\n    }\n\n}\n\nSurvey.prototype.isInitialized = false;\nSurvey.prototype.options = options;\nSurvey.prototype.version = version;\n\nexport default Survey;\n","\nexport const ajaxCall = ( url = location.href, options = {} ) => {\n\n    let timeoutTimer;\n\n    options.headers = new Headers( options.headers );\n\n    /* SET AbortController FOR timeout */\n    if ( options.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        options.signal = signal;\n\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, options.timeout);\n    }\n\n    return fetch( url, options )\n        .then(response => {\n            if( !response.ok ){\n                throw new Error(response.statusText);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            throw new Error(error.message);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n        });\n        \n}\n","\nexport const populateAnswers = ( $form, internals ) => {\n\n    const WS = sessionStorage.getObject( internals.storageName );\n    if( WS ){\n        const $surveyCont = $form.closest('[data-surveyjs-wrapper]');\n        WS.forEach(item => {\n            const $fieldFirst = $surveyCont.querySelector( '[name=\"' + item.name + '\"]' ),\n                  isRadioOrCheckbox = $fieldFirst.matches('[type=\"radio\"], [type=\"checkbox\"]'),\n                  $field = ( isRadioOrCheckbox ? $surveyCont.querySelector('[name=\"' + item.name + '\"][value=\"' + item.value + '\"]') : $fieldFirst );\n            \n            if( isRadioOrCheckbox ){\n                $field.checked = true;\n            } else {\n                $field.value = item.value;\n            }\n        });\n    }\n\n}\n","\nimport { submit, validationEnd } from './listenerCallbacks';\n\nexport const destroy = $form => {\n\n    $form.removeEventListener('fjs.field:validation', validationEnd);\n    $form.removeEventListener('fjs.form:submit', submit);\n\n    delete $form.surveyjs;\n    \n}\n"],"names":["customEvents","deepFreeze","obj","Object","getOwnPropertyNames","forEach","name","prop","freeze","isPlainObject","object","prototype","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","getQuestionId","fieldEl","containerEl","closest","getAttribute","isEmptyObject","length","replaceObjectKeysInString","stringHTML","reduce","accString","regexStr","RegExp","replace","sortList","list","sort","a","b","webStorage","isAvailable","mod","localStorage","setItem","removeItem","e","checkLocalStorage","Storage","setObject","value","this","JSON","stringify","getObject","getItem","parse","getQuestionObject","questions","questionId","qLength","q","question","id","options","cssClasses","checkbox","field","file","label","radio","wrapper","formOptions","getFormData","$filteredFields","trimValues","instance","$form","fieldsList","querySelectorAll","answers","data","fieldNameCheck","fieldTypeCheck","$field","type","matches","qaObj","answer","trim","$checked","fieldOptions","questionContainer","querySelector","related","$el","initAjaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","messages","maxChoice","error","errorMultiChoice","showErrorMessage","templates","input","loading","select","textarea","nested","useWebStorage","internals","storageName","location","href","submit","event","self","target","surveyjs","detail","then","sessionStorage","getAnswerIndex","fieldName","multiChoiceValue","listLength","item","lsItem","validationEnd","errors","$errorsWrapper","questionObj","errorMessage","errorsList","rule","ruleIndex","indexOf","to","array","splice","errorsHTML","accHTML","innerHTML","isCheckingForm","storageArray","isRequiredFrom","isMultiChoice","isRequireMore","$reqMore","document","inArrayRequireMorePos","inArrayPos","checked","reqMorePos","required","validateField","generateOptionTags","optionsList","optionsHTML","opt","getAttributesStringHTML","answerObj","answerCode","isRequired","excludedAttrs","test","string","useAllCaps","newString","match","p1","p2","p3","p4","p5","p6","toLowerCase","toUpperCase","toKebabCase","generateAnswers","answersList","extraData","allAnswersHTML","previousType","index","answerHTML","answerType","checks","surveyId","answerData","questionNumber","wrapperClasses","fieldAttributes","fieldClasses","addMoreName","labelString","labelClasses","relatedFieldHTML","relatedType","relatedIsSelect","relatedObj","requiredFrom","answerDataRelated","optionsHtml","getTemplates","nestedFieldsHTML","buildSurvey","qaHtmlAll","accCode","external","questionHTML","answersHTML","checksMin","checksMax","maxChoiceText","questionData","questionText","generateQAcode","insertAdjacentHTML","extQuestions","$surveyWrapper","qIndex","$externalCont","setAttribute","aIndex","$externalField","fieldProps","$answerCont","Survey","Form","[object Object]","form","optionsObj","url","Error","super","selfInternals","retrieveSurvey","timeoutTimer","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","statusText","json","catch","message","finally","clearTimeout","ajaxCall","status","Promise","reject","WS","$surveyCont","$fieldFirst","isRadioOrCheckbox","populateAnswers","defineProperty","addEventListener","classList","add","onInitCheckFilled","validateFilledFields","fields","isInitialized","$loadingBox","parentNode","removeChild","destroy","removeEventListener","version"],"mappings":"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"}