{"version":3,"file":"surveyjs-esm.min.js","sources":["../src/modules/helpers/ajaxCall.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/deepFreeze.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/getQuestionId.js","../src/modules/helpers/isEmptyObject.js","../src/modules/helpers/replaceObjectKeysInString.js","../src/modules/helpers/sortList.js","../src/modules/helpers/webStorage.js","../src/modules/utils/getQuestionObject.js","../src/modules/options.js","../src/modules/optionsUtils.js","../src/modules/helpers/fieldsStringSelectorSurvey.js","../src/modules/internals.js","../src/modules/listenerCallbacks/submit.js","../src/modules/utils/getAnswerIndexInWebStorage.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/helpers/arrayMove.js","../src/modules/buildSurvey/generateQAcodeUtils/generateOptionTags.js","../src/modules/buildSurvey/generateQAcodeUtils/getAttributesStringHTML.js","../src/modules/helpers/toKebabCase.js","../src/modules/buildSurvey/generateQAcodeUtils/generateAnswers.js","../src/modules/buildSurvey/generateQAcodeUtils/getTemplates.js","../src/modules/buildSurvey/buildSurvey.js","../src/modules/buildSurvey/generateQAcode.js","../src/index.js","../src/modules/buildSurvey/populateAnswers.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/destroy.js"],"sourcesContent":["\nexport const ajaxCall = ( url = location.href, options = {} ) => {\n\n    let timeoutTimer;\n\n    options.headers = new Headers( options.headers );\n\n    /* SET AbortController FOR timeout */\n    if ( options.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        options.signal = signal;\n\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, options.timeout);\n    }\n\n    return fetch( url, options )\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n        });\n        \n}\n","\nexport const customEvents = {\n    init: 'sjs:init'\n}\n","\nexport const deepFreeze = obj => {\n\n    Object.getOwnPropertyNames(obj).forEach(name => {\n        const prop = obj[name];\n        if( typeof prop === 'object' && prop !== null ){\n            deepFreeze(prop);\n        }\n    });\n    return Object.freeze(obj);\n    \n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nexport const getQuestionId = fieldEl => {\n    const containerEl = fieldEl.closest('[data-question-id]');\n    return (containerEl && containerEl.getAttribute('data-question-id')) || '';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const isEmptyObject = object => {\n    return isPlainObject(object) && Object.getOwnPropertyNames(object).length === 0;\n}\n","\nexport const replaceObjectKeysInString = (obj, stringHTML) => {\n    return Object.keys(obj).reduce((accString, name) => {\n        const regexStr = new RegExp( '{{' + name + '}}', 'g' );\n        return accString.replace(regexStr, obj[name]);\n    }, stringHTML);\n}\n","\nexport const sortList = ( list ) => {\n    if( list[0]['sort'] ){\n        list.sort((a, b) => a['sort'] > b['sort']);\n    }\n    return list;\n}\n","\nexport const webStorage = () => {\n\n    const checkLocalStorage = () => {\n        const mod = 'check_storage';\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    const isAvailable = checkLocalStorage();\n\n    if( isAvailable ){\n        // setObject METHOD FOR HTML STORAGE -> EG: localStorage.setObject( name, JSobj )\n        // TO STORE A JS OBJECT ( AS JSON STRING ) INSIDE THE STORAGE\n        Storage.prototype.setObject = function( key, value ) {\n            this.setItem( key, JSON.stringify(value) );\n        }\n\n        // getObject METHOD FOR HTML STORAGE -> EG: localStorage.getObject( name )\n        // RETURN THE DATA ( STORED AS JSON STRING ) AS JS OBJECT\n        Storage.prototype.getObject = function( key ) {\n            const value = this.getItem( key );\n            return value && JSON.parse( value );\n        }\n    }\n\n    return {\n        isAvailable: isAvailable\n    }\n\n}\n","\nexport const getQuestionObject = ( data, questionId ) => {\n\n    const questions = data.questions,\n          qLength = questions.length;\n\n    let obj = {};\n    \n    for(let q=0; q<qLength; q++){\n        const question = questions[q];\n        if( question.id == questionId ){\n            obj = question;\n            break;\n        }\n    }\n\n    return obj;\n\n}","\nimport { optionsUtils } from './optionsUtils';\n\nexport const options = {\n    cssClasses: {\n        checkbox:           'form-check-input',\n        default:            'form-control',\n        file:               'form-control-file',\n        label:              'form-check-label',\n        radio:              'form-check-input',\n        wrapper: {\n            checkbox:       'form-check',\n            default:        '',\n            radio:          'form-check'\n        }\n    },\n    fieldErrorFeedback:     true,\n    formOptions: {\n        getFormData:        optionsUtils.formOptions.getFormData\n    },\n    initAjaxOptions: {\n        cache:              'no-store',\n        credentials:        'same-origin',\n        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept':       'application/json'\n        },\n        method:             'GET',\n        mode:               'same-origin',\n        redirect:           'follow',\n        timeout:            0\n    },\n    messages:{\n        maxChoice:                 'ANSWERS MAX',\n        errorMessage:              'Answer is necessary.',\n        errorMessageMultiChoice:   'You must choose from {{checksMin}} to {{checksMax}} answers.'\n    },\n    templates: {\n        error:      '<div class=\"surveyjs-error-message\">{{errorMessage}}</div>',\n        \n        input:      '<input {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-input surveyjs-{{answerType}} {{fieldClasses}}\" />',\n\n        label:      '<label for=\"{{answerCode}}\" class=\"surveyjs-label {{labelClasses}}\">{{labelString}}</label>',\n\n        loading:    '<div class=\"surveyjs-loading\" data-surveyjs-loading>Loading...</div>',\n\n        question:   '<div class=\"surveyjs-question-wrapper\" data-question-id=\"{{questionId}}\" data-formjs-question>'+\n                        '<div class=\"surveyjs-question-header\">Question {{questionNumber}}</div>'+\n                        '<div class=\"surveyjs-question-body\">'+\n                            '<div class=\"surveyjs-question-text\">{{questionText}}</div>'+\n                            '<div class=\"surveyjs-answers-wrapper form-group\">'+\n                                '{{answersHTML}}'+\n                                '{{errorsHTML}}'+\n                            '</div>'+\n                        '</div>'+\n                    '</div>',\n        \n        select:     '<select {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-select {{fieldClasses}}\">'+\n                        '{{optionsHtml}}'+\n                    '</select>',\n        \n        textarea:   '<textarea {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}\" class=\"surveyjs-textarea {{fieldClasses}}\"></textarea>',\n\n        wrapper: {\n            default:    '<div class=\"surveyjs-field-wrapper surveyjs-wrapper-{{answerType}} {{wrapperClasses}}\">'+\n                            '{{fieldTemplate}}'+\n                            '{{labelTemplate}}'+\n                        '</div>',\n\n            errors:     '<div class=\"surveyjs-errors-wrapper\" data-surveyjs-errors>{{errorTemplates}}</div>',\n            \n            nested:     '<div class=\"surveyjs-field-wrapper surveyjs-nested-parent surveyjs-wrapper-{{answerType}}\">'+\n                            '{{labelTemplate}}'+\n                            '<div class=\"surveyjs-nested-container surveyjs-field-indent\">'+\n                                '{{nestedFieldsHTML}}'+\n                            '</div>'+\n                        '</div>',\n            \n            related:    '<div class=\"surveyjs-field-wrapper input-group {{wrapperClasses}}\">'+\n                            '<div class=\"input-group-prepend\">'+\n                                '<div class=\"input-group-text form-check surveyjs-wrapper-radio\">'+\n                                    '{{fieldTemplate}}'+\n                                    '{{labelTemplate}}'+\n                                '</div>'+\n                            '</div>'+\n                            '{{relatedFieldHTML}}'+\n                        '</div>'\n        }\n    },\n    useWebStorage:          true\n}\n","\nimport { fieldsStringSelectorSurvey, getQuestionId, isEmptyObject, mergeObjects } from './helpers';\nimport { getQuestionObject } from './utils/getQuestionObject';\n\nexport const optionsUtils = {\n    formOptions: {\n\n        getFormData: function getFormData_surveyDefault(){\n            const formEl = this.formEl;\n            const instance = formEl.formjs;\n            const fieldsList = Array.from( formEl.closest('[data-surveyjs-container]').querySelectorAll(fieldsStringSelectorSurvey) );\n            const obj = {\n                    answers: [],\n                    id: instance.data.id\n                };\n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                // EACH QUESTION HAS ITS OWN OBJECT ( qaObj ) THAT CONTAINS THE RELATED DATA:\n                // question:    THE QUESTION ID ( undefined FOR QUESTIONS WITH ATTRIBUTE data-required-form - will be skipped later )\n                // answer       AN OBJECT THAT CONTAINS THE FOLLOWS:\n                //                  value:      THE ANSWER VALUE\n                //                  related:    IF THE ANSWER IS REQUIRED FROM ANOTHER ANSWER (SEE BELOW)\n                const questionId = getQuestionId(fieldEl),\n                      qaObj = {\n                        question: questionId,\n                        answer: {\n                            value: fieldEl.value || ''\n                        }\n                    };\n\n                // A FIELD WITH ATTRIBUTE 'data-required-from' IS MANAGED TOGETHER WITH ITS RELATED FIELD ( WHICH HAS ATTRIBUTE 'data-require-more' )\n                // IF QUESTION ID IS EMPTY -> SKIP THE FIELD ( USEFUL FOR FORM FIELDS OUTSIDE THE SURVEY BODY )\n                if(\n                    fieldEl.matches('[data-required-from]') || \n                    questionId === '' || \n                    isEmptyObject( getQuestionObject(instance.data, questionId) )\n                ){ return; }\n\n                if( type === 'radio' ){\n                    const containerEl = fieldEl.closest('form') ? formEl : fieldEl.closest(instance.options.fieldOptions.questionContainer);\n                    const checkedEl = containerEl.querySelector('[name=\"'+ name +'\"]:checked');\n\n                    qaObj.answer.value = (checkedEl && checkedEl.value) || '';\n\n                    // FOR RADIO THAT REQUIRE THE USER TO GIVE ONE MORE ANSWER\n                    if( checkedEl && checkedEl.matches('[data-require-more]') ){\n                        qaObj.answer.related = formEl.querySelector('[data-required-from=\"#'+ checkedEl.id +'\"]').value;\n                    }\n                }\n\n                if( type === 'checkbox' && fieldEl.matches('[data-checks]') ){\n                    qaObj.answer.value = [];\n                    Array.from(formEl.querySelectorAll('[name=\"'+ name +'\"]:checked')).forEach(el => {\n                        qaObj.answer.value.push( el.value );\n                    });\n                }\n                \n                obj.answers.push( qaObj );\n            });\n        \n            return obj;\n        }\n    \n    }\n}\n","\nexport const fieldsStringSelectorSurvey = '[data-surveyjs-form] input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]), [data-surveyjs-form] select, [data-surveyjs-form] textarea, [data-name=\"bind-surveyjs-answer\"]'\n","\nexport const internals = {\n    storageArray: [],\n    storageName: 'Survey_' + location.href + '_{{surveyFormName}}_surveyId[{{surveyId}}]'\n}\n","\nexport function submit( event ){\n    const self = event.target.formjs;\n    event.data.then(() => {\n        if( self.options.useWebStorage ){\n            sessionStorage.removeItem( self.internals.storageName );\n        }\n    });\n}\n","\nexport const getAnswerIndexInWebStorage = ( internals, fieldName, multiChoiceValue = '' ) => {\n\n    const wsSurvey = sessionStorage.getObject( internals.storageName );\n            \n    if( wsSurvey ){\n        const wsSurveyLength = wsSurvey.length;\n        \n        for(let ws=0; ws<wsSurveyLength; ws++){\n            const lsItem = wsSurvey[ws];\n\n            if( lsItem.name === fieldName ){\n                if( multiChoiceValue ){\n                    if( lsItem.value !== multiChoiceValue ){\n                        continue;\n                    }\n                }\n                return ws;\n            }\n        }\n    }\n    \n    return -1;\n\n}","\nimport { arrayMove, getQuestionId, isEmptyObject } from '../helpers';\nimport { getQuestionObject }            from '../utils/getQuestionObject';\nimport { getAnswerIndexInWebStorage }   from '../utils/getAnswerIndexInWebStorage';\n\nexport function validationEnd( event ){\n    const fieldEl = event.data.fieldEl;\n    const errors = event.data.errors;\n    const instance = event.target.formjs;\n    \n    const questionId = getQuestionId(fieldEl);\n    const questionObj = getQuestionObject(instance.data, questionId);\n\n    // IF IT'S NOT A SURVEY QUESTION -> SKIP\n    if( isEmptyObject(questionObj) ){ return true; }\n\n    // MANAGE MULTIPLE ERROR MESSAGES\n    if( errors && isPlainObject(questionObj.errorMessage) ){\n        let errorsList = Object.keys(errors);\n        if( errors.rule ){\n            // PUT ERROR \"rule\" AS FIRST, SO THAT A GENERIC ERROR IS SHOWN BEFORE ALL OTHERS\n            const ruleIndex = errorsList.indexOf('rule');\n            errorsList = arrayMove(errorsList, ruleIndex, 0);\n        }\n        const errorsWrapper = fieldEl.closest( instance.options.fieldOptions.questionContainer ).querySelector('[data-surveyjs-errors]');\n        const errorsHTML = errorsList.reduce((accHTML, name) => {\n            const errorMessage = questionObj.errorMessage[name] || '';\n            return accHTML += errorMessage ? instance.options.templates.error.replace('{{errorMessage}}', errorMessage) : '';\n        }, '');\n\n        errorsWrapper.innerHTML = errorsHTML;\n    }\n\n    // MANAGE ITEMS IN LOCAL STORAGE ( IF AVAILABLE AND ACTIVE )\n    if( instance.options.useWebStorage && !fieldEl.matches('[data-exclude-storage]') ){\n        const internals = instance.internals;\n\n        const fieldValue = fieldEl.value;\n        const isRequiredFrom = fieldEl.matches('[data-required-from]');\n        const isMultiChoice = fieldEl.matches('[data-checks]');\n        const isRequireMore = fieldEl.matches('[data-require-more]');\n        const reqMoreEl = isRequiredFrom ? document.querySelector(fieldEl.getAttribute('data-required-from')) : null;\n\n        const inArrayPos = getAnswerIndexInWebStorage( internals, fieldEl.name, (isMultiChoice ? fieldValue : false) );\n        const inArrayRequireMorePos = getAnswerIndexInWebStorage( internals, fieldEl.name + '-more' );\n\n        let storageArray = internals.storageArray;\n\n        if( !isRequireMore && !isRequiredFrom && inArrayRequireMorePos !== -1 ){\n            storageArray.splice(inArrayRequireMorePos, 1);\n        }\n\n        if( inArrayPos !== -1 ){\n            if( isMultiChoice ){\n                if( !fieldEl.checked && storageArray[inArrayPos].value === fieldValue ){\n                    // REMOVE ITEM FROM LS\n                    storageArray.splice(inArrayPos, 1);\n                } else {\n                    // ADD ITEM TO LS\n                    storageArray.push( { name: fieldEl.name, value: fieldValue } );\n                }\n            } else {\n                if( fieldValue !== '' ){\n                    storageArray[inArrayPos].value = fieldValue;\n                } else {\n                    storageArray.splice(inArrayPos, 1); \n                }\n            }\n        } else {\n            if( fieldValue !== '' ){\n                if( isRequiredFrom && fieldValue !== '' ){\n                    const oldFieldNamePos = getAnswerIndexInWebStorage( internals, reqMoreEl.name );\n                    if( oldFieldNamePos !== -1 ){\n                        storageArray.splice(oldFieldNamePos, 1);\n                    }\n                    storageArray.push( { name: reqMoreEl.name, value: reqMoreEl.value } );\n                }\n                storageArray.push( { name: fieldEl.name, value: fieldValue } );\n                if( isRequireMore ){\n                    const elReqFromEl = fieldEl.closest('form').querySelector( '[data-required-from=\"#' + fieldEl.id + '\"]' );\n                    storageArray.push( { name: elReqFromEl.name, value: elReqFromEl.value } );\n                }\n            }\n        }\n\n        sessionStorage.setObject( internals.storageName, storageArray );\n    }\n\n    // BASED ON JSON DATA, FORCE REQUIRED FIELDS TO BE VALIDATED\n    if( questionObj.required && !fieldEl.required ){\n        fieldEl.required = true;\n        instance.validateField(fieldEl);\n    }\n}\n","\nexport const arrayMove = (array, from, to) => {\n    array.splice(to, 0, array.splice(from, 1)[0]);\n    return array;\n}\n","\nimport { sortList } from '../../helpers';\n\nexport const generateOptionTags = ( optionsList = [] ) => {\n\n    return sortList( optionsList ).reduce((optionsHTML, opt) => {\n        return optionsHTML += `<option value=\"${opt.value}\">${opt.label}</option>`;\n    }, '');\n\n}","\nimport { toKebabCase } from '../../helpers';\n\nexport const getAttributesStringHTML = ( answerObj, answerCode, isRequired ) => {\n    const excludedAttrs = ['data', 'id', 'label', 'nested', 'related', 'sort'];\n    \n    if( /^(option|textarea)$/.test(answerObj.type) ){\n        excludedAttrs.push('type', 'value');\n    }\n\n    let string = '';\n\n    Object.keys(answerObj)\n        .filter(name => excludedAttrs.indexOf(name) === -1)\n        .forEach(name => {\n            string += ` ${name}=\"${answerObj[name]}\"`;\n        });\n\n    if( answerObj.data ){\n        Object.keys(answerObj.data).forEach(name => {\n            string += ` data-${toKebabCase(name)}=\"${answerObj.data[name]}\"`;\n        });\n    }\n\n    if( isRequired ){\n        string += ' required';\n    }\n\n    if( answerObj.related ){\n        string += ' data-require-more';\n    }\n\n    string += ` id=\"${answerCode}\"`;\n\n    return string.trim();\n}\n","\nexport const toKebabCase = ( string = '', useAllCaps = false ) => {\n    let newString = string.trim().replace(/(([_ ])([a-z]))|(([a-z])?([A-Z]))/g, (match, p1, p2, p3, p4, p5, p6) => {\n        const concatGroup = p3 ? '-' + p3 : (p5 || '') + '-' + p6;\n        return concatGroup.toLowerCase();\n    } );\n    return useAllCaps ? newString.toUpperCase() : newString;\n}\n","\nimport { mergeObjects, replaceObjectKeysInString, sortList } from '../../helpers';\nimport { generateOptionTags }       from './generateOptionTags';\nimport { getAttributesStringHTML }  from './getAttributesStringHTML';\nimport { getTemplates }             from './getTemplates';\n\nexport const generateAnswers = ( answersList, extraData, options ) => {\n\n    let allAnswersHTML = '';\n    let previousType = '';\n\n    sortList( answersList ).forEach((answer, index) => {\n\n        let answerHTML = '';\n\n        // COLLECT USEFUL DATA\n        // answerType => checkbox, date, email, radio, select, text, textarea, etc...\n        const answerType = answer.type === 'option' ? 'select' : answer.type;\n        \n        if( answerType === 'select' && previousType === answerType ){ return; }\n\n        previousType = answerType;\n\n        if( extraData.question.checks ){\n            answer = mergeObjects({}, answer, {data:{checks:extraData.question.checks}});\n        }\n        \n        const answerCode = `${answerType}-${extraData.surveyId}-${extraData.question.id}-${answerType === 'select' ? (index + 1) : answer.id}`;\n        const answerData = {\n            questionNumber: extraData.question.index + 1,\n            wrapperClasses: options.cssClasses.wrapper[answerType] || options.cssClasses.wrapper.default,\n            fieldAttributes: getAttributesStringHTML( answer, answerCode, extraData.question.isRequired ),\n            fieldClasses: options.cssClasses[answerType] || options.cssClasses.default,\n\n            answerType,\n            answerCode,\n            addMoreName: '',\n\n            labelString: answer.label || '',\n            labelClasses: options.cssClasses.label\n        };\n\n        let relatedFieldHTML = '';\n        if( answer.related ){\n            const relatedType = answer.related.type || 'select';\n            const relatedIsSelect = relatedType === 'select';\n            const relatedObj = relatedIsSelect ? mergeObjects({}, answer) : answer.related;\n\n            relatedObj.type = relatedIsSelect ? 'option' : relatedType;\n            relatedObj.id = '';\n            relatedObj.data = mergeObjects({}, relatedObj.data, {requiredFrom:'#'+answerCode});\n            delete relatedObj.related;\n\n            const answerDataRelated = {\n                fieldAttributes: getAttributesStringHTML(relatedObj, '', false),\n                answerType: relatedType,\n                addMoreName: '-more',\n                fieldClasses: relatedIsSelect ? options.cssClasses.select : (options.cssClasses[relatedType] || options.cssClasses.default)\n            };\n\n            relatedFieldHTML = options.templates[relatedType] || options.templates.input;\n            if( relatedIsSelect ){\n                const optionsHtml = generateOptionTags( answer.related );\n                relatedFieldHTML = relatedFieldHTML.replace('{{optionsHtml}}', optionsHtml);\n            }\n\n            relatedFieldHTML = replaceObjectKeysInString(answerDataRelated, relatedFieldHTML);\n        }\n        \n        // TAKE RIGHT TEMPLATES ( wrapper, field and label ) AND PUT ALL TOGETHER\n        // answerTypeForTemplate => related, input, nested, select, textarea, etc...\n        const answerTypeForTemplate = answer.related ? 'related' : (answer.nested ? 'nested' : answerType);\n        const templates = getTemplates( answerTypeForTemplate, options.templates );\n\n        let nestedFieldsHTML = '';\n        if( answer.nested ){\n            nestedFieldsHTML = generateAnswers( answer.nested, extraData, options );\n        }\n\n        let optionsHtml = '';\n        if( answerType === 'select' ){\n            optionsHtml = generateOptionTags( answersList );\n        }\n\n        answerHTML = templates.wrapper\n                        .replace('{{relatedFieldHTML}}', relatedFieldHTML)\n                        .replace('{{fieldTemplate}}', templates.field)\n                        .replace('{{optionsHtml}}', optionsHtml)\n                        .replace('{{labelTemplate}}', templates.label)\n                        .replace('{{nestedFieldsHTML}}', nestedFieldsHTML);\n        allAnswersHTML += replaceObjectKeysInString(answerData, answerHTML);\n\n    });\n\n    return allAnswersHTML;\n\n}\n","\nexport const getTemplates = ( answerType, templates ) => {\n    return {\n        field: templates[answerType] || templates.input,\n        label: /^(checkbox|nested|radio|related)$/.test(answerType) ? templates.label : '',\n        wrapper: templates.wrapper[answerType] || templates.wrapper.default\n    }\n}\n","\nimport { generateQAcode } from './generateQAcode';\n\nexport const buildSurvey = ( data, formEl, options, internals ) => {\n    \n    const formName = formEl.getAttribute('name') || '';\n    \n    // REPLACE SURVEY ID AND FORM NAME IN WEB STORAGE NAME\n    internals.storageName = internals.storageName.replace( /{{surveyId}}/, data.id );\n    internals.storageName = internals.storageName.replace( /{{surveyFormName}}/, formName );\n    \n    const qaHtmlAll = generateQAcode( data.questions, data.id, options );\n    formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforeend', qaHtmlAll );\n\n    // MANAGE EXTERNAL QUESTION\n    const extQuestion = data.questions.filter(obj => obj.external)[0];\n    if( extQuestion ){\n        const externalCont = formEl.closest('[data-surveyjs-container]').querySelector('[data-surveyjs-external]');\n        \n        externalCont.setAttribute('data-question-id', extQuestion.id);\n        extQuestion.answers.forEach((answer, index) => {\n            const externalField = externalCont.querySelectorAll('[data-field]')[index];\n            const fieldProps = {\n                    id: `${answer.type}-${data.id}-${extQuestion.id}-${answer.id}`,\n                    type: answer.type,\n                    value: answer.value,\n                    required: !!extQuestion.required\n                };\n            \n            Object.keys(fieldProps).forEach(name => {\n                externalField[name] = fieldProps[name];\n            });\n\n            const answerCont = externalField.closest('[data-answer]');\n            answerCont.querySelector('label').setAttribute('for', fieldProps.id);\n            answerCont.querySelector('[data-label]').innerHTML = answer.label;\n            externalCont.querySelector('[data-question]').innerHTML = extQuestion.question;\n        });\n    }\n\n}\n","\nimport { isPlainObject, replaceObjectKeysInString, sortList } from '../helpers';\nimport { generateAnswers } from './generateQAcodeUtils/generateAnswers';\n\nexport const generateQAcode = ( questions, surveyId, options ) => {\n\n    return sortList( questions ).reduce((accCode, questionObj, index) => {\n        if( questionObj.external ){ return accCode; }\n\n        let qaHtml = options.templates.question;\n        const questionId = questionObj.id;\n        const questionNumber = index + 1;\n        const extraData = {\n            surveyId,\n            question: {\n                id: questionId,\n                index,\n                isRequired: !!questionObj.required\n            }\n        };\n\n        if( questionObj.checks ){\n            extraData.question.checks = questionObj.checks;\n        }\n        \n        let answersHTML = generateAnswers( questionObj.answers, extraData, options );\n\n        const maxChoice = questionObj.checks ? JSON.parse(questionObj.checks) : '';\n        const checksMin = maxChoice[0] || '';\n        const checksMax = maxChoice[1] || '';\n        const maxChoiceText = maxChoice && options.messages.maxChoice ? ' ('+ checksMax +' '+ options.messages.maxChoice +')' : '';\n\n        const questionData = {\n            questionId,\n            questionNumber,\n            questionText: questionObj.question + maxChoiceText,\n            answersHTML,\n            errorsHTML: options.fieldErrorFeedback ? options.templates.wrapper.errors : ''\n        };\n        qaHtml = replaceObjectKeysInString(questionData, qaHtml);\n\n        if( options.fieldErrorFeedback ){\n            let errorMessage = maxChoice !== '' ? options.messages.errorMessageMultiChoice : (questionObj.errorMessage || options.messages.errorMessage);\n\n            // CASE OF MULTIPLE ERROR MESSAGES FROM JSON DATA => DYNAMICALLY MANAGED VIA EVENT LISTENER IN CONSTRUCTOR\n            if( isPlainObject(errorMessage) ){\n                errorMessage = '';\n            }\n\n            qaHtml = qaHtml.replace( /{{errorTemplates}}/g, errorMessage );\n        }\n\n        return accCode += replaceObjectKeysInString({checksMin, checksMax}, qaHtml);\n    }, '');\n\n}\n","\nimport { ajaxCall, customEvents, deepFreeze, dispatchCustomEvent, mergeObjects, webStorage } from './modules/helpers';\nimport { options }          from './modules/options';\nimport { internals }        from './modules/internals';\nimport { submit, validationEnd } from './modules/listenerCallbacks';\nimport { buildSurvey }      from './modules/buildSurvey/buildSurvey';\nimport { populateAnswers }  from './modules/buildSurvey/populateAnswers';\nimport { destroy }          from './modules/destroy';\n\nimport Form from 'formjs-plugin';\n\nimport './index.scss';\n\nconst version = '3.0.0';\n\nclass Survey extends Form {\n\n    constructor( formEl, optionsObj = {} ){\n        if( !optionsObj.url || typeof optionsObj.url !== 'string' ){\n            throw new Error('\"options.url\" is missing or not a string!');\n        }\n\n        const options = mergeObjects( {}, Survey.prototype.options, optionsObj );\n\n        if( !webStorage().isAvailable ){\n            options.useWebStorage = false;\n        }\n\n        // CREATE FORM INSTANCE FOR SURVEY\n        super( formEl, options );\n        const self = this;\n        self.internals = internals;\n\n        self.formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforebegin', self.options.templates.loading );\n\n        // CREATE SURVEY\n        const retrieveSurvey = ajaxCall(self.options.url, self.options.initAjaxOptions)\n            .then(response => {\n                if( response.status.toLowerCase() !== 'success' ){\n                    return Promise.reject(response);\n                }\n                return new Promise(resolve => {\n                    self.data = response.data;\n                    if( self.data.questions && self.data.questions.length > 0 ){\n                        buildSurvey(self.data, self.formEl, self.options, self.internals);\n                        if( self.options.useWebStorage ){\n                            populateAnswers(self.formEl, self.internals);\n                        }\n                        deepFreeze(self.data);\n                        self.formEl.addEventListener('fjs.field:validation', validationEnd);\n                        self.formEl.addEventListener('fjs.form:submit', submit);\n                        super.init().then(() => {\n                            self.isInitialized = true;\n                            self.formEl.closest('[data-surveyjs-container]').classList.add('surveyjs-init-success');\n                            // ON super.init() FOCUS IS SET ON FIELD [data-required-from] WHEN VALIDATING\n                            /* const activeEl = document.activeElement;\n                            const formSelector = 'form[name=\"'+ self.formEl.name +'\"]';\n                            if( activeEl.matches(formSelector + ' [data-required-from]') ){\n                                activeEl.blur();\n                            } */\n                            resolve(response);\n                        });\n                    } else {\n                        resolve(response);\n                    }\n                });\n            })\n            .finally(() => {\n                const loadingBoxEl = self.formEl.querySelector('[data-surveyjs-loading]');\n                if( loadingBoxEl ){\n                    loadingBoxEl.parentNode.removeChild(loadingBoxEl);\n                }\n            });\n        \n        dispatchCustomEvent( self.formEl, customEvents.init, retrieveSurvey );\n    }\n\n    destroy(){\n        destroy(this.formEl);\n        super.destroy();\n    }\n\n    static setOptions( optionsObj ){\n        Survey.prototype.options = mergeObjects({}, Survey.prototype.options, optionsObj);\n    }\n\n}\n\nSurvey.prototype.isInitialized = false;\nSurvey.prototype.options = options;\nSurvey.prototype.version = version;\n\nexport default Survey;\n","\nexport const populateAnswers = ( formEl, internals ) => {\n\n    const WS = sessionStorage.getObject( internals.storageName );\n    if( WS ){\n        const surveyContEl = formEl.closest('[data-surveyjs-container]');\n        internals.storageArray = WS;\n        WS.forEach(item => {\n            const fieldFirst = surveyContEl.querySelector( '[name=\"' + item.name + '\"]' ),\n                  isRadioOrCheckbox = fieldFirst.matches('[type=\"radio\"], [type=\"checkbox\"]'),\n                  fieldEl = ( isRadioOrCheckbox ? surveyContEl.querySelector('[name=\"' + item.name + '\"][value=\"' + item.value + '\"]') : fieldFirst );\n            \n            if( isRadioOrCheckbox ){\n                fieldEl.checked = true;\n            } else {\n                fieldEl.value = item.value;\n            }\n        });\n    }\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nimport { submit, validationEnd } from './listenerCallbacks';\n\nexport const destroy = formEl => {\n\n    formEl.removeEventListener('fjs.field:validation', validationEnd);\n    formEl.removeEventListener('fjs.form:submit', submit);\n    \n}\n"],"names":["customEvents","deepFreeze","obj","Object","getOwnPropertyNames","forEach","name","prop","freeze","isPlainObject","object","prototype","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","getQuestionId","fieldEl","containerEl","closest","getAttribute","isEmptyObject","length","replaceObjectKeysInString","stringHTML","reduce","accString","regexStr","RegExp","replace","sortList","list","sort","a","b","webStorage","isAvailable","mod","localStorage","setItem","removeItem","e","checkLocalStorage","Storage","setObject","value","this","JSON","stringify","getObject","getItem","parse","getQuestionObject","data","questionId","questions","qLength","q","question","id","options","cssClasses","checkbox","default","file","label","radio","wrapper","fieldErrorFeedback","formOptions","getFormData","formEl","instance","formjs","fieldsList","querySelectorAll","answers","fieldNameCheck","fieldTypeCheck","type","matches","qaObj","answer","checkedEl","fieldOptions","questionContainer","querySelector","related","el","initAjaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","messages","maxChoice","errorMessage","errorMessageMultiChoice","templates","error","input","loading","select","textarea","errors","nested","useWebStorage","internals","storageArray","storageName","location","href","submit","event","self","target","then","sessionStorage","getAnswerIndexInWebStorage","fieldName","multiChoiceValue","wsSurvey","wsSurveyLength","ws","lsItem","validationEnd","questionObj","errorsList","rule","ruleIndex","indexOf","to","array","splice","errorsWrapper","errorsHTML","accHTML","innerHTML","fieldValue","isRequiredFrom","isMultiChoice","isRequireMore","reqMoreEl","document","inArrayPos","inArrayRequireMorePos","checked","oldFieldNamePos","elReqFromEl","required","validateField","generateOptionTags","optionsList","optionsHTML","opt","getAttributesStringHTML","answerObj","answerCode","isRequired","excludedAttrs","test","string","useAllCaps","newString","trim","match","p1","p2","p3","p4","p5","p6","toLowerCase","toUpperCase","toKebabCase","generateAnswers","answersList","extraData","allAnswersHTML","previousType","index","answerHTML","answerType","checks","surveyId","answerData","questionNumber","wrapperClasses","fieldAttributes","fieldClasses","addMoreName","labelString","labelClasses","relatedFieldHTML","relatedType","relatedIsSelect","relatedObj","requiredFrom","answerDataRelated","optionsHtml","field","getTemplates","nestedFieldsHTML","buildSurvey","formName","qaHtmlAll","accCode","external","qaHtml","answersHTML","checksMin","checksMax","maxChoiceText","questionData","questionText","generateQAcode","insertAdjacentHTML","extQuestion","externalCont","setAttribute","externalField","fieldProps","answerCont","Survey","Form","[object Object]","optionsObj","url","Error","super","retrieveSurvey","timeoutTimer","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","json","Promise","reject","catch","finally","clearTimeout","ajaxCall","status","resolve","WS","surveyContEl","item","fieldFirst","isRadioOrCheckbox","populateAnswers","addEventListener","init","isInitialized","classList","add","loadingBoxEl","parentNode","removeChild","elem","eventName","eventOptions","bubbles","eventObj","Event","dispatchEvent","dispatchCustomEvent","removeEventListener","destroy","version"],"mappings":"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"}