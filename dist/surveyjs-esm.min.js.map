{"version":3,"file":"surveyjs-esm.min.js","sources":["../src/modules/helpers/ajaxCall.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/deepFreeze.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/fieldsStringSelectorSurvey.js","../src/modules/helpers/isEmptyObject.js","../src/modules/helpers/webStorage.js","../src/modules/utils/getQuestionObject.js","../src/modules/optionsUtils.js","../src/modules/options.js","../src/modules/internals.js","../src/modules/utils/getAnswerIndexInLocalStorage.js","../src/modules/listenerCallbacks.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/generateOptionTags.js","../src/modules/buildSurvey/generateQAcodeUtils/generateFieldHTML.js","../src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/attribute.js","../src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/input.js","../src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/nested.js","../src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/select.js","../src/modules/buildSurvey/generateQAcodeUtils/fieldsHTML/textarea.js","../src/modules/buildSurvey/generateQAcodeUtils/replaceTemplateStrings.js","../src/modules/buildSurvey/generateQAcodeUtils/iterateAnswers.js","../src/modules/buildSurvey/buildSurvey.js","../src/modules/helpers/appendDomStringToNode.js","../src/modules/buildSurvey/generateQAcode.js","../src/modules/buildSurvey/populateAnswers.js","../src/index.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/destroy.js","../src/modules/messages.js"],"sourcesContent":["\nexport const ajaxCall = ( url = location.href, options = {} ) => {\n\n    let timeoutTimer;\n\n    options.headers = new Headers( options.headers );\n\n    /* SET AbortController FOR timeout */\n    if ( options.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        options.signal = signal;\n\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, options.timeout);\n    }\n\n    return fetch( url, options )\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n        });\n        \n}\n","\nexport const customEvents = {\n    init: 'sjs:init'\n}\n","\nexport const deepFreeze = obj => {\n\n    Object.getOwnPropertyNames(obj).forEach(name => {\n        const prop = obj[name];\n        if( typeof prop === 'object' && prop !== null ){\n            deepFreeze(prop);\n        }\n    });\n    return Object.freeze(obj);\n    \n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nexport const fieldsStringSelectorSurvey = '[data-surveyjs-form] input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]), [data-surveyjs-form] select, [data-surveyjs-form] textarea, [data-name=\"bind-surveyjs-answer\"]'\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const isEmptyObject = object => {\n    return isPlainObject(object) && Object.getOwnPropertyNames(object).length === 0;\n}\n","\nexport const webStorage = () => {\n\n    const checkLocalStorage = () => {\n        const mod = 'check_storage';\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    const isAvailable = checkLocalStorage();\n\n    if( isAvailable ){\n        // setObject METHOD FOR HTML STORAGE -> EG: localStorage.setObject( name, JSobj )\n        // TO STORE A JS OBJECT ( AS JSON STRING ) INSIDE THE STORAGE\n        Storage.prototype.setObject = function( key, value ) {\n            this.setItem( key, JSON.stringify(value) );\n        }\n\n        // getObject METHOD FOR HTML STORAGE -> EG: localStorage.getObject( name )\n        // RETURN THE DATA ( STORED AS JSON STRING ) AS JS OBJECT\n        Storage.prototype.getObject = function( key ) {\n            const value = this.getItem( key );\n            return value && JSON.parse( value );\n        }\n    }\n\n    return {\n        isAvailable: isAvailable\n    }\n\n}\n","\nexport const getQuestionObject = ( data, questionId ) => {\n\n    const questions = data.questions,\n          qLength = questions.length;\n\n    let obj = {};\n    \n    for(let q=0; q<qLength; q++){\n        const question = questions[q];\n        if( question.id == questionId ){\n            obj = question;\n            break;\n        }\n    }\n\n    return obj;\n\n}","\nimport { fieldsStringSelectorSurvey, isEmptyObject, mergeObjects } from './helpers';\nimport { getQuestionObject } from './utils/getQuestionObject';\n\nexport const defaultCallbacksInOptions = {\n    formOptions: {\n\n        beforeSend: function beforeSend_surveyDefault( data ){\n            let isHacking = false;\n            const instance = this;\n            const surveyContEl = instance.formEl.closest('[data-surveyjs-container]');\n            const fieldsList = Array.from( surveyContEl.querySelectorAll(fieldsStringSelectorSurvey) );\n\n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                \n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                const questionIdEl = fieldEl.closest('[data-question-id]');\n                const questionId = questionIdEl ? questionIdEl.getAttribute('data-question-id') : '';\n                const questionObj = getQuestionObject( instance.data, questionId );\n\n                // BASED ON SURVEY JSON FILE, FORCE REQUIRED FIELDS TO BE VALIDATED\n                // THIS AVOIDS USERS TO HACK THE SURVEY, FOR EXAMPLE REMOVING required ATTRIBUTE FROM THE HTML\n                if( questionId !== '' && questionObj && typeof questionObj.required !== 'undefined' ){\n\n                    const isRequiredFrom = fieldEl.matches('[data-required-from]');\n                    const reqMoreEl = document.querySelector(fieldEl.getAttribute('data-required-from'));\n                    if( !isRequiredFrom || ( isRequiredFrom && reqMoreEl.checked ) ){\n                        if( !fieldEl.required ){\n                            // FIELD IS NOT REQUIRED BUT IT SHOULD => USER HACKED FIELD\n                            isHacking = true;\n                        }\n                        fieldEl.required = true;\n                    }\n                    \n                }\n\n            });\n\n            if( isHacking ){\n                // USER IS HACKING FORM ( REMOVING ATTRIBUTE required FROM A FIELD )\n                // => FORCE VALIDATION TO SHOW ERROR AND STOP SUBMIT\n                const fieldOptions = mergeObjects({}, instance.options.fieldOptions, {focusOnRelated: false});\n                return instance.validateForm( fieldOptions )\n                    .then(formRes => {\n                        data.stopExecution = true;\n                        return data;\n                    });\n            }\n            return data;\n        },\n\n        getFormData: function getFormData_surveyDefault(){\n            const formEl = this.formEl;\n            const instance = formEl.formjs;\n            const fieldsList = Array.from( formEl.closest('[data-surveyjs-container]').querySelectorAll(fieldsStringSelectorSurvey) );\n            const obj = {\n                    answers: [],\n                    id: instance.data.id\n                };\n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                // EACH QUESTION HAS ITS OWN OBJECT ( qaObj ) THAT CONTAINS THE RELATED DATA:\n                // question:    THE QUESTION ID ( undefined FOR QUESTIONS WITH ATTRIBUTE data-required-form - will be skipped later )\n                // answer       AN OBJECT THAT CONTAINS THE FOLLOWS:\n                //                  id_answer:      THE ANSWER ID\n                //                  text:           IF THE FIELD IS A TEXTAREA\n                //                  attributes:     IF THE ANSWER IS NESTED OR IS REQUIRED FROM ANOTHER ANSWER (SEE BELOW)\n                const questionIdEl = fieldEl.closest('[data-question-id]'),\n                      questionId = questionIdEl ? questionIdEl.getAttribute('data-question-id') : '',\n                      fieldValue = fieldEl.value,\n                      qaObj = {\n                        question: questionId,\n                        answer: {\n                            id_answer: [ fieldValue ]\n                        }\n                    };\n\n                // A FIELD WITH ATTRIBUTE 'data-required-from' IS MANAGED TOGETHER WITH ITS RELATED FIELD ( WHICH HAS ATTRIBUTE 'data-require-more' )\n                // IF QUESTION ID IS EMPTY -> SKIP THE FIELD ( USEFUL FOR FORM FIELDS OUTSIDE THE SURVEY BODY )\n                if( fieldEl.matches('[data-required-from]') || questionId === '' || isEmptyObject(getQuestionObject( instance.data, questionId )) ){ return; }\n                                    \n                if( fieldEl.matches('textarea') ){\n                    qaObj.answer.id_answer = [ '' ];\n                    qaObj.answer.text = fieldValue;\n                }\n\n                if( type === 'radio' ){\n                    const containerEl = (fieldEl.closest('form') ? formEl : fieldEl.closest('[data-formjs-question]') ),\n                          elem = containerEl.querySelector('[name=\"'+ name +'\"]:checked');\n                    \n                    if( elem ){\n                        // FOR RADIO THAT REQUIRE THE USER TO GIVE ONE MORE ANSWER\n                        if( elem.matches('[data-require-more]') ){\n                            qaObj.answer.attributes = formEl.querySelector('[data-required-from=\"#'+ elem.id +'\"]').value.trim();\n                        }\n                        \n                        if( elem.matches('[data-nested-index]') ){\n                            qaObj.answer.attributes = elem.getAttribute('data-nested-index');\n                        }\n                        \n                        qaObj.answer.id_answer = [ elem.value.trim() ];\n                    } else {\n                        qaObj.answer.id_answer = [ '' ];\n                    }\n                }\n\n                if( type === 'checkbox' && fieldEl.matches('[data-checks]') ){\n                    qaObj.answer.id_answer = [];\n                    Array.from(formEl.querySelectorAll('[name=\"'+ name +'\"]:checked')).forEach(el => {\n                        qaObj.answer.id_answer.push( el.value.trim() );\n                    });\n                }\n                \n                obj.answers.push( qaObj );\n            });\n        \n            return obj;\n        }\n    \n    }\n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n    cssClasses: {\n        checkbox:           'form-check-input',\n        default:            'form-control',\n        file:               'form-control-file',\n        label:              'form-check-label',\n        radio:              'form-check-input',\n        select:             'form-control',\n        textarea:           'form-control'\n    },\n    fieldErrorFeedback:     true,\n    formOptions: {\n        beforeSend:         [defaultCallbacksInOptions.formOptions.beforeSend],\n        getFormData:        defaultCallbacksInOptions.formOptions.getFormData\n    },\n    initAjaxOptions:        {\n        cache:              'no-store',\n        credentials:        'same-origin',\n        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept':       'application/json'\n        },\n        method:             'GET',\n        mode:               'same-origin',\n        redirect:           'follow',\n        timeout:            0\n    },\n    lang:                   'en',\n    templates: {\n        fieldError: '<div class=\"surveyjs-field-error-message\">{{fieldErrorMessage}}</div>',\n\n        input:      '<div class=\"surveyjs-single-answer surveyjs-input-container surveyjs-answer-{{answerType}} form-check\" data-answer-index=\"{{answerIndex}}\">'+\n                        '{{inputTagCode}}'+\n                        '{{labelTagCode}}'+\n                    '</div>',\n\n        inputGroup: '<div class=\"surveyjs-single-answer input-group\" data-answer-index=\"{{answerIndex}}\">'+\n                        '<div class=\"input-group-prepend\">'+\n                            '<div class=\"input-group-text form-check surveyjs-answer-{{answerType}}\">'+\n                                '<input type=\"{{answerType}}\" name=\"surveyjs-answer-{{questionNumber}}\" id=\"{{answerCode}}\" data-answer-id=\"{{answerId}}\" value=\"{{answerIdValue}}\" {{attrRequired}} data-require-more=\"\" class=\"surveyjs-input surveyjs-radio form-check-input\" />'+\n                                '<label for=\"{{answerCode}}\" class=\"surveyjs-label form-check-label\">{{answerString}}</label>'+\n                            '</div>'+\n                        '</div>'+\n                        '{{relatedAnswerField}}'+\n                    '</div>',\n        \n        inputTag:   '<input type=\"{{answerType}}\" {{attrSubtype}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-input surveyjs-{{answerType}} {{fieldClass}}\" id=\"{{answerCode}}\" {{nestedAnswer}} data-answer-root=\"{{progIdsJoined}}\" data-answer-id=\"{{answerId}}\" value=\"{{answerIdValue}}\" {{attrRequired}} {{validateIfFilled}} {{attrChecks}} {{attrRequiredFrom}} />',\n\n        labelTag:   '<label for=\"{{answerCode}}\" class=\"surveyjs-label {{labelClass}}\">{{answerString}}</label>',\n\n        question:   '<div data-question-id=\"{{questionId}}\" data-question-index=\"{{questionNumber}}\" data-formjs-question class=\"surveyjs-question-box clearfix\">'+\n                        '<div class=\"surveyjs-question-header\">Question {{questionNumber}}</div>'+\n                        '<div class=\"surveyjs-question-body\">'+\n                            '<div class=\"surveyjs-question-text\">{{questionText}}</div>'+\n                            '<div class=\"surveyjs-answers-box form-group clearfix\">'+\n                                '{{answersHtml}}'+\n                                '{{fieldErrorTemplate}}'+\n                            '</div>'+\n                        '</div>'+\n                    '</div>',\n\n        select:     '<div class=\"surveyjs-single-answer surveyjs-answer-select\" data-answer-index=\"{{answerIndex}}\">'+\n                        '{{selectTagCode}}'+\n                    '</div>',\n\n        selectTag:  '<select id=\"{{answerCode}}\" name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-select {{fieldClass}}\" {{attrRequired}} {{nestedAnswer}} data-answer-root=\"{{progIdsJoined}}\" {{attrRequiredFrom}}>'+\n                        '{{optionsHtml}}'+\n                    '</select>',\n\n        textarea:   '<div class=\"surveyjs-single-answer surveyjs-answer-textarea\">'+\n                        '<textarea id=\"{{answerCode}}\" data-answer-id=\"{{answerId}}\" {{nestedAnswer}} name=\"surveyjs-answer-{{questionNumber}}\" {{attrRequired}} class=\"surveyjs-textarea {{fieldClass}}\" {{answerMaxlength}} rows=\"6\" placeholder=\"{{answerPlaceholder}}\"></textarea>'+\n                    '</div>'\n    },\n    useLocalStorage:        true\n}\n","\nexport const internals = {\n    storageArray: [],\n    storageName: 'Survey_' + location.href + '_{{surveyFormName}}_surveyId[{{surveyId}}]'\n}\n","\nexport const getAnswerIndexInLocalStorage = ( internals, fieldName, multiChoiceValue = '' ) => {\n\n    const lsSurvey = localStorage.getObject( internals.storageName );\n            \n    if( lsSurvey ){\n        const lsSurveyLength = lsSurvey.length;\n        \n        for(let ls=0; ls<lsSurveyLength; ls++){\n            const lsItem = lsSurvey[ls];\n\n            if( lsItem.field === fieldName ){\n                if( multiChoiceValue ){\n                    if( lsItem.value !== multiChoiceValue ){\n                        continue;\n                    }\n                }\n                return ls;\n            }\n        }\n    }\n    \n    return -1;\n\n}","\nimport { isEmptyObject, isFieldForChangeEvent } from './helpers';\nimport { getAnswerIndexInLocalStorage }         from './utils/getAnswerIndexInLocalStorage';\nimport { getQuestionObject }                    from './utils/getQuestionObject';\n\nexport const callbackFns = {\n\n    // THIS WILL RUN BEFORE FORMJS VALIDATION FUNCTION SO THAT USERS CANNOT SKIP REQUIRED FIELDS VALIDATION ( WHILE TYPING )\n    validation: function( event ){\n\n        const eventName = event.type,\n              fieldEl = event.target,\n              self = fieldEl.closest('form').formjs,\n              internals = self.internals,\n              containerEl = fieldEl.closest('[data-formjs-question]'),\n              fieldValue = fieldEl.value ? fieldEl.value.trim() : fieldEl.value,\n              isMultiChoice = fieldEl.matches('[data-checks]'),\n              isRequireMore = fieldEl.matches('[data-require-more]'),\n              isRequiredFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = isRequiredFrom ? containerEl.querySelector(fieldEl.getAttribute('data-required-from')) : null;\n\n        // VARS USED TO VALIDATE THE FILED IF IT IS REQUIRED\n        const itemEl = isRequiredFrom ? reqMoreEl : fieldEl,\n              questionId = itemEl.id ? itemEl.id.split('-')[1] : 'id-not-found',\n              isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl),\n              questionObj = getQuestionObject(self.data, questionId);\n\n        // IF IT'S NOT A SURVEY QUESTION -> SKIP\n        if( isEmptyObject(questionObj) ){ return true; }\n\n        if(\n            (isFieldForChangeEventBoolean && eventName === 'change') ||\n            (!isFieldForChangeEventBoolean && eventName !== 'change')\n        ){\n            \n            // MANAGE ITEMS IN LOCAL STORAGE ( IF AVAILABLE AND USABLE )\n            if( self.options.useLocalStorage && !fieldEl.matches('[data-exclude-storage]') ){\n                const inArrayPos = getAnswerIndexInLocalStorage( internals, fieldEl.name, (isMultiChoice ? fieldValue : false) ),\n                    inArrayRequireMorePos = getAnswerIndexInLocalStorage( internals, fieldEl.name + '-more' );\n\n                let storageArray = internals.storageArray;\n\n                if( !isRequireMore && !isRequiredFrom && inArrayRequireMorePos !== -1 ){\n                    storageArray.splice(inArrayRequireMorePos, 1);\n                }\n\n                if( inArrayPos !== -1 ){\n                    if( isMultiChoice ){\n                        if( !fieldEl.checked && storageArray[inArrayPos].value === fieldValue ){\n                            // REMOVE ITEM FROM LS\n                            storageArray.splice(inArrayPos, 1);\n                        } else {\n                            // ADD ITEM TO LS\n                            storageArray.push( { field: fieldEl.name, value: fieldValue } );\n                        }\n                    } else {\n                        if( fieldValue !== '' ){\n                            storageArray[inArrayPos].value = fieldValue;\n                        } else {\n                            storageArray.splice(inArrayPos, 1); \n                        }\n                    }\n                } else {\n                    if( fieldValue !== '' ){\n                        if( isRequiredFrom && fieldValue !== '' ){\n                            const oldFieldNamePos = getAnswerIndexInLocalStorage( internals, reqMoreEl.name );\n\n                            if( oldFieldNamePos !== -1 ){\n                                storageArray.splice(oldFieldNamePos, 1);\n                            }\n                            storageArray.push( { field: reqMoreEl.name, value: reqMoreEl.value.trim() } );\n                        }\n                        storageArray.push( { field: fieldEl.name, value: fieldValue } );\n                        if( isRequireMore ){\n                            const elReqFromEl = fieldEl.closest('form').querySelector( '[data-required-from=\"#' + fieldEl.id + '\"]' );\n                            storageArray.push( { field: elReqFromEl.name, value: elReqFromEl.value.trim() } );\n                        }\n                    }\n                }\n\n                localStorage.setObject( internals.storageName, storageArray );\n            }\n\n            // BASED ON JSON DATA, FORCE REQUIRED FIELDS TO BE VALIDATED\n            if( typeof questionObj.required !== 'undefined' ){\n                fieldEl.required = true;\n            }\n\n        }\n        \n    }\n\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nexport const generateOptionTags = ( optionsList = [], options ) => {\n\n    let optionsHtml = optionsList[0].id === '' ? '' : '<option value=\"\">'+ options.selectFirstOption +'</option>';\n\n    optionsList.forEach(opt => {\n        optionsHtml += '<option value=\"'+ opt.id +'\" data-answer-id=\"'+ opt.id +'\">'+ opt.answer +'</option>';\n    });\n\n    return optionsHtml;\n\n}","\nimport { attribute }    from './fieldsHTML/attribute';\nimport { input }        from './fieldsHTML/input';\nimport { nested }       from './fieldsHTML/nested';\nimport { select }       from './fieldsHTML/select';\nimport { textarea }     from './fieldsHTML/textarea';\n\nexport const generateFieldHTML = {\n        attribute, input, nested, select, textarea\n}\n","\nimport { generateOptionTags } from './generateOptionTags';\n\n// RELATED ANSWER\n// IF AN ANSWER REQUIRE TO FILL OR SELECT ANOTHER RELATED ANSWER\nexport const attribute = ( options, data ) => {\n\n    const objData = data.objData,\n          aHtml = options.templates.inputGroup,\n          attr = data.answer.attribute,\n          attributeIsArray = Array.isArray(attr),\n          relatedAnswerField = attributeIsArray ? options.templates.selectTag : options.templates.inputTag;\n    \n    objData.fieldClass = options.cssClasses.default;\n    \n    if( attributeIsArray ){\n        // CREATE A GROUP WITH A RADIO INPUT AND ITS RELATED ANSWER (A SELECT FIELD)\n        objData.fieldClass = options.cssClasses.select;\n        objData.optionsHtml = generateOptionTags(attr, options);\n    }\n\n    return { aHtml, relatedAnswerField, objData };\n}\n","\nexport const input = ( options, data ) => {\n\n    const objData = data.objData,\n          aHtml = data.beforeCode + options.templates.input + data.afterCode;\n\n    if( objData.answerType !== 'checkbox' && objData.answerType !== 'radio' ){\n        // EVERY INPUT FIELD THAT IS NOT A CHECKBOX OR RADIO ( TEXT, EMAIL, NUMBER, PASSWORD, RANGE AND SO ON... )\n        objData.nestedAnswer += ' class=\"' + objData.fieldClass + '\"';\n    }\n    \n    return { aHtml, objData };\n}\n","\n// NESTED ANSWER -> IT IS A CHILD ANSWER OF ITS PARENT\n// EXAMPLE:\n// IF 'WEBSITE' IS THE PARENT ANSWER\n// IT CAN HAVE THESE CHILDREN ANSWERS: PC - SMARTPHONE - TABLET\n// SO THE PARENT ANSWER IS PRINTED AS TEXT ( WITHOUT THE INPUT FIELD ) AND ITS nested ANSWERS WILL BE LOOPED\nexport const nested = ( options, data ) => {\n\n    const objData = data.objData;\n\n    let labelForNested = options.templates.labelTag;\n    labelForNested = labelForNested.replace(/{{answerCode}}/g, objData.answerCode);\n    labelForNested = labelForNested.replace(/{{labelClass}}/g, options.cssClasses.label + ' surveyjs-field-indent-0');\n    labelForNested = labelForNested.replace(/{{answerString}}/g, data.answer.answer);\n\n    const aHtml = data.beforeCode + '<div class=\"surveyjs-'+ objData.answerType +'\">' + labelForNested + '</div>' + data.afterCode;\n\n    return { aHtml, objData };\n}\n","\nimport { generateOptionTags } from './generateOptionTags';\n\nexport const select = ( options, data ) => {\n\n    const objData = data.objData,\n          aHtml = data.beforeCode + options.templates.select + data.afterCode;\n    \n    objData.optionsHtml = generateOptionTags( data.obj.answers, options );\n\n    return { aHtml, objData };\n}\n","\nexport const textarea = ( options, data ) => {\n\n    const objData = data.objData,\n          aHtml = options.templates.textarea;\n\n    objData.answerPlaceholder = data.answer.placeholder || options.textareaPlaceholder;\n\n    return { aHtml, objData };\n}\n","\nexport const replaceTemplateStrings = ( options, fieldData, objData ) => {\n\n    if( objData.optionsHtml !== '' ){\n        fieldData.aHtml = fieldData.aHtml.replace( /{{selectTagCode}}/g, options.templates.selectTag );\n    }\n\n    if( fieldData.relatedAnswerField ){\n        const relatedAnswerKeys = {\n              answerCode: '', answerType: 'text', fieldClass: objData.fieldClass,\n              answerIdValue: '', attrRequired: '', addMoreName: '-more',\n              attrRequiredFrom: 'data-required-from=\"#'+ objData.answerCode +'\"'\n            };\n            \n        for(let reKey in relatedAnswerKeys){\n            const regexStrRe = new RegExp( '{{' + reKey + '}}', 'g' );\n            fieldData.relatedAnswerField = fieldData.relatedAnswerField.replace( regexStrRe, relatedAnswerKeys[reKey] );    \n        }\n        \n        fieldData.aHtml = fieldData.aHtml.replace( /{{relatedAnswerField}}/g, fieldData.relatedAnswerField );\n    } else {\n        fieldData.aHtml = fieldData.aHtml.replace( /{{addMoreName}}/g, '' );\n        fieldData.aHtml = fieldData.aHtml.replace( /{{attrRequiredFrom}}/g, '' );\n    }\n    \n    for( let key in objData ){\n        const regexStr = new RegExp( '{{' + key + '}}', 'g' );\n        fieldData.aHtml = fieldData.aHtml.replace( regexStr, objData[key] );\n    }\n\n    return fieldData.aHtml;\n\n}","\nimport { generateFieldHTML } from './generateFieldHTML';\nimport { replaceTemplateStrings } from './replaceTemplateStrings';\n\nlet progIds = [];\n\nexport const iterateAnswers = ( formEl, options, obj, qID, qIdx, attrReq ) => {\n\n    // obj          MUST BE AN ARRAY OF STRINGS OR AN OBJECT THAT CONTAINS 'answers' AS ARRAY (THE FUNCTION iterateAnswers LOOPS UNTIL A STRING IS FOUND, AND PRINTS IT)\n    // qIdx         INDEX OF THE QUESTION\n    // attrReq      HTML REQUIRED ATTRIBUTE THAT WILL BE PRINTED (THIS PARAMETER MUST NOT BE PASSED INITIALLY. IT IS AUTOMATICALLY PASSED INSIDE THE LOOP IF NECESSARY)\n    // aLoopHtml    THE CODE OF ALL ANSWERS ( PRINTED ONLY AT THE END )\n\n    qID = obj.id ? obj.id : (qID || 0);\n\n    let list = Array.isArray(obj) ? obj : obj.answers,\n        listL = list.length,\n        i = qIdx || 0,\n        aLoopHtml = '';\n    \n    const needsBinding = obj.question === 'hidden-privacy' ? true : false;\n\n    if( list[0]['sort'] ){\n        list.sort((a, b) => {\n            return a['sort'] > b['sort'];\n        });\n    }\n\n    for(let a=0; a<listL; a++){\n\n        let answer = list[a],\n            aNum = a + 1,\n            qNum = i + 1,\n            aType = answer.type,\n            aId = answer.id,\n            progIdsLength = progIds.length,\n            progIdsJoined = progIdsLength > 0 ? progIds.join('-') : '',\n            getSettingsFieldClass = () => {\n                let aType = answer.type === 'option' ? 'select' : answer.type;\n                return options.cssClasses[aType] || options.cssClasses.default;\n            };\n\n        let fieldData = { aHtml: '' };\n        \n        // ALL THESE OBJECT KEYS WILL REPLACE {{key}} WITH objData.KEY IN HTML STRING\n        let objData = {\n            // answerId         ANSWER ID AS FROM THE JSON. THIS IS USED AS VALUE ATTRIBUTE OF THE ANSWER\n            // answerType       ANSWER TYPE AS FROM THE JSON. USED TO CHECK WHICH FIELD MUST BE CREATED ( EG: text, radio, checkbox, select, textarea )\n            // nestedAnswer     CREATES THE data-nested-index ATTRIBUTE TO PRINT IF AN ANSWER IS NESTED ( SEE BELOW FOR NESTED ANSWERS )\n            // answerCode       ID ATTRIBUTE OF THE ANSWER\n            //                  ( BUILT AS: \"answerType-questionID-answerID-questionNumber[-nestingLevels]-answerNumber\" )\n            //                  ONLY AN ATTRIBUTE-ANSWER DOES NOT USE THE answerCode\n                labelTagCode: aType === 'checkbox' || aType === 'radio' ? options.templates.labelTag : '',\n                answerId: aId,\n                answerIdValue: aType === 'text' ? '' : aId,\n                answerIndex: aNum,\n                answerName: 'surveyjs-answer-'+qNum,\n                answerPlaceholder: '',\n                answerMaxlength: answer.maxlength ? 'maxlength=\"' + answer.maxlength + '\"' : '',\n                answerString: typeof answer.answer === 'string' ? answer.answer : '',\n                answerType: aType,\n                attrRequired: typeof obj.required !== 'undefined' ? 'required' : (typeof attrReq !== 'undefined' ? attrReq : ''),\n                fieldClass: getSettingsFieldClass(),\n                nestedAnswer: progIdsJoined !== '' ? 'data-nested-index=\"'+ aNum +'\"' : '' ,\n                optionsHtml: '',\n                progIdsJoined: progIdsJoined,\n                questionNumber: qNum,\n                answerCode: (aType === 'option' ? 'select' : aType) +'-' + qID +'-'+ (aId || 0) + '-' + qNum + (progIdsJoined !== '' ? '-'+progIdsJoined : '') +'-'+ aNum,\n                attrChecks: obj.checks ? 'data-checks=\"' + obj.checks + '\"' : '',\n                attrSubtype: answer.subtype ? 'data-subtype=\"' + answer.subtype + '\"' : '',\n                validateIfFilled: typeof obj.validateIfFilled !== 'undefined' ? 'data-validate-if-filled' : ''\n            };\n        \n        if( needsBinding ){\n            \n            const boundedFieldEl = formEl.closest('[data-surveyjs-container]').querySelectorAll('[data-name=\"bind-surveyjs-answer\"]')[a],\n                fieldProps = {\n                    id: objData.answerCode,\n                    name: objData.answerName,\n                    type: aType,\n                    value: objData.answerId\n                };\n            \n            if( typeof obj.required !== 'undefined' ){ fieldProps.required = true; }\n            \n            for(let key in fieldProps){\n                boundedFieldEl[key] = fieldProps[key];\n            }\n            boundedFieldEl.setAttribute('data-answer-id', objData.answerId);\n            boundedFieldEl.closest('div').querySelector('label').setAttribute('for', objData.answerCode);\n            boundedFieldEl.closest('div').querySelector('label span').textContent = answer.answer;\n            \n            continue;\n            \n        }\n        \n        if( typeof answer.answer === 'string' || typeof answer.answer === 'number' ){\n\n                // beforeCode       MANAGE FIELD INDENT ( FOR NESTED ANSWERS - SEE BELOW )\n                // afterCode        MANAGE FIELD INDENT ( FOR NESTED ANSWERS - SEE BELOW )\n                let surveyFieldType = ( answer.attribute ? 'attribute' : (answer.nested ? 'nested' : ( aType === 'option' ? 'select' : aType )) ),\n                      beforeCode = progIdsLength > 0 && a === 0 ? '<div class=\"surveyjs-field-indent\">' : '',\n                      afterCode = progIdsLength > 0 && a === listL - 1 ? '</div>' : '',\n                      data = { answer, objData, beforeCode, afterCode, obj };\n\n                if( typeof generateFieldHTML[surveyFieldType] === 'undefined' ){\n                    surveyFieldType = 'input';\n                }\n\n                // GENERATE FIELD HTML CODE FROM surveyFieldType\n                fieldData = generateFieldHTML[surveyFieldType]( options, data );\n                \n                objData = fieldData.objData;\n\n                if( answer.nested ){\n                    progIds.push( aNum );\n                    aLoopHtml += fieldData.aHtml;\n                    aLoopHtml += iterateAnswers(formEl, options, answer.nested, qID, i, objData.attrRequired);\n                    continue;\n                }\n\n                // IF LOOPING A NESTED ANSWER AND THE END OF THAT ARRAY IS REACHED\n                // REMOVE THE LAST ITEM OF progIds ( SO AT THE NEXT LOOP IT WILL NOT INDENT THE ANSWER )\n                if( progIdsLength > 0 && a === listL-1 ){ progIds.pop(); }\n\n        }\n\n        fieldData.aHtml = replaceTemplateStrings(options, fieldData, objData);\n        aLoopHtml += fieldData.aHtml;\n        \n        if( aType === 'option' ){\n            a = a + obj.answers.length;\n        }\n        \n    }\n\n    return aLoopHtml;\n\n}\n","\nimport { appendDomStringToNode }from '../helpers';\nimport { generateQAcode }       from './generateQAcode';\nimport { populateAnswers }      from './populateAnswers';\n\nexport const buildSurvey = ( formEl, options, internals, data ) => {\n    \n    const self = formEl.formjs,\n          formName = formEl.getAttribute('name') || '';\n    \n    // REPLACE SURVEY ID AND FORM NAME IN LOCALSTORAGE NAME\n    self.internals.storageName = internals.storageName.replace( /{{surveyId}}/g, data.id );\n    self.internals.storageName = internals.storageName.replace( /{{surveyFormName}}/g, formName );\n    \n    // ITERATES THE QUESTIONS ( AND ALSO THEIR ANSWERS )...AND RETURN ALL THE HTML CODE\n    const qaHtmlAll = generateQAcode( formEl, options, data.questions );\n    // PRINT ALL QUESTIONS & ANSWERS\n    appendDomStringToNode( qaHtmlAll, formEl.querySelector('[data-surveyjs-body]') );\n\n    // FILL ANSWERS WITH LOCAL STORAGE ( IF AVAILABLE )\n    if( options.useLocalStorage ){\n        populateAnswers( formEl, self.internals );\n    }\n\n}\n","\nexport const appendDomStringToNode = ( HTMLstring, parentNode ) => {\n\n    const tmpEl = document.createElement('div');\n    tmpEl.innerHTML = HTMLstring;\n    Array.from( tmpEl.childNodes ).forEach((elem) => {\n        parentNode.appendChild( elem );\n    });\n\n}\n","\nimport { iterateAnswers } from './generateQAcodeUtils/iterateAnswers';\n\nexport const generateQAcode = ( formEl, options, questionsList = [] ) => {\n\n    const qaData = questionsList[0]['sort'] ? questionsList.sort((a, b) => { return a['sort'] > b['sort']; }) : questionsList,\n          qaDataLength = qaData.length;\n    \n    let qaCodeAll = '';\n    \n    for(let i=0; i<qaDataLength; i++){\n        const item = qaData[i],\n              maxChoice = item.checks ? JSON.parse(item.checks) : '',\n              checksMin = maxChoice.length > 0 ? maxChoice[0] : '',\n              checksMax = maxChoice.length > 0 ? maxChoice[1] : '';\n\n        let aHtml = '',\n            qaHtml = options.templates.question;\n\n        // HTML CODE FOR THE ANSWER/S\n        aHtml += iterateAnswers( formEl, options, item, item.id, i );\n\n        if( item.question === 'hidden-privacy' ){\n            const bindAnswerEl = formEl.closest('[data-surveyjs-container]').querySelector('[data-name=\"bind-surveyjs-answer\"]');\n            if( bindAnswerEl ){\n                bindAnswerEl.closest('[data-formjs-question]').setAttribute('data-question-id', item.id);\n                continue;\n            }\n        }\n\n        // REPLACE QUESTION DATA AND ANSWERS HTML IN LOCAL VARIABLE qaHtml\n        qaHtml = qaHtml.replace( /{{questionId}}/g, item.id );\n        qaHtml = qaHtml.replace( /{{questionNumber}}/g, (i+1) );\n        qaHtml = qaHtml.replace( /{{questionText}}/g, item.question + ( maxChoice !== '' ? ' ('+ checksMax +' '+ options.maxChoiceText +')' : '' ) );\n        qaHtml = qaHtml.replace( /{{answersHtml}}/g, aHtml );\n        qaHtml = qaHtml.replace( /{{fieldErrorTemplate}}/g, ( options.fieldErrorFeedback ? options.templates.fieldError : '' ) );\n        if( options.fieldErrorFeedback && options.templates.fieldError.indexOf('{{fieldErrorMessage}}') !== -1 ){\n            const message = maxChoice !== '' ? options.fieldErrorMessageMultiChoice : options.fieldErrorMessage;\n            qaHtml = qaHtml.replace( /{{fieldErrorMessage}}/g, message ).replace( /{{checksMin}}/g, checksMin ).replace( /{{checksMax}}/g, checksMax );\n        }\n\n        qaCodeAll += qaHtml;\n    }\n    \n    return qaCodeAll;\n\n}\n","\nexport const populateAnswers = ( formEl, internals ) => {\n\n    const LS = localStorage.getObject( internals.storageName );\n    if( LS ){\n        const surveyContEl = formEl.closest('[data-surveyjs-container]');\n        internals.storageArray = LS;\n        LS.forEach(item => {\n            const fieldFirst = surveyContEl.querySelector( '[name=\"' + item.field + '\"]' ),\n                  isRadioOrCheckbox = fieldFirst.matches('[type=\"radio\"], [type=\"checkbox\"]'),\n                  fieldEl = ( isRadioOrCheckbox ? surveyContEl.querySelector( '[name=\"' + item.field + '\"][value=\"' + item.value + '\"]' ) :   fieldFirst );\n            \n            if( isRadioOrCheckbox ){\n                fieldEl.checked = true;\n            } else {\n                fieldEl.value = item.value;\n            }\n        });\n    }\n\n}\n","\nimport { ajaxCall, customEvents, deepFreeze, dispatchCustomEvent, mergeObjects, webStorage } from './modules/helpers';\nimport { messages }             from './modules/messages';\nimport { options }              from './modules/options';\nimport { internals }            from './modules/internals';\nimport { callbackFns }          from './modules/listenerCallbacks';\nimport { buildSurvey }          from './modules/buildSurvey/buildSurvey';\nimport { destroy }              from './modules/destroy';\n\nimport Form from 'formjs-plugin';\n\nimport './index.scss';\n\nconst version = '3.0.0';\n\nclass Survey extends Form {\n\n    constructor( formEl, optionsObj = {} ){\n        if( !optionsObj.url || typeof optionsObj.url !== 'string' ){\n            throw new Error('\"options.url\" is missing or not a string!');\n        }\n\n        // SET THE lang VALUE IN options ( MANDATORY FOR OTHER OPERATIONS )\n        const customLang = typeof optionsObj.lang === 'string' && optionsObj.lang.toLowerCase();\n        const langValue = customLang && Survey.prototype.messages[customLang] ? customLang : Survey.prototype.options.lang;\n        \n        // MERGE OPTIONS AND messages OF THE CHOSEN lang INSIDE options\n        const options = mergeObjects( {}, Survey.prototype.options, Survey.prototype.messages[langValue], optionsObj );\n\n        if( options.templates.input.indexOf('{{inputTagCode}}') !== -1 ){\n            options.templates.input = options.templates.input.replace( /{{inputTagCode}}/g, options.templates.inputTag );\n        }\n\n        options.templates.labelTag = options.templates.labelTag.replace(/{{labelClass}}/g, options.cssClasses.label);\n\n        if( !webStorage().isAvailable ){\n            options.useLocalStorage = false;\n        }\n\n        // CREATE FORM INSTANCE FOR SURVEY\n        super( formEl, options );\n        const self = this;\n        self.internals = internals;\n        self.options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n            const useCapturing = eventName === 'blur' ? true : false;\n            self.formEl.addEventListener(eventName, callbackFns.validation, useCapturing);\n        });\n        self.formEl.addEventListener('fjs.form:submit', event => {\n            event.data.then(() => {\n                if( self.options.useLocalStorage ){\n                    localStorage.removeItem( self.internals.storageName );\n                }\n            });\n        });\n\n        // CREATE SURVEY\n        self.formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforebegin', self.options.loadingBox );\n        const retrieveSurvey = ajaxCall(self.options.url, self.options.initAjaxOptions)\n            .then(response => {\n                if( response.status.toLowerCase() !== 'success' ){\n                    return Promise.reject(response);\n                }\n                return new Promise(resolve => {\n                    if( response.data.questions && response.data.questions.length > 0 ){\n                        buildSurvey(self.formEl, self.options, self.internals, response.data);\n                        super.init().then(() => {\n                            self.isInitialized = true;\n                            self.data = response.data;\n                            deepFreeze(self.data);\n                            self.formEl.closest('[data-surveyjs-container]').classList.add('surveyjs-init-success');\n                            resolve(response);\n                        });\n                    } else {\n                        resolve(response);\n                    }\n                });\n            })\n            .finally(() => {\n                const loadingBoxEl = self.formEl.querySelector('[data-surveyjs-loading]');\n                if( loadingBoxEl ){\n                    loadingBoxEl.parentNode.removeChild(loadingBoxEl);\n                }\n            });\n        \n        dispatchCustomEvent( self.formEl, customEvents.init, retrieveSurvey );\n    }\n\n    destroy(){\n        destroy(this.formEl);\n        super.destroy();\n    }\n    \n    static addLanguage( langString, langObject ){\n        const langValue = langString.toLowerCase();\n        Survey.prototype.messages[langValue] = mergeObjects({}, Survey.prototype.messages[langValue], langObject);\n    }\n\n    static setOptions( optionsObj ){\n        Survey.prototype.options = mergeObjects({}, Survey.prototype.options, optionsObj);\n    }\n\n}\n\nSurvey.prototype.isInitialized = false;\nSurvey.prototype.messages = messages;\nSurvey.prototype.options = options;\nSurvey.prototype.version = version;\n\nexport default Survey;\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nimport { callbackFns } from './listenerCallbacks';\n\nexport const destroy = formEl => {\n\n    formEl.formjs.options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.removeEventListener(eventName, callbackFns.validation, useCapturing);\n    });\n    \n}\n","\nexport const messages = {\n    it: {\n        loadingBox:         '<div class=\"surveyjs-loading\" data-surveyjs-loading><i class=\"glyphicon glyphicon-refresh icon-spin\"></i> Caricamento in corso...</div>',\n        selectFirstOption:  'Seleziona una risposta...',\n        textareaPlaceholder:'Scrivi la tua risposta...',\n        maxChoiceText:      'RISPOSTE MAX',\n        fieldErrorMessage:  '&Egrave; necessario rispondere.',\n        fieldErrorMessageMultiChoice:  'Puoi scegliere da {{checksMin}} a {{checksMax}} risposte.'\n    },\n    en: {\n        loadingBox:         '<div class=\"surveyjs-loading\" data-surveyjs-loading><i class=\"glyphicon glyphicon-refresh icon-spin\"></i> Loading...</div>',\n        selectFirstOption:  'Select your answer...',\n        textareaPlaceholder:'Write here your answer...',\n        maxChoiceText:      'ANSWERS MAX',\n        fieldErrorMessage:  'Answer is necessary.',\n        fieldErrorMessageMultiChoice:  'You can choose from {{checksMin}} to {{checksMax}} answers.'\n    }\n}\n"],"names":["customEvents","deepFreeze","obj","Object","getOwnPropertyNames","forEach","name","prop","freeze","isPlainObject","object","prototype","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","fieldsStringSelectorSurvey","isEmptyObject","length","webStorage","isAvailable","mod","localStorage","setItem","removeItem","e","checkLocalStorage","Storage","setObject","value","this","JSON","stringify","getObject","getItem","parse","getQuestionObject","data","questionId","questions","qLength","q","question","id","defaultCallbacksInOptions","formOptions","beforeSend","isHacking","instance","surveyContEl","formEl","closest","fieldsList","querySelectorAll","fieldNameCheck","fieldTypeCheck","fieldEl","type","matches","questionIdEl","getAttribute","questionObj","required","isRequiredFrom","reqMoreEl","document","querySelector","checked","fieldOptions","options","focusOnRelated","validateForm","then","formRes","stopExecution","getFormData","formjs","answers","fieldValue","qaObj","answer","id_answer","text","elem","attributes","trim","el","cssClasses","checkbox","default","file","label","radio","select","textarea","fieldErrorFeedback","initAjaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","lang","templates","fieldError","input","inputGroup","inputTag","labelTag","selectTag","useLocalStorage","internals","storageArray","storageName","location","href","getAnswerIndexInLocalStorage","fieldName","multiChoiceValue","lsSurvey","lsSurveyLength","ls","lsItem","field","callbackFns","event","eventName","target","self","containerEl","isMultiChoice","isRequireMore","itemEl","split","isFieldForChangeEventBoolean","isFieldForChangeEvent","inArrayPos","inArrayRequireMorePos","splice","oldFieldNamePos","elReqFromEl","generateOptionTags","optionsList","optionsHtml","selectFirstOption","opt","generateFieldHTML","attribute","objData","aHtml","attr","attributeIsArray","relatedAnswerField","fieldClass","beforeCode","afterCode","answerType","nestedAnswer","nested","labelForNested","replace","answerCode","answerPlaceholder","placeholder","textareaPlaceholder","replaceTemplateStrings","fieldData","relatedAnswerKeys","answerIdValue","attrRequired","addMoreName","attrRequiredFrom","reKey","regexStrRe","RegExp","regexStr","progIds","iterateAnswers","qID","qIdx","attrReq","list","listL","i","aLoopHtml","needsBinding","sort","a","b","aNum","qNum","aType","aId","progIdsLength","progIdsJoined","join","getSettingsFieldClass","labelTagCode","answerId","answerIndex","answerName","answerMaxlength","maxlength","answerString","questionNumber","attrChecks","checks","attrSubtype","subtype","validateIfFilled","boundedFieldEl","fieldProps","setAttribute","textContent","surveyFieldType","pop","buildSurvey","formName","HTMLstring","parentNode","tmpEl","createElement","innerHTML","childNodes","appendChild","appendDomStringToNode","questionsList","qaData","qaDataLength","qaCodeAll","item","maxChoice","checksMin","checksMax","qaHtml","bindAnswerEl","maxChoiceText","indexOf","message","fieldErrorMessageMultiChoice","fieldErrorMessage","generateQAcode","LS","fieldFirst","isRadioOrCheckbox","populateAnswers","Survey","Form","[object Object]","optionsObj","url","Error","customLang","toLowerCase","langValue","messages","super","validateOnEvents","useCapturing","addEventListener","insertAdjacentHTML","loadingBox","retrieveSurvey","timeoutTimer","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","json","Promise","reject","catch","error","finally","clearTimeout","ajaxCall","status","resolve","init","isInitialized","classList","add","loadingBoxEl","removeChild","eventOptions","bubbles","eventObj","Event","dispatchEvent","dispatchCustomEvent","removeEventListener","destroy","langString","langObject","it","en","version"],"mappings":"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"}