{"version":3,"file":"surveyjs-esm.min.js","sources":["../src/modules/version.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/deepFreeze.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/getQuestionId.js","../src/modules/helpers/isEmptyObject.js","../src/modules/helpers/replaceObjectKeysInString.js","../src/modules/helpers/sortList.js","../src/modules/helpers/webStorage.js","../src/modules/utils/getQuestionObject.js","../src/modules/options.js","../src/modules/optionsUtils.js","../src/modules/helpers/fieldsStringSelectorSurvey.js","../src/modules/internals.js","../src/modules/listenerCallbacks/submit.js","../src/modules/utils/getAnswerIndex.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/helpers/arrayMove.js","../src/modules/buildSurvey/generateQAcodeUtils/generateOptionTags.js","../src/modules/buildSurvey/generateQAcodeUtils/getAttributesStringHTML.js","../src/modules/helpers/toKebabCase.js","../src/modules/buildSurvey/generateQAcodeUtils/generateAnswers.js","../src/modules/buildSurvey/generateQAcodeUtils/getTemplates.js","../src/modules/buildSurvey/buildSurvey.js","../src/modules/buildSurvey/generateQAcode.js","../src/index.js","../src/modules/helpers/ajaxCall.js","../src/modules/buildSurvey/populateAnswers.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/destroy.js"],"sourcesContent":["\nexport const version = '3.0.0';\n","\nexport const customEvents = {\n    init: 'sjs:init'\n}\n","\nexport const deepFreeze = obj => {\n\n    Object.getOwnPropertyNames(obj).forEach(name => {\n        const prop = obj[name];\n        if( typeof prop === 'object' && prop !== null ){\n            deepFreeze(prop);\n        }\n    });\n    return Object.freeze(obj);\n    \n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nexport const getQuestionId = fieldEl => {\n    const containerEl = fieldEl.closest('[data-question-id]');\n    return (containerEl && containerEl.getAttribute('data-question-id')) || '';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const isEmptyObject = object => {\n    return isPlainObject(object) && Object.getOwnPropertyNames(object).length === 0;\n}\n","\nexport const replaceObjectKeysInString = (obj, stringHTML) => {\n    return Object.keys(obj).reduce((accString, name) => {\n        const regexStr = new RegExp( '{{' + name + '}}', 'g' );\n        return accString.replace(regexStr, obj[name]);\n    }, stringHTML);\n}\n","\nexport const sortList = ( list ) => {\n    if( list[0]['sort'] ){\n        list.sort((a, b) => a['sort'] > b['sort']);\n    }\n    return list;\n}\n","\nexport const webStorage = () => {\n\n    const checkLocalStorage = () => {\n        const mod = 'check_storage';\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    const isAvailable = checkLocalStorage();\n\n    if( isAvailable ){\n        // setObject METHOD FOR HTML STORAGE -> EG: localStorage.setObject( name, JSobj )\n        // TO STORE A JS OBJECT ( AS JSON STRING ) INSIDE THE STORAGE\n        Storage.prototype.setObject = function( key, value ) {\n            this.setItem( key, JSON.stringify(value) );\n        }\n\n        // getObject METHOD FOR HTML STORAGE -> EG: localStorage.getObject( name )\n        // RETURN THE DATA ( STORED AS JSON STRING ) AS JS OBJECT\n        Storage.prototype.getObject = function( key ) {\n            const value = this.getItem( key );\n            return value && JSON.parse( value );\n        }\n    }\n\n    return {\n        isAvailable: isAvailable\n    }\n\n}\n","\nexport const getQuestionObject = ( questions, questionId ) => {\n\n    const qLength = questions.length;\n\n    let obj = {};\n    \n    for(let q=0; q<qLength; q++){\n        const question = questions[q];\n        if( question.id == questionId ){\n            obj = question;\n            break;\n        }\n    }\n\n    return obj;\n\n}","\nimport { optionsUtils } from './optionsUtils';\n\nexport const options = {\n    cssClasses: {\n        checkbox:           'form-check-input',\n        field:              'form-control',\n        file:               'form-control-file',\n        label:              'form-check-label',\n        radio:              'form-check-input',\n        wrapper: {\n            checkbox:       'form-check',\n            field:          '',\n            radio:          'form-check'\n        }\n    },\n    formOptions: {\n        getFormData:        optionsUtils.formOptions.getFormData\n    },\n    initAjaxOptions: {\n        cache:              'no-store',\n        credentials:        'same-origin',\n        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept':       'application/json'\n        },\n        method:             'GET',\n        mode:               'same-origin',\n        redirect:           'follow',\n        timeout:            0\n    },\n    messages:{\n        maxChoice:          'answers max',\n        error:              'Answer is necessary.',\n        errorMultiChoice:   'You must choose from {{checksMin}} to {{checksMax}} answers.'\n    },\n    showErrorMessage:       true,\n    templates: {\n        error:              '<div class=\"surveyjs-error-message\">{{errorMessage}}</div>',\n        \n        input:              '<input {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-input surveyjs-{{answerType}} {{fieldClasses}}\" />',\n\n        label:              '<label for=\"{{answerCode}}\" class=\"surveyjs-label {{labelClasses}}\">{{labelString}}</label>',\n\n        loading:            '<div class=\"surveyjs-loading\" data-surveyjs-loading>Loading...</div>',\n        \n        select:             '<select {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-select {{fieldClasses}}\">'+\n                                '{{optionsHtml}}'+\n                            '</select>',\n        \n        textarea:           '<textarea {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}\" class=\"surveyjs-textarea {{fieldClasses}}\"></textarea>',\n\n        wrapper: {\n            field:          '<div class=\"surveyjs-field-wrapper surveyjs-{{answerType}}-wrapper {{wrapperClasses}}\">'+\n                                '{{fieldTemplate}}'+\n                                '{{labelTemplate}}'+\n                            '</div>',\n            \n            nested:         '<div class=\"surveyjs-field-wrapper surveyjs-nested-wrapper\">'+\n                                '{{labelTemplate}}'+\n                                '<div class=\"surveyjs-nested-inner\">'+\n                                    '{{nestedFieldsHTML}}'+\n                                '</div>'+\n                            '</div>',\n\n            question:       '<div class=\"surveyjs-question-wrapper\" data-question-id=\"{{questionId}}\" data-formjs-question>'+\n                                '<div class=\"surveyjs-question-text\">{{questionText}}</div>'+\n                                '<div class=\"surveyjs-answers-wrapper\">'+\n                                    '{{answersHTML}}'+\n                                '</div>'+\n                                '<div class=\"surveyjs-errors-wrapper\" data-surveyjs-errors>{{errorTemplates}}</div>'+\n                            '</div>',\n            \n            related:        '<div class=\"surveyjs-field-wrapper surveyjs-related-wrapper input-group\">'+\n                                '<div class=\"input-group-prepend\">'+\n                                    '<div class=\"surveyjs-radio-wrapper input-group-text form-check\">'+\n                                        '{{fieldTemplate}}'+\n                                        '{{labelTemplate}}'+\n                                    '</div>'+\n                                '</div>'+\n                                '{{relatedFieldHTML}}'+\n                            '</div>'\n        }\n    },\n    useWebStorage:          true\n}\n","\nimport { fieldsStringSelectorSurvey, getQuestionId, isEmptyObject } from './helpers';\nimport { getQuestionObject } from './utils/getQuestionObject';\n\nexport const optionsUtils = {\n    formOptions: {\n\n        getFormData: function getFormData_surveyDefault(){\n            const instance = this;\n            const formEl = instance.formEl;\n            const fieldsList = Array.from( formEl.closest('[data-surveyjs-wrapper]').querySelectorAll(fieldsStringSelectorSurvey) );\n            const obj = {\n                    answers: [],\n                    id: instance.data.id\n                };\n            \n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                // EACH QUESTION HAS ITS OWN OBJECT ( qaObj ) THAT CONTAINS THE RELATED DATA:\n                // question:    THE QUESTION ID ( undefined FOR QUESTIONS WITH ATTRIBUTE data-required-form - will be skipped later )\n                // answer       AN OBJECT THAT CONTAINS THE FOLLOWS:\n                //                  value:      THE ANSWER VALUE\n                //                  related:    IF THE ANSWER IS REQUIRED FROM ANOTHER ANSWER (SEE BELOW)\n                const questionId = getQuestionId(fieldEl),\n                      qaObj = {\n                        question: questionId,\n                        answer: {\n                            value: fieldEl.value || ''\n                        }\n                    };\n\n                // A FIELD WITH ATTRIBUTE 'data-required-from' IS MANAGED TOGETHER WITH ITS RELATED FIELD ( WHICH HAS ATTRIBUTE 'data-require-more' )\n                // IF QUESTION ID IS EMPTY -> SKIP THE FIELD ( USEFUL FOR FORM FIELDS OUTSIDE THE SURVEY BODY )\n                if(\n                    fieldEl.matches('[data-required-from]') || \n                    questionId === '' || \n                    isEmptyObject( getQuestionObject(instance.data.questions, questionId) )\n                ){ return; }\n\n                if( type === 'radio' ){\n                    const containerEl = fieldEl.closest('form') ? formEl : fieldEl.closest(instance.options.fieldOptions.questionContainer);\n                    const checkedEl = containerEl.querySelector('[name=\"'+ name +'\"]:checked');\n\n                    qaObj.answer.value = (checkedEl && checkedEl.value) || '';\n\n                    // FOR RADIO THAT REQUIRE THE USER TO GIVE ONE MORE ANSWER\n                    if( checkedEl && checkedEl.matches('[data-require-more]') ){\n                        qaObj.answer.related = formEl.querySelector('[data-required-from=\"#'+ checkedEl.id +'\"]').value;\n                    }\n                }\n\n                if( type === 'checkbox' && fieldEl.matches('[data-checks]') ){\n                    qaObj.answer.value = [];\n                    Array.from(formEl.querySelectorAll('[name=\"'+ name +'\"]:checked')).forEach(el => {\n                        qaObj.answer.value.push( el.value );\n                    });\n                }\n                \n                obj.answers.push( qaObj );\n            });\n        \n            return obj;\n        }\n    \n    }\n}\n","\nexport const fieldsStringSelectorSurvey = '[data-surveyjs-form] input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]), [data-surveyjs-form] select, [data-surveyjs-form] textarea, [data-surveyjs-external] [data-field]'\n","\nexport const internals = {\n    storageName: 'Survey_' + location.href + '_{{surveyFormName}}_surveyId[{{surveyId}}]'\n}\n","\nexport function submit( event ){\n    const self = event.target.formjs;\n    event.data.then(() => {\n        if( self.options.useWebStorage ){\n            sessionStorage.removeItem( self.internals.storageName );\n        }\n    });\n}\n","\nexport const getAnswerIndex = ( list, fieldName, multiChoiceValue = '' ) => {\n\n    const listLength = list.length;\n\n    for(let item = 0; item < listLength; item++){\n        const lsItem = list[item];\n        if( lsItem.name === fieldName ){\n            if( multiChoiceValue ){\n                if( lsItem.value !== multiChoiceValue ){\n                    continue;\n                }\n            }\n            return item;\n        }\n    }\n    \n    return -1;\n\n}","\nimport { arrayMove, getQuestionId, isEmptyObject }  from '../helpers';\nimport { getQuestionObject }                        from '../utils/getQuestionObject';\nimport { getAnswerIndex }                           from '../utils/getAnswerIndex';\n\nexport function validationEnd( event ){\n    const fieldEl = event.data.fieldEl;\n    const errors = event.data.errors;\n    const instance = fieldEl.closest('form').formjs;\n    const options = instance.options;\n    const errorsWrapper = fieldEl.closest( options.fieldOptions.questionContainer ).querySelector('[data-surveyjs-errors]');\n    const isFormSubmitting = fieldEl.closest('form').classList.contains( options.formOptions.cssClasses.submit );\n    \n    const questionId = getQuestionId(fieldEl);\n    const questionObj = getQuestionObject(instance.data.questions, questionId);\n\n    // IF IT'S NOT A SURVEY QUESTION -> SKIP\n    if( isEmptyObject(questionObj) ){ return true; }\n\n    // MANAGE MULTIPLE ERROR MESSAGES\n    if( errorsWrapper && errors && isPlainObject(questionObj.errorMessage) ){\n        let errorsList = Object.keys(errors);\n        if( errors.rule ){\n            // PUT ERROR \"rule\" AS FIRST, SO THAT A GENERIC ERROR IS SHOWN BEFORE ALL OTHERS\n            const ruleIndex = errorsList.indexOf('rule');\n            errorsList = arrayMove(errorsList, ruleIndex, 0);\n        }\n        const errorsHTML = errorsList.reduce((accHTML, name) => {\n            const errorMessage = questionObj.errorMessage[name] || '';\n            return accHTML += errorMessage ? options.templates.error.replace('{{errorMessage}}', errorMessage) : '';\n        }, '');\n\n        errorsWrapper.innerHTML = errorsHTML;\n    }\n\n    // MANAGE ITEMS IN LOCAL STORAGE ( IF AVAILABLE AND ACTIVE )\n    if( !isFormSubmitting && options.useWebStorage && !fieldEl.matches('[data-exclude-storage]') ){\n        const storageName = instance.internals.storageName;\n        let storageArray = sessionStorage.getObject( storageName ) || [];\n\n        const name = fieldEl.name;\n        const value = fieldEl.value;\n        const isRequiredFrom = fieldEl.matches('[data-required-from]');\n        const isMultiChoice = fieldEl.matches('[data-checks]');\n        const isRequireMore = fieldEl.matches('[data-require-more]');\n        const reqMoreEl = isRequiredFrom ? document.querySelector(fieldEl.getAttribute('data-required-from')) : null;\n\n        const inArrayRequireMorePos = getAnswerIndex( storageArray, name + '-more' );            \n        if( !isRequireMore && !isRequiredFrom && inArrayRequireMorePos >= 0 ){\n            // WHEN CHECKING A RADIO WITHOUT RELATED ANSWER ( IN A LIST OF RADIOS WITH ONE REQ-MORE ) => REMOVE RELATED ANSWER FROM STORAGE\n            storageArray.splice(inArrayRequireMorePos, 1);\n        }\n\n        const inArrayPos = getAnswerIndex( storageArray, name, (isMultiChoice ? value : false) );\n        if( inArrayPos >= 0 ){\n            // REMOVE ITEM FROM LS\n            storageArray.splice(inArrayPos, 1);\n            if( (isMultiChoice && fieldEl.checked) || (!isMultiChoice && value !== '') ){\n                // ADD ITEM TO LS\n                storageArray.push( { name, value } );\n            }\n        } else {\n            if( value !== '' ){\n                if( isRequiredFrom && value !== '' ){\n                    const reqMorePos = getAnswerIndex( storageArray, reqMoreEl.name );\n                    if( reqMorePos >= 0 ){\n                        storageArray.splice(reqMorePos, 1);\n                    }\n                    storageArray.push( { name: reqMoreEl.name, value: reqMoreEl.value } );\n                }\n                storageArray.push( { name, value } );\n                if( isRequireMore ){\n                    const reqFromEl = fieldEl.closest('form').querySelector( '[data-required-from=\"#' + fieldEl.id + '\"]' );\n                    storageArray.push( { name: reqFromEl.name, value: reqFromEl.value } );\n                }\n            }\n        }\n\n        sessionStorage.setObject( storageName, storageArray );\n    }\n\n    // BASED ON JSON DATA, FORCE REQUIRED FIELDS TO BE VALIDATED\n    if( questionObj.required && !fieldEl.required && !fieldEl.matches('[data-required-from]') ){\n        fieldEl.required = true;\n        instance.validateField(fieldEl);\n    }\n}\n","\nexport const arrayMove = (array, from, to) => {\n    array.splice(to, 0, array.splice(from, 1)[0]);\n    return array;\n}\n","\nimport { sortList } from '../../helpers';\n\nexport const generateOptionTags = ( optionsList = [] ) => {\n\n    return sortList( optionsList ).reduce((optionsHTML, opt) => {\n        return optionsHTML += `<option value=\"${opt.value}\">${opt.label}</option>`;\n    }, '');\n\n}","\nimport { toKebabCase } from '../../helpers';\n\nexport const getAttributesStringHTML = ( answerObj, answerCode, isRequired ) => {\n    const excludedAttrs = ['data', 'id', 'label', 'nested', 'related', 'sort'];\n    \n    if( /^(option|textarea)$/.test(answerObj.type) ){\n        excludedAttrs.push('type', 'value');\n    }\n\n    let string = '';\n\n    Object.keys(answerObj)\n        .filter(name => excludedAttrs.indexOf(name) === -1)\n        .forEach(name => {\n            string += ` ${name}=\"${answerObj[name]}\"`;\n        });\n\n    if( answerObj.data ){\n        Object.keys(answerObj.data).forEach(name => {\n            string += ` data-${toKebabCase(name)}=\"${answerObj.data[name]}\"`;\n        });\n    }\n\n    if( isRequired ){\n        string += ' required';\n    }\n\n    if( answerObj.related ){\n        string += ' data-require-more';\n    }\n\n    string += ` id=\"${answerCode}\"`;\n\n    return string.trim();\n}\n","\nexport const toKebabCase = ( string = '', useAllCaps = false ) => {\n    let newString = string.trim().replace(/(([_ ])([a-z]))|(([a-z])?([A-Z]))/g, (match, p1, p2, p3, p4, p5, p6) => {\n        const concatGroup = p3 ? '-' + p3 : (p5 || '') + '-' + p6;\n        return concatGroup.toLowerCase();\n    } );\n    return useAllCaps ? newString.toUpperCase() : newString;\n}\n","\nimport { mergeObjects, replaceObjectKeysInString, sortList } from '../../helpers';\nimport { generateOptionTags }       from './generateOptionTags';\nimport { getAttributesStringHTML }  from './getAttributesStringHTML';\nimport { getTemplates }             from './getTemplates';\n\nexport const generateAnswers = ( answersList, extraData, options ) => {\n\n    let allAnswersHTML = '';\n    let previousType = '';\n\n    sortList( answersList ).forEach((answer, index) => {\n\n        let answerHTML = '';\n\n        // COLLECT USEFUL DATA\n        // answerType => checkbox, date, email, radio, select, text, textarea, etc...\n        const answerType = answer.type === 'option' ? 'select' : answer.type;\n        \n        if( answerType === 'select' && previousType === answerType ){ return; }\n\n        previousType = answerType;\n\n        if( extraData.question.checks ){\n            answer = mergeObjects({}, answer, {data:{checks:extraData.question.checks}});\n        }\n        \n        const answerCode = `${answerType}-${extraData.surveyId}-${extraData.question.id}-${answerType === 'select' ? (index + 1) : answer.id}`;\n        const answerData = {\n            questionNumber: extraData.question.index + 1,\n            wrapperClasses: options.cssClasses.wrapper[answerType] || options.cssClasses.wrapper.field,\n            fieldAttributes: getAttributesStringHTML( answer, answerCode, extraData.question.isRequired ),\n            fieldClasses: options.cssClasses[answerType] || options.cssClasses.field,\n\n            answerType,\n            answerCode,\n            addMoreName: '',\n\n            labelString: answer.label || '',\n            labelClasses: options.cssClasses.label\n        };\n\n        let relatedFieldHTML = '';\n        if( answer.related ){\n            const relatedType = answer.related.type || 'select';\n            const relatedIsSelect = relatedType === 'select';\n            const relatedObj = relatedIsSelect ? mergeObjects({}, answer) : answer.related;\n\n            relatedObj.type = relatedIsSelect ? 'option' : relatedType;\n            relatedObj.id = '';\n            relatedObj.data = mergeObjects({}, relatedObj.data, {requiredFrom:'#'+answerCode});\n            delete relatedObj.related;\n\n            const answerDataRelated = {\n                fieldAttributes: getAttributesStringHTML(relatedObj, '', false),\n                answerType: relatedType,\n                addMoreName: '-more',\n                fieldClasses: relatedIsSelect ? options.cssClasses.select : (options.cssClasses[relatedType] || options.cssClasses.field)\n            };\n\n            relatedFieldHTML = options.templates[relatedType] || options.templates.input;\n            if( relatedIsSelect ){\n                const optionsHtml = generateOptionTags( answer.related );\n                relatedFieldHTML = relatedFieldHTML.replace('{{optionsHtml}}', optionsHtml);\n            }\n\n            relatedFieldHTML = replaceObjectKeysInString(answerDataRelated, relatedFieldHTML);\n        }\n        \n        // TAKE RIGHT TEMPLATES ( wrapper, field and label ) AND PUT ALL TOGETHER\n        // answerTypeForTemplate => related, input, nested, select, textarea, etc...\n        const answerTypeForTemplate = answer.related ? 'related' : (answer.nested ? 'nested' : answerType);\n        const templates = getTemplates( answerTypeForTemplate, options.templates );\n\n        let nestedFieldsHTML = '';\n        if( answer.nested ){\n            nestedFieldsHTML = generateAnswers( answer.nested, extraData, options );\n        }\n\n        let optionsHtml = '';\n        if( answerType === 'select' ){\n            optionsHtml = generateOptionTags( answersList );\n        }\n\n        answerHTML = templates.wrapper\n                        .replace('{{relatedFieldHTML}}', relatedFieldHTML)\n                        .replace('{{fieldTemplate}}', templates.field)\n                        .replace('{{optionsHtml}}', optionsHtml)\n                        .replace('{{labelTemplate}}', templates.label)\n                        .replace('{{nestedFieldsHTML}}', nestedFieldsHTML);\n        allAnswersHTML += replaceObjectKeysInString(answerData, answerHTML);\n\n    });\n\n    return allAnswersHTML;\n\n}\n","\nexport const getTemplates = ( answerType, templates ) => {\n    return {\n        field: templates[answerType] || templates.input,\n        label: /^(checkbox|nested|radio|related)$/.test(answerType) ? templates.label : '',\n        wrapper: templates.wrapper[answerType] || templates.wrapper.field\n    }\n}\n","\nimport { generateQAcode } from './generateQAcode';\n\nexport const buildSurvey = ( data, formEl, options ) => {\n    \n    const qaHtmlAll = generateQAcode( data.questions, data.id, options );\n    formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforeend', qaHtmlAll );\n\n    // MANAGE EXTERNAL QUESTION\n    const extQuestions = data.questions.filter(obj => obj.external);\n    if( extQuestions.length > 0 ){\n        const surveyWrapperEl = formEl.closest('[data-surveyjs-wrapper]');\n        extQuestions.forEach((question, qIndex) => {\n\n            const externalCont = surveyWrapperEl.querySelector('[data-surveyjs-external=\"'+ (qIndex+1) +'\"]');\n            \n            externalCont.setAttribute('data-question-id', question.id);\n\n            question.answers.forEach((answer, aIndex) => {\n                const externalField = externalCont.querySelectorAll('[data-field]')[aIndex];\n                const fieldProps = {\n                        id: `${answer.type}-${data.id}-${question.id}-${answer.id}`,\n                        type: answer.type,\n                        value: answer.value,\n                        required: !!question.required\n                    };\n                \n                Object.keys(fieldProps).forEach(name => {\n                    externalField[name] = fieldProps[name];\n                });\n\n                const answerCont = externalField.closest('[data-answer]');\n                answerCont.querySelector('label').setAttribute('for', fieldProps.id);\n                answerCont.querySelector('[data-label]').innerHTML = answer.label;\n                externalCont.querySelector('[data-question]').innerHTML = question.question;\n            });\n\n        });\n    }\n\n}\n","\nimport { isPlainObject, replaceObjectKeysInString, sortList } from '../helpers';\nimport { generateAnswers } from './generateQAcodeUtils/generateAnswers';\n\nexport const generateQAcode = ( questions, surveyId, options ) => {\n\n    return sortList( questions ).reduce((accCode, questionObj, index) => {\n        if( questionObj.external ){ return accCode; }\n\n        let questionHTML = options.templates.wrapper.question;\n        const questionId = questionObj.id;\n        const questionNumber = index + 1;\n        const extraData = {\n            surveyId,\n            question: {\n                id: questionId,\n                index,\n                isRequired: !!questionObj.required\n            }\n        };\n\n        if( questionObj.checks ){\n            extraData.question.checks = questionObj.checks;\n        }\n        \n        const answersHTML = generateAnswers( questionObj.answers, extraData, options );\n\n        const maxChoice = questionObj.checks ? JSON.parse(questionObj.checks) : '';\n        const checksMin = maxChoice[0] || '';\n        const checksMax = maxChoice[1] || '';\n        const maxChoiceText = maxChoice && options.messages.maxChoice ? ' ('+ checksMax +' '+ options.messages.maxChoice +')' : '';\n\n        const questionData = {\n            questionId,\n            questionNumber,\n            questionText: questionObj.question + maxChoiceText,\n            answersHTML\n        };\n        questionHTML = replaceObjectKeysInString(questionData, questionHTML);\n\n        if( options.showErrorMessage ){\n            let errorMessage = maxChoice !== '' ? options.messages.errorMultiChoice : (questionObj.errorMessage || options.messages.error);\n\n            // CASE OF MULTIPLE ERROR MESSAGES FROM JSON DATA => DYNAMICALLY MANAGED VIA EVENT LISTENER IN CONSTRUCTOR\n            if( isPlainObject(errorMessage) ){\n                errorMessage = '';\n            }\n\n            questionHTML = questionHTML.replace( /{{errorTemplates}}/g, errorMessage );\n        }\n\n        return accCode += replaceObjectKeysInString({checksMin, checksMax}, questionHTML);\n    }, '');\n\n}\n","\nimport { version }          from './modules/version';\nimport { ajaxCall, customEvents, deepFreeze, dispatchCustomEvent, mergeObjects, webStorage } from './modules/helpers';\nimport { options }          from './modules/options';\nimport { internals }        from './modules/internals';\nimport { submit, validationEnd } from './modules/listenerCallbacks';\nimport { buildSurvey }      from './modules/buildSurvey/buildSurvey';\nimport { populateAnswers }  from './modules/buildSurvey/populateAnswers';\nimport { destroy }          from './modules/destroy';\n\nimport Form from 'formjs-plugin';\n\nclass Survey extends Form {\n\n    constructor( formEl, optionsObj = {} ){\n        if( !optionsObj.url || typeof optionsObj.url !== 'string' ){\n            throw new Error('\"options.url\" is missing or not a string!');\n        }\n\n        optionsObj = mergeObjects( {}, Survey.prototype.options, optionsObj );\n\n        if( !webStorage().isAvailable ){\n            optionsObj.useWebStorage = false;\n        }\n\n        // CREATE FORM INSTANCE FOR SURVEY\n        super( formEl, optionsObj );\n        const self = this;\n        self.internals = internals;\n        formEl = self.formEl;\n        optionsObj = self.options;\n        const selfInternals = self.internals;\n\n        formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforebegin', optionsObj.templates.loading );\n\n        // CREATE SURVEY\n        const retrieveSurvey = ajaxCall(optionsObj.url, optionsObj.initAjaxOptions)\n            .then(response => {\n                if( response.status.toLowerCase() !== 'success' ){\n                    return Promise.reject(response);\n                }\n                return new Promise(resolve => {\n                    if( response.data.questions && response.data.questions.length > 0 ){\n    \n                        // REPLACE SURVEY ID AND FORM NAME IN WEB STORAGE NAME\n                        selfInternals.storageName = selfInternals.storageName.replace( /{{surveyId}}/, response.data.id );\n                        selfInternals.storageName = selfInternals.storageName.replace( /{{surveyFormName}}/, (formEl.getAttribute('name') || '') );\n\n                        buildSurvey(response.data, formEl, optionsObj);\n                        if( optionsObj.useWebStorage ){\n                            populateAnswers(formEl, selfInternals);\n                        }\n                        Object.defineProperty(self, 'data', {\n                            value: deepFreeze(response.data)\n                        });\n                        formEl.addEventListener('fjs.field:validation', validationEnd);\n                        formEl.addEventListener('fjs.form:submit', submit);\n                        super.init().then(() => {\n                            self.isInitialized = true;\n                            formEl.closest('[data-surveyjs-wrapper]').classList.add('surveyjs-init-success');\n                            resolve(response);\n                        });\n\n                    } else {\n                        resolve(response);\n                    }\n                });\n            })\n            .finally(() => {\n                const loadingBoxEl = formEl.querySelector('[data-surveyjs-loading]');\n                if( loadingBoxEl ){\n                    loadingBoxEl.parentNode.removeChild(loadingBoxEl);\n                }\n            });\n        \n        dispatchCustomEvent( formEl, customEvents.init, retrieveSurvey );\n    }\n\n    destroy(){\n        destroy(this.formEl);\n        super.destroy();\n    }\n\n    static setOptions( optionsObj ){\n        Survey.prototype.options = mergeObjects({}, Survey.prototype.options, optionsObj);\n    }\n\n}\n\nSurvey.prototype.isInitialized = false;\nSurvey.prototype.options = options;\nSurvey.prototype.version = version;\n\nexport default Survey;\n","\nexport const ajaxCall = ( url = location.href, options = {} ) => {\n\n    let timeoutTimer;\n\n    options.headers = new Headers( options.headers );\n\n    /* SET AbortController FOR timeout */\n    if ( options.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        options.signal = signal;\n\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, options.timeout);\n    }\n\n    return fetch( url, options )\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n        });\n        \n}\n","\nexport const populateAnswers = ( formEl, internals ) => {\n\n    const WS = sessionStorage.getObject( internals.storageName );\n    if( WS ){\n        const surveyContEl = formEl.closest('[data-surveyjs-wrapper]');\n        WS.forEach(item => {\n            const fieldFirst = surveyContEl.querySelector( '[name=\"' + item.name + '\"]' ),\n                  isRadioOrCheckbox = fieldFirst.matches('[type=\"radio\"], [type=\"checkbox\"]'),\n                  fieldEl = ( isRadioOrCheckbox ? surveyContEl.querySelector('[name=\"' + item.name + '\"][value=\"' + item.value + '\"]') : fieldFirst );\n            \n            if( isRadioOrCheckbox ){\n                fieldEl.checked = true;\n            } else {\n                fieldEl.value = item.value;\n            }\n        });\n    }\n\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nimport { submit, validationEnd } from './listenerCallbacks';\n\nexport const destroy = formEl => {\n\n    formEl.removeEventListener('fjs.field:validation', validationEnd);\n    formEl.removeEventListener('fjs.form:submit', submit);\n    \n}\n"],"names":["customEvents","deepFreeze","obj","Object","getOwnPropertyNames","forEach","name","prop","freeze","isPlainObject","object","prototype","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","getQuestionId","fieldEl","containerEl","closest","getAttribute","isEmptyObject","length","replaceObjectKeysInString","stringHTML","reduce","accString","regexStr","RegExp","replace","sortList","list","sort","a","b","webStorage","isAvailable","mod","localStorage","setItem","removeItem","e","checkLocalStorage","Storage","setObject","value","this","JSON","stringify","getObject","getItem","parse","getQuestionObject","questions","questionId","qLength","q","question","id","options","cssClasses","checkbox","field","file","label","radio","wrapper","formOptions","getFormData","instance","formEl","fieldsList","querySelectorAll","answers","data","fieldNameCheck","fieldTypeCheck","type","matches","qaObj","answer","checkedEl","fieldOptions","questionContainer","querySelector","related","el","initAjaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","messages","maxChoice","error","errorMultiChoice","showErrorMessage","templates","input","loading","select","textarea","nested","useWebStorage","internals","storageName","location","href","submit","event","self","target","formjs","then","sessionStorage","getAnswerIndex","fieldName","multiChoiceValue","listLength","item","lsItem","validationEnd","errors","errorsWrapper","isFormSubmitting","classList","contains","questionObj","errorMessage","errorsList","rule","ruleIndex","indexOf","to","array","splice","errorsHTML","accHTML","innerHTML","storageArray","isRequiredFrom","isMultiChoice","isRequireMore","reqMoreEl","document","inArrayRequireMorePos","inArrayPos","checked","reqMorePos","reqFromEl","required","validateField","generateOptionTags","optionsList","optionsHTML","opt","getAttributesStringHTML","answerObj","answerCode","isRequired","excludedAttrs","test","string","useAllCaps","newString","trim","match","p1","p2","p3","p4","p5","p6","toLowerCase","toUpperCase","toKebabCase","generateAnswers","answersList","extraData","allAnswersHTML","previousType","index","answerHTML","answerType","checks","surveyId","answerData","questionNumber","wrapperClasses","fieldAttributes","fieldClasses","addMoreName","labelString","labelClasses","relatedFieldHTML","relatedType","relatedIsSelect","relatedObj","requiredFrom","answerDataRelated","optionsHtml","getTemplates","nestedFieldsHTML","buildSurvey","qaHtmlAll","accCode","external","questionHTML","answersHTML","checksMin","checksMax","maxChoiceText","questionData","questionText","generateQAcode","insertAdjacentHTML","extQuestions","surveyWrapperEl","qIndex","externalCont","setAttribute","aIndex","externalField","fieldProps","answerCont","Survey","Form","[object Object]","optionsObj","url","Error","super","selfInternals","retrieveSurvey","timeoutTimer","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","json","Promise","reject","catch","finally","clearTimeout","ajaxCall","status","resolve","WS","surveyContEl","fieldFirst","isRadioOrCheckbox","populateAnswers","defineProperty","addEventListener","init","isInitialized","add","loadingBoxEl","parentNode","removeChild","elem","eventName","eventOptions","bubbles","eventObj","Event","dispatchEvent","dispatchCustomEvent","removeEventListener","destroy","version"],"mappings":"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"}