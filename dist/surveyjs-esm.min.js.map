{"version":3,"file":"surveyjs-esm.min.js","sources":["../src/modules/helpers/ajaxCall.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/deepFreeze.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/fieldsStringSelectorSurvey.js","../src/modules/helpers/isEmptyObject.js","../src/modules/helpers/replaceObjectKeysInString.js","../src/modules/helpers/sortList.js","../src/modules/helpers/webStorage.js","../src/modules/utils/getQuestionObject.js","../src/modules/optionsUtils.js","../src/modules/options.js","../src/modules/internals.js","../src/modules/utils/getAnswerIndexInWebStorage.js","../src/modules/listenerCallbacks.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/buildSurvey/generateQAcodeUtils/generateOptionTags.js","../src/modules/buildSurvey/generateQAcodeUtils/getAttributesStringHTML.js","../src/modules/helpers/toKebabCase.js","../src/modules/buildSurvey/generateQAcodeUtils/generateAnswers.js","../src/modules/buildSurvey/generateQAcodeUtils/getTemplates.js","../src/modules/buildSurvey/buildSurvey.js","../src/modules/buildSurvey/generateQAcode.js","../src/modules/buildSurvey/populateAnswers.js","../src/index.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/destroy.js","../src/modules/messages.js"],"sourcesContent":["\nexport const ajaxCall = ( url = location.href, options = {} ) => {\n\n    let timeoutTimer;\n\n    options.headers = new Headers( options.headers );\n\n    /* SET AbortController FOR timeout */\n    if ( options.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        options.signal = signal;\n\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, options.timeout);\n    }\n\n    return fetch( url, options )\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n        });\n        \n}\n","\nexport const customEvents = {\n    init: 'sjs:init'\n}\n","\nexport const deepFreeze = obj => {\n\n    Object.getOwnPropertyNames(obj).forEach(name => {\n        const prop = obj[name];\n        if( typeof prop === 'object' && prop !== null ){\n            deepFreeze(prop);\n        }\n    });\n    return Object.freeze(obj);\n    \n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nexport const fieldsStringSelectorSurvey = '[data-surveyjs-form] input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]), [data-surveyjs-form] select, [data-surveyjs-form] textarea, [data-name=\"bind-surveyjs-answer\"]'\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const isEmptyObject = object => {\n    return isPlainObject(object) && Object.getOwnPropertyNames(object).length === 0;\n}\n","\nexport const replaceObjectKeysInString = (obj, stringHTML) => {\n    return Object.keys(obj).reduce((accString, name) => {\n        const regexStr = new RegExp( '{{' + name + '}}', 'g' );\n        return accString.replace(regexStr, obj[name]);\n    }, stringHTML);\n}\n","\nexport const sortList = ( list ) => {\n    if( list[0]['sort'] ){\n        list.sort((a, b) => a['sort'] > b['sort']);\n    }\n    return list;\n}\n","\nexport const webStorage = () => {\n\n    const checkLocalStorage = () => {\n        const mod = 'check_storage';\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    const isAvailable = checkLocalStorage();\n\n    if( isAvailable ){\n        // setObject METHOD FOR HTML STORAGE -> EG: localStorage.setObject( name, JSobj )\n        // TO STORE A JS OBJECT ( AS JSON STRING ) INSIDE THE STORAGE\n        Storage.prototype.setObject = function( key, value ) {\n            this.setItem( key, JSON.stringify(value) );\n        }\n\n        // getObject METHOD FOR HTML STORAGE -> EG: localStorage.getObject( name )\n        // RETURN THE DATA ( STORED AS JSON STRING ) AS JS OBJECT\n        Storage.prototype.getObject = function( key ) {\n            const value = this.getItem( key );\n            return value && JSON.parse( value );\n        }\n    }\n\n    return {\n        isAvailable: isAvailable\n    }\n\n}\n","\nexport const getQuestionObject = ( data, questionId ) => {\n\n    const questions = data.questions,\n          qLength = questions.length;\n\n    let obj = {};\n    \n    for(let q=0; q<qLength; q++){\n        const question = questions[q];\n        if( question.id == questionId ){\n            obj = question;\n            break;\n        }\n    }\n\n    return obj;\n\n}","\nimport { fieldsStringSelectorSurvey, isEmptyObject, mergeObjects } from './helpers';\nimport { getQuestionObject } from './utils/getQuestionObject';\n\nexport const defaultCallbacksInOptions = {\n    formOptions: {\n\n        beforeSend: function beforeSend_surveyDefault( data ){\n            let isHacking = false;\n            const instance = this;\n            const surveyContEl = instance.formEl.closest('[data-surveyjs-container]');\n            const fieldsList = Array.from( surveyContEl.querySelectorAll(fieldsStringSelectorSurvey) );\n\n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                \n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                const questionEl = fieldEl.closest('[data-question-id]');\n                const questionId = questionEl ? questionEl.getAttribute('data-question-id') : '';\n                const questionObj = getQuestionObject( instance.data, questionId );\n\n                // BASED ON SURVEY JSON FILE, FORCE REQUIRED FIELDS TO BE VALIDATED\n                // THIS AVOIDS USERS TO HACK THE SURVEY, FOR EXAMPLE REMOVING required ATTRIBUTE FROM THE HTML\n                if( questionId !== '' && questionObj && !!questionObj.required ){\n\n                    const isRequiredFrom = fieldEl.matches('[data-required-from]');\n                    const reqMoreEl = document.querySelector(fieldEl.getAttribute('data-required-from'));\n                    if( !isRequiredFrom || ( isRequiredFrom && reqMoreEl.checked ) ){\n                        if( !fieldEl.required ){\n                            // FIELD IS NOT REQUIRED BUT IT SHOULD => USER HACKED FIELD\n                            isHacking = true;\n                        }\n                        fieldEl.required = true;\n                    }\n                    \n                }\n\n            });\n\n            if( isHacking ){\n                // USER IS HACKING FORM ( REMOVING ATTRIBUTE required FROM A FIELD )\n                // => FORCE VALIDATION TO SHOW ERROR AND STOP SUBMIT\n                const fieldOptions = mergeObjects({}, instance.options.fieldOptions, {focusOnRelated: false});\n                return instance.validateForm( fieldOptions )\n                    .then(formRes => {\n                        data.stopExecution = true;\n                        return data;\n                    });\n            }\n            return data;\n        },\n\n        getFormData: function getFormData_surveyDefault(){\n            const formEl = this.formEl;\n            const instance = formEl.formjs;\n            const fieldsList = Array.from( formEl.closest('[data-surveyjs-container]').querySelectorAll(fieldsStringSelectorSurvey) );\n            const obj = {\n                    answers: [],\n                    id: instance.data.id\n                };\n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                // EACH QUESTION HAS ITS OWN OBJECT ( qaObj ) THAT CONTAINS THE RELATED DATA:\n                // question:    THE QUESTION ID ( undefined FOR QUESTIONS WITH ATTRIBUTE data-required-form - will be skipped later )\n                // answer       AN OBJECT THAT CONTAINS THE FOLLOWS:\n                //                  value:      THE ANSWER VALUE\n                //                  related:    IF THE ANSWER IS REQUIRED FROM ANOTHER ANSWER (SEE BELOW)\n                const questionEl = fieldEl.closest('[data-question-id]'),\n                      questionId = questionEl ? questionEl.getAttribute('data-question-id') : '',\n                      qaObj = {\n                        question: questionId,\n                        answer: {\n                            value: fieldEl.value || ''\n                        }\n                    };\n\n                // A FIELD WITH ATTRIBUTE 'data-required-from' IS MANAGED TOGETHER WITH ITS RELATED FIELD ( WHICH HAS ATTRIBUTE 'data-require-more' )\n                // IF QUESTION ID IS EMPTY -> SKIP THE FIELD ( USEFUL FOR FORM FIELDS OUTSIDE THE SURVEY BODY )\n                if(\n                    fieldEl.matches('[data-required-from]') || \n                    questionId === '' || \n                    isEmptyObject( getQuestionObject(instance.data, questionId) )\n                ){ return; }\n\n                if( type === 'radio' ){\n                    const containerEl = fieldEl.closest('form') ? formEl : fieldEl.closest(instance.options.fieldOptions.questionContainer);\n                    const checkedEl = containerEl.querySelector('[name=\"'+ name +'\"]:checked');\n\n                    qaObj.answer.value = (checkedEl && checkedEl.value) || '';\n\n                    // FOR RADIO THAT REQUIRE THE USER TO GIVE ONE MORE ANSWER\n                    if( checkedEl && checkedEl.matches('[data-require-more]') ){\n                        qaObj.answer.related = formEl.querySelector('[data-required-from=\"#'+ checkedEl.id +'\"]').value;\n                    }\n                }\n\n                if( type === 'checkbox' && fieldEl.matches('[data-checks]') ){\n                    qaObj.answer.value = [];\n                    Array.from(formEl.querySelectorAll('[name=\"'+ name +'\"]:checked')).forEach(el => {\n                        qaObj.answer.value.push( el.value );\n                    });\n                }\n                \n                obj.answers.push( qaObj );\n            });\n        \n            return obj;\n        }\n    \n    }\n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n    cssClasses: {\n        checkbox:           'form-check-input',\n        default:            'form-control',\n        file:               'form-control-file',\n        label:              'form-check-label',\n        radio:              'form-check-input',\n        wrapper: {\n            checkbox:       'form-check',\n            default:        '',\n            radio:          'form-check'\n        }\n    },\n    fieldErrorFeedback:     true,\n    formOptions: {\n        beforeSend:         [defaultCallbacksInOptions.formOptions.beforeSend],\n        getFormData:        defaultCallbacksInOptions.formOptions.getFormData\n    },\n    initAjaxOptions:        {\n        cache:              'no-store',\n        credentials:        'same-origin',\n        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept':       'application/json'\n        },\n        method:             'GET',\n        mode:               'same-origin',\n        redirect:           'follow',\n        timeout:            0\n    },\n    lang:                   'en',\n    templates: {\n        fieldError: '<div class=\"surveyjs-field-error-message\">{{fieldErrorMessage}}</div>',\n\n        input:      '<input {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-input surveyjs-{{answerType}} {{fieldClasses}}\" />',\n\n        label:      '<label for=\"{{answerCode}}\" class=\"surveyjs-label {{labelClasses}}\">{{labelString}}</label>',\n\n        question:   '<div data-question-id=\"{{questionId}}\" data-formjs-question class=\"surveyjs-question-box clearfix\">'+\n                        '<div class=\"surveyjs-question-header\">Question {{questionNumber}}</div>'+\n                        '<div class=\"surveyjs-question-body\">'+\n                            '<div class=\"surveyjs-question-text\">{{questionText}}</div>'+\n                            '<div class=\"surveyjs-answers-box form-group clearfix\">'+\n                                '{{answersHTML}}'+\n                                '{{fieldErrorTemplate}}'+\n                            '</div>'+\n                        '</div>'+\n                    '</div>',\n        \n        select:     '<select {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-select {{fieldClasses}}\">'+\n                        '{{optionsHtml}}'+\n                    '</select>',\n\n        textarea:   '<textarea {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}\" class=\"surveyjs-textarea {{fieldClasses}}\"></textarea>',\n\n        wrapper: {\n            default:    '<div class=\"surveyjs-single-answer surveyjs-field-container surveyjs-answer-{{answerType}} {{wrapperClasses}}\">'+\n                            '{{fieldTemplate}}'+\n                            '{{labelTemplate}}'+\n                        '</div>',\n\n            nested:     '<div class=\"surveyjs-nested-parent surveyjs-single-answer surveyjs-field-container surveyjs-answer-{{answerType}}\">'+\n                            '{{labelTemplate}}'+\n                            '<div class=\"surveyjs-nested-container surveyjs-field-indent\">'+\n                                '{{nestedFieldsHTML}}'+\n                            '</div>'+\n                        '</div>',\n                    \n            related:    '<div class=\"surveyjs-single-answer surveyjs-field-container input-group {{wrapperClasses}}\">'+\n                            '<div class=\"input-group-prepend\">'+\n                                '<div class=\"input-group-text form-check surveyjs-answer-radio\">'+\n                                    '{{fieldTemplate}}'+\n                                    '{{labelTemplate}}'+\n                                '</div>'+\n                            '</div>'+\n                            '{{relatedFieldHTML}}'+\n                        '</div>'\n        }\n    },\n    useWebStorage:          true\n}\n","\nexport const internals = {\n    storageArray: [],\n    storageName: 'Survey_' + location.href + '_{{surveyFormName}}_surveyId[{{surveyId}}]'\n}\n","\nexport const getAnswerIndexInWebStorage = ( internals, fieldName, multiChoiceValue = '' ) => {\n\n    const wsSurvey = sessionStorage.getObject( internals.storageName );\n            \n    if( wsSurvey ){\n        const wsSurveyLength = wsSurvey.length;\n        \n        for(let ws=0; ws<wsSurveyLength; ws++){\n            const lsItem = wsSurvey[ws];\n\n            if( lsItem.field === fieldName ){\n                if( multiChoiceValue ){\n                    if( lsItem.value !== multiChoiceValue ){\n                        continue;\n                    }\n                }\n                return ws;\n            }\n        }\n    }\n    \n    return -1;\n\n}","\nimport { isEmptyObject, isFieldForChangeEvent } from './helpers';\nimport { getAnswerIndexInWebStorage }           from './utils/getAnswerIndexInWebStorage';\nimport { getQuestionObject }                    from './utils/getQuestionObject';\n\nexport const callbackFns = {\n\n    submit: function( event ){\n        const self = event.target.formjs;\n        event.data.then(() => {\n            if( self.options.useWebStorage ){\n                sessionStorage.removeItem( self.internals.storageName );\n            }\n        });\n    },\n\n    validation: function( event ){\n\n        const eventName = event.type,\n              fieldEl = event.target,\n              self = fieldEl.closest('form').formjs,\n              internals = self.internals,\n              containerEl = fieldEl.closest( self.options.fieldOptions.questionContainer ),\n              fieldValue = fieldEl.value,\n              isMultiChoice = fieldEl.matches('[data-checks]'),\n              isRequireMore = fieldEl.matches('[data-require-more]'),\n              isRequiredFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = isRequiredFrom ? containerEl.querySelector(fieldEl.getAttribute('data-required-from')) : null;\n\n        // VARS USED TO VALIDATE THE FILED IF IT IS REQUIRED\n        const itemEl = isRequiredFrom ? reqMoreEl : fieldEl,\n              questionId = itemEl.id ? itemEl.id.split('-')[2] : 'id-not-found',\n              isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl),\n              questionObj = getQuestionObject(self.data, questionId);\n\n        // IF IT'S NOT A SURVEY QUESTION -> SKIP\n        if( isEmptyObject(questionObj) ){ return true; }\n\n        if(\n            (isFieldForChangeEventBoolean && eventName === 'change') ||\n            (!isFieldForChangeEventBoolean && eventName !== 'change')\n        ){\n            \n            // MANAGE ITEMS IN LOCAL STORAGE ( IF AVAILABLE AND USABLE )\n            if( self.options.useWebStorage && !fieldEl.matches('[data-exclude-storage]') ){\n                const inArrayPos = getAnswerIndexInWebStorage( internals, fieldEl.name, (isMultiChoice ? fieldValue : false) );\n                const inArrayRequireMorePos = getAnswerIndexInWebStorage( internals, fieldEl.name + '-more' );\n\n                let storageArray = internals.storageArray;\n\n                if( !isRequireMore && !isRequiredFrom && inArrayRequireMorePos !== -1 ){\n                    storageArray.splice(inArrayRequireMorePos, 1);\n                }\n\n                if( inArrayPos !== -1 ){\n                    if( isMultiChoice ){\n                        if( !fieldEl.checked && storageArray[inArrayPos].value === fieldValue ){\n                            // REMOVE ITEM FROM LS\n                            storageArray.splice(inArrayPos, 1);\n                        } else {\n                            // ADD ITEM TO LS\n                            storageArray.push( { field: fieldEl.name, value: fieldValue } );\n                        }\n                    } else {\n                        if( fieldValue !== '' ){\n                            storageArray[inArrayPos].value = fieldValue;\n                        } else {\n                            storageArray.splice(inArrayPos, 1); \n                        }\n                    }\n                } else {\n                    if( fieldValue !== '' ){\n                        if( isRequiredFrom && fieldValue !== '' ){\n                            const oldFieldNamePos = getAnswerIndexInWebStorage( internals, reqMoreEl.name );\n                            if( oldFieldNamePos !== -1 ){\n                                storageArray.splice(oldFieldNamePos, 1);\n                            }\n                            storageArray.push( { field: reqMoreEl.name, value: reqMoreEl.value } );\n                        }\n                        storageArray.push( { field: fieldEl.name, value: fieldValue } );\n                        if( isRequireMore ){\n                            const elReqFromEl = fieldEl.closest('form').querySelector( '[data-required-from=\"#' + fieldEl.id + '\"]' );\n                            storageArray.push( { field: elReqFromEl.name, value: elReqFromEl.value } );\n                        }\n                    }\n                }\n\n                sessionStorage.setObject( internals.storageName, storageArray );\n            }\n\n            // BASED ON JSON DATA, FORCE REQUIRED FIELDS TO BE VALIDATED\n            if( typeof questionObj.required !== 'undefined' ){\n                fieldEl.required = true;\n            }\n\n        }\n        \n    }\n\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nimport { sortList } from '../../helpers';\n\nexport const generateOptionTags = ( optionsList = [] ) => {\n\n    return sortList( optionsList ).reduce((optionsHTML, opt) => {\n        return optionsHTML += `<option value=\"${opt.value}\">${opt.label}</option>`;\n    }, '');\n\n}","\nimport { toKebabCase } from '../../helpers';\n\nexport const getAttributesStringHTML = ( answerObj, answerCode, isRequired ) => {\n    const excludedAttrs = ['data', 'id', 'label', 'nested', 'related', 'sort'];\n    \n    if( /^(option|textarea)$/.test(answerObj.type) ){\n        excludedAttrs.push('type');\n    }\n\n    let string = '';\n\n    Object.keys(answerObj)\n        .filter(name => excludedAttrs.indexOf(name) === -1)\n        .forEach(name => {\n            string += ` ${name}=\"${answerObj[name]}\"`;\n        });\n\n    if( answerObj.data ){\n        Object.keys(answerObj.data).forEach(name => {\n            string += ` data-${toKebabCase(name)}=\"${answerObj.data[name]}\"`;\n        });\n    }\n\n    if( isRequired ){\n        string += ' required';\n    }\n\n    if( answerObj.related ){\n        string += ' data-require-more';\n    }\n\n    string += ` id=\"${answerCode}\"`;\n    string += ` data-answer-id=\"${answerObj.id}\"`;\n\n    return string.trim();\n}\n","\nexport const toKebabCase = ( string = '', useAllCaps = false ) => {\n    let newString = string.trim().replace(/(([_ ])([a-z]))|(([a-z])?([A-Z]))/g, (match, p1, p2, p3, p4, p5, p6) => {\n        const concatGroup = p3 ? '-' + p3 : (p5 || '') + '-' + p6;\n        return concatGroup.toLowerCase();\n    } );\n    return useAllCaps ? newString.toUpperCase() : newString;\n}\n","\nimport { mergeObjects, replaceObjectKeysInString, sortList } from '../../helpers';\nimport { generateOptionTags }       from './generateOptionTags';\nimport { getAttributesStringHTML }  from './getAttributesStringHTML';\nimport { getTemplates }             from './getTemplates';\n\nexport const generateAnswers = ( options, answersList, extraData ) => {\n\n    let allAnswersHTML = '';\n    let previousType = '';\n\n    sortList( answersList ).forEach((answer, index) => {\n\n        let answerHTML = '';\n\n        // COLLECT USEFUL DATA\n        // answerType => checkbox, date, email, radio, select, text, textarea, etc...\n        const answerType = answer.type === 'option' ? 'select' : answer.type;\n        \n        if( answerType === 'select' && previousType === answerType ){ return; }\n\n        previousType = answerType;\n\n        if( extraData.question.checks ){\n            answer = mergeObjects({}, answer, {data:{checks:extraData.question.checks}});\n        }\n        \n        const answerCode = `${answerType}-${extraData.surveyId}-${extraData.question.id}-${answerType === 'select' ? (index + 1) : answer.id}`;\n        const answerData = {\n            questionNumber: extraData.question.index + 1,\n            wrapperClasses: options.cssClasses.wrapper[answerType] || options.cssClasses.wrapper.default,\n            fieldAttributes: getAttributesStringHTML( answer, answerCode, extraData.question.isRequired ),\n            fieldClasses: options.cssClasses[answerType] || options.cssClasses.default,\n\n            answerType,\n            answerCode,\n            addMoreName: '',\n\n            labelString: answer.label || '',\n            labelClasses: options.cssClasses.label\n        };\n\n        let relatedFieldHTML = '';\n        if( answer.related ){\n            const relatedType = answer.related.type || 'select';\n            const relatedIsSelect = relatedType === 'select';\n            const relatedObj = relatedIsSelect ? mergeObjects({}, answer) : answer.related;\n\n            relatedObj.type = relatedIsSelect ? 'option' : relatedType;\n            relatedObj.id = `${answer.id}-more`;\n            relatedObj.data = mergeObjects({}, relatedObj.data, {requiredFrom:'#'+answerCode});\n            delete relatedObj.related;\n\n            const answerDataRelated = {\n                fieldAttributes: getAttributesStringHTML(relatedObj, `${answerCode}-more`, false),\n                answerType: relatedType,\n                addMoreName: '-more',\n                fieldClasses: relatedIsSelect ? options.cssClasses.select : (options.cssClasses[relatedType] || options.cssClasses.default)\n            };\n\n            relatedFieldHTML = options.templates[relatedType] || options.templates.input;\n            if( relatedIsSelect ){\n                const optionsHtml = generateOptionTags( answer.related );\n                relatedFieldHTML = relatedFieldHTML.replace('{{optionsHtml}}', optionsHtml);\n            }\n\n            relatedFieldHTML = replaceObjectKeysInString(answerDataRelated, relatedFieldHTML);\n        }\n        \n        // TAKE RIGHT TEMPLATES ( wrapper, field and label ) AND PUT ALL TOGETHER\n        // answerTypeForTemplate => related, input, nested, select, textarea, etc...\n        const answerTypeForTemplate = answer.related ? 'related' : (answer.nested ? 'nested' : answerType);\n        const templates = getTemplates( options.templates, answerTypeForTemplate );\n\n        let nestedFieldsHTML = '';\n        if( answer.nested ){\n            nestedFieldsHTML = generateAnswers( options, answer.nested, extraData );\n        }\n\n        let optionsHtml = '';\n        if( answerType === 'select' ){\n            optionsHtml = generateOptionTags( answersList );\n        }\n\n        answerHTML = templates.wrapper\n                        .replace('{{relatedFieldHTML}}', relatedFieldHTML)\n                        .replace('{{fieldTemplate}}', templates.field)\n                        .replace('{{optionsHtml}}', optionsHtml)\n                        .replace('{{labelTemplate}}', templates.label)\n                        .replace('{{nestedFieldsHTML}}', nestedFieldsHTML);\n        allAnswersHTML += replaceObjectKeysInString(answerData, answerHTML);\n\n    });\n\n    return allAnswersHTML;\n\n}\n","\nexport const getTemplates = ( templates, answerType ) => {\n    return {\n        field: templates[answerType] || templates.input,\n        label: /^(checkbox|nested|radio|related)$/.test(answerType) ? templates.label : '',\n        wrapper: templates.wrapper[answerType] || templates.wrapper.default\n    }\n}\n","\nimport { generateQAcode }       from './generateQAcode';\nimport { populateAnswers }      from './populateAnswers';\n\nexport const buildSurvey = ( formEl, options, internals, data ) => {\n    \n    const formName = formEl.getAttribute('name') || '';\n    \n    // REPLACE SURVEY ID AND FORM NAME IN WEB STORAGE NAME\n    internals.storageName = internals.storageName.replace( /{{surveyId}}/, data.id );\n    internals.storageName = internals.storageName.replace( /{{surveyFormName}}/, formName );\n    \n    const qaHtmlAll = generateQAcode( formEl, options, data );\n    formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforeend', qaHtmlAll );\n\n    // FILL ANSWERS WITH LOCAL STORAGE ( IF AVAILABLE )\n    if( options.useWebStorage ){\n        populateAnswers( formEl, internals );\n    }\n\n}\n","\nimport { replaceObjectKeysInString, sortList } from '../helpers';\nimport { generateAnswers } from './generateQAcodeUtils/generateAnswers';\n\nexport const generateQAcode = ( formEl, options, surveyData ) => {\n\n    const questionsList = sortList( surveyData.questions );\n    const qaDataLength = questionsList.length;\n    \n    let qaCodeAll = '';\n    \n    for(let i=0; i<qaDataLength; i++){\n        const questionObj = questionsList[i];\n\n        let qaHtml = options.templates.question;\n        const questionId = questionObj.id;\n        const questionNumber = i + 1;\n        const extraData = {\n            surveyId: surveyData.id,\n            question: {\n                id: questionId,\n                index: i,\n                isRequired: !!questionObj.required\n            }\n        };\n\n        if( questionObj.checks ){\n            extraData.question.checks = questionObj.checks;\n        }\n        \n        let answersHTML = generateAnswers( options, questionObj.answers, extraData );\n\n        // MANAGE EXTERNAL QUESTION\n        if( questionObj.external ){\n            const externalCont = formEl.closest('[data-surveyjs-container]').querySelector('[data-surveyjs-external]');\n            externalCont.setAttribute('data-question-id', questionId);\n\n            questionObj.answers.forEach((answer, index) => {\n                const bindAnswerEl = externalCont.querySelectorAll('[data-field]')[index];\n                const fieldProps = {\n                        id: `${answer.type}-${extraData.surveyId}-${questionId}-${answer.id}`,\n                        name: `${bindAnswerEl.name}${questionNumber}`,\n                        type: answer.type,\n                        value: answer.value,\n                        required: !!questionObj.required\n                    };\n                \n                Object.keys(fieldProps).forEach(name => {\n                    bindAnswerEl[name] = fieldProps[name];\n                });\n\n                bindAnswerEl.setAttribute('data-answer-id', answer.id);\n\n                const answerCont = bindAnswerEl.closest('[data-answer]');\n                answerCont.querySelector('label').setAttribute('for', fieldProps.id);\n                answerCont.querySelector('[data-label]').innerHTML = answer.label;\n                externalCont.querySelector('[data-question]').innerHTML = questionObj.question;\n            });\n\n            continue;\n        }\n\n        const maxChoice = questionObj.checks ? JSON.parse(questionObj.checks) : '';\n        const checksMin = maxChoice[0] || '';\n        const checksMax = maxChoice[1] || '';\n        const maxChoiceText = maxChoice && options.maxChoice ? ' ('+ checksMax +' '+ options.maxChoice +')' : '';\n\n        const questionData = {\n            questionId,\n            questionNumber,\n            questionText: questionObj.question + maxChoiceText,\n            answersHTML,\n            fieldErrorTemplate: options.fieldErrorFeedback ? options.templates.fieldError : ''\n        };\n        qaHtml = replaceObjectKeysInString(questionData, qaHtml);\n\n        if( options.fieldErrorFeedback && options.templates.fieldError.indexOf('{{fieldErrorMessage}}') !== -1 ){\n            const fieldErrorMessage = maxChoice !== '' ? options.fieldErrorMessageMultiChoice : (questionObj.errorMessage || options.fieldErrorMessage);\n            qaHtml = qaHtml.replace( /{{fieldErrorMessage}}/g, fieldErrorMessage );\n        }\n\n        qaCodeAll += replaceObjectKeysInString({checksMin, checksMax}, qaHtml);\n    }\n    \n    return qaCodeAll;\n\n}\n","\nexport const populateAnswers = ( formEl, internals ) => {\n\n    const WS = sessionStorage.getObject( internals.storageName );\n    if( WS ){\n        const surveyContEl = formEl.closest('[data-surveyjs-container]');\n        internals.storageArray = WS;\n        WS.forEach(item => {\n            const fieldFirst = surveyContEl.querySelector( '[name=\"' + item.field + '\"]' ),\n                  isRadioOrCheckbox = fieldFirst.matches('[type=\"radio\"], [type=\"checkbox\"]'),\n                  fieldEl = ( isRadioOrCheckbox ? surveyContEl.querySelector('[name=\"' + item.field + '\"][value=\"' + item.value + '\"]') : fieldFirst );\n            \n            if( isRadioOrCheckbox ){\n                fieldEl.checked = true;\n            } else {\n                fieldEl.value = item.value;\n            }\n        });\n    }\n\n}\n","\nimport { ajaxCall, customEvents, deepFreeze, dispatchCustomEvent, mergeObjects, webStorage } from './modules/helpers';\nimport { messages }     from './modules/messages';\nimport { options }      from './modules/options';\nimport { internals }    from './modules/internals';\nimport { callbackFns }  from './modules/listenerCallbacks';\nimport { buildSurvey }  from './modules/buildSurvey/buildSurvey';\nimport { destroy }      from './modules/destroy';\n\nimport Form from 'formjs-plugin';\n\nimport './index.scss';\n\nconst version = '3.0.0';\n\nclass Survey extends Form {\n\n    constructor( formEl, optionsObj = {} ){\n        if( !optionsObj.url || typeof optionsObj.url !== 'string' ){\n            throw new Error('\"options.url\" is missing or not a string!');\n        }\n\n        // SET THE lang VALUE IN options ( MANDATORY FOR OTHER OPERATIONS )\n        const customLang = typeof optionsObj.lang === 'string' && optionsObj.lang.toLowerCase();\n        const langValue = customLang && Survey.prototype.messages[customLang] ? customLang : Survey.prototype.options.lang;\n        \n        // MERGE OPTIONS AND messages OF THE CHOSEN lang INSIDE options\n        const options = mergeObjects( {}, Survey.prototype.options, Survey.prototype.messages[langValue], optionsObj );\n\n        if( !webStorage().isAvailable ){\n            options.useWebStorage = false;\n        }\n\n        // CREATE FORM INSTANCE FOR SURVEY\n        super( formEl, options );\n        const self = this;\n        self.internals = internals;\n        self.options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n            const useCapturing = eventName === 'blur' ? true : false;\n            self.formEl.addEventListener(eventName, callbackFns.validation, useCapturing);\n        });\n        self.formEl.addEventListener('fjs.form:submit', callbackFns.submit);\n\n        // CREATE SURVEY\n        self.formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforebegin', self.options.loadingBox );\n        const retrieveSurvey = ajaxCall(self.options.url, self.options.initAjaxOptions)\n            .then(response => {\n                if( response.status.toLowerCase() !== 'success' ){\n                    return Promise.reject(response);\n                }\n                return new Promise(resolve => {\n                    if( response.data.questions && response.data.questions.length > 0 ){\n                        buildSurvey(self.formEl, self.options, self.internals, response.data);\n                        super.init().then(() => {\n                            self.isInitialized = true;\n                            self.data = response.data;\n                            deepFreeze(self.data);\n                            self.formEl.closest('[data-surveyjs-container]').classList.add('surveyjs-init-success');\n                            resolve(response);\n                        });\n                    } else {\n                        resolve(response);\n                    }\n                });\n            })\n            .finally(() => {\n                const loadingBoxEl = self.formEl.querySelector('[data-surveyjs-loading]');\n                if( loadingBoxEl ){\n                    loadingBoxEl.parentNode.removeChild(loadingBoxEl);\n                }\n            });\n        \n        dispatchCustomEvent( self.formEl, customEvents.init, retrieveSurvey );\n    }\n\n    destroy(){\n        destroy(this.formEl);\n        super.destroy();\n    }\n    \n    static addLanguage( langString, langObject ){\n        const langValue = langString.toLowerCase();\n        Survey.prototype.messages[langValue] = mergeObjects({}, Survey.prototype.messages[langValue], langObject);\n    }\n\n    static setOptions( optionsObj ){\n        Survey.prototype.options = mergeObjects({}, Survey.prototype.options, optionsObj);\n    }\n\n}\n\nSurvey.prototype.isInitialized = false;\nSurvey.prototype.messages = messages;\nSurvey.prototype.options = options;\nSurvey.prototype.version = version;\n\nexport default Survey;\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nimport { callbackFns } from './listenerCallbacks';\n\nexport const destroy = formEl => {\n\n    formEl.formjs.options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.removeEventListener(eventName, callbackFns.validation, useCapturing);\n    });\n    formEl.removeEventListener('fjs.form:submit', callbackFns.submit);\n    \n}\n","\nexport const messages = {\n    it: {\n        loadingBox:         '<div class=\"surveyjs-loading\" data-surveyjs-loading><i class=\"glyphicon glyphicon-refresh icon-spin\"></i> Caricamento in corso...</div>',\n        maxChoice:          'RISPOSTE MAX',\n        fieldErrorMessage:  '&Egrave; necessario rispondere.',\n        fieldErrorMessageMultiChoice:  'Devi scegliere da {{checksMin}} a {{checksMax}} risposte.'\n    },\n    en: {\n        loadingBox:         '<div class=\"surveyjs-loading\" data-surveyjs-loading><i class=\"glyphicon glyphicon-refresh icon-spin\"></i> Loading...</div>',\n        maxChoice:          'ANSWERS MAX',\n        fieldErrorMessage:  'Answer is necessary.',\n        fieldErrorMessageMultiChoice:  'You must choose from {{checksMin}} to {{checksMax}} answers.'\n    }\n}\n"],"names":["customEvents","deepFreeze","obj","Object","getOwnPropertyNames","forEach","name","prop","freeze","isPlainObject","object","prototype","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","fieldsStringSelectorSurvey","isEmptyObject","length","replaceObjectKeysInString","stringHTML","reduce","accString","regexStr","RegExp","replace","sortList","list","sort","a","b","webStorage","isAvailable","mod","localStorage","setItem","removeItem","e","checkLocalStorage","Storage","setObject","value","this","JSON","stringify","getObject","getItem","parse","getQuestionObject","data","questionId","questions","qLength","q","question","id","defaultCallbacksInOptions","formOptions","beforeSend","isHacking","instance","surveyContEl","formEl","closest","fieldsList","querySelectorAll","fieldNameCheck","fieldTypeCheck","fieldEl","type","matches","questionEl","getAttribute","questionObj","required","isRequiredFrom","reqMoreEl","document","querySelector","checked","fieldOptions","options","focusOnRelated","validateForm","then","formRes","stopExecution","getFormData","formjs","answers","qaObj","answer","checkedEl","questionContainer","related","el","cssClasses","checkbox","default","file","label","radio","wrapper","fieldErrorFeedback","initAjaxOptions","cache","credentials","headers","Content-Type","Accept","method","mode","redirect","timeout","lang","templates","fieldError","input","select","textarea","nested","useWebStorage","internals","storageArray","storageName","location","href","getAnswerIndexInWebStorage","fieldName","multiChoiceValue","wsSurvey","sessionStorage","wsSurveyLength","ws","lsItem","field","callbackFns","event","self","target","eventName","containerEl","fieldValue","isMultiChoice","isRequireMore","itemEl","split","isFieldForChangeEventBoolean","isFieldForChangeEvent","inArrayPos","inArrayRequireMorePos","splice","oldFieldNamePos","elReqFromEl","generateOptionTags","optionsList","optionsHTML","opt","getAttributesStringHTML","answerObj","answerCode","isRequired","excludedAttrs","test","string","indexOf","useAllCaps","newString","trim","match","p1","p2","p3","p4","p5","p6","toLowerCase","toUpperCase","toKebabCase","generateAnswers","answersList","extraData","allAnswersHTML","previousType","index","answerHTML","answerType","checks","surveyId","answerData","questionNumber","wrapperClasses","fieldAttributes","fieldClasses","addMoreName","labelString","labelClasses","relatedFieldHTML","relatedType","relatedIsSelect","relatedObj","requiredFrom","answerDataRelated","optionsHtml","answerTypeForTemplate","getTemplates","nestedFieldsHTML","buildSurvey","formName","qaHtmlAll","surveyData","questionsList","qaDataLength","qaCodeAll","i","qaHtml","answersHTML","external","externalCont","setAttribute","bindAnswerEl","fieldProps","answerCont","innerHTML","maxChoice","checksMin","checksMax","maxChoiceText","questionData","questionText","fieldErrorTemplate","fieldErrorMessage","fieldErrorMessageMultiChoice","errorMessage","generateQAcode","insertAdjacentHTML","WS","item","fieldFirst","isRadioOrCheckbox","populateAnswers","Survey","Form","[object Object]","optionsObj","url","Error","customLang","langValue","messages","super","validateOnEvents","useCapturing","addEventListener","loadingBox","retrieveSurvey","timeoutTimer","Headers","controller","AbortController","signal","window","setTimeout","abort","fetch","response","ok","json","Promise","reject","catch","error","finally","clearTimeout","ajaxCall","status","resolve","init","isInitialized","classList","add","loadingBoxEl","parentNode","removeChild","elem","eventOptions","bubbles","eventObj","Event","dispatchEvent","dispatchCustomEvent","removeEventListener","destroy","langString","langObject","it","en","version"],"mappings":"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"}