{"version":3,"file":"surveyjs-systemjs.min.js","sources":["../src/modules/version.js","../src/modules/helpers/ajaxCall.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/deepFreeze.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/getQuestionId.js","../src/modules/helpers/isEmptyObject.js","../src/modules/helpers/replaceObjectKeysInString.js","../src/modules/helpers/sortList.js","../src/modules/helpers/webStorage.js","../src/modules/utils/getQuestionObject.js","../src/modules/options.js","../src/modules/optionsUtils.js","../src/modules/helpers/fieldsStringSelectorSurvey.js","../src/modules/internals.js","../src/modules/listenerCallbacks/submit.js","../src/modules/utils/getAnswerIndex.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/helpers/arrayMove.js","../src/modules/buildSurvey/generateQAcodeUtils/generateOptionTags.js","../src/modules/buildSurvey/generateQAcodeUtils/getAttributesStringHTML.js","../src/modules/helpers/toKebabCase.js","../src/modules/buildSurvey/generateQAcodeUtils/generateAnswers.js","../src/modules/buildSurvey/generateQAcodeUtils/getTemplates.js","../src/modules/buildSurvey/generateQAcode.js","../src/modules/buildSurvey/buildSurvey.js","../src/modules/buildSurvey/populateAnswers.js","../src/index.js","../src/modules/destroy.js"],"sourcesContent":["\nexport const version = '3.0.2';\n","\nexport const ajaxCall = ( url = location.href, options = {} ) => {\n\n    let timeoutTimer;\n\n    options.headers = new Headers( options.headers );\n\n    /* SET AbortController FOR timeout */\n    if ( options.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        options.signal = signal;\n\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, options.timeout);\n    }\n\n    return fetch( url, options )\n        .then(response => {\n            if( !response.ok ){\n                throw new Error(response.statusText);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            throw new Error(error.message);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n        });\n        \n}\n","\nexport const customEvents = {\n    init: 'sjs:init'\n}\n","\nexport const deepFreeze = obj => {\n\n    Object.getOwnPropertyNames(obj).forEach(name => {\n        const prop = obj[name];\n        if( typeof prop === 'object' && prop !== null ){\n            deepFreeze(prop);\n        }\n    });\n    return Object.freeze(obj);\n    \n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const getQuestionId = fieldEl => {\n    const containerEl = fieldEl.closest('[data-question-id]');\n    return (containerEl && containerEl.getAttribute('data-question-id')) || '';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const isEmptyObject = object => {\n    return isPlainObject(object) && Object.getOwnPropertyNames(object).length === 0;\n}\n","\nexport const replaceObjectKeysInString = (obj, stringHTML) => {\n    return Object.keys(obj).reduce((accString, name) => {\n        const regexStr = new RegExp( '{{' + name + '}}', 'g' );\n        return accString.replace(regexStr, obj[name]);\n    }, stringHTML);\n}\n","\nexport const sortList = ( list ) => {\n    if( list[0]['sort'] ){\n        list.sort((a, b) => a['sort'] > b['sort']);\n    }\n    return list;\n}\n","\nexport const webStorage = () => {\n\n    const checkLocalStorage = () => {\n        const mod = 'check_storage';\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    const isAvailable = checkLocalStorage();\n\n    if( isAvailable ){\n        // setObject METHOD FOR HTML STORAGE -> EG: localStorage.setObject( name, JSobj )\n        // TO STORE A JS OBJECT ( AS JSON STRING ) INSIDE THE STORAGE\n        Storage.prototype.setObject = function( key, value ) {\n            this.setItem( key, JSON.stringify(value) );\n        }\n\n        // getObject METHOD FOR HTML STORAGE -> EG: localStorage.getObject( name )\n        // RETURN THE DATA ( STORED AS JSON STRING ) AS JS OBJECT\n        Storage.prototype.getObject = function( key ) {\n            const value = this.getItem( key );\n            return value && JSON.parse( value );\n        }\n    }\n\n    return {\n        isAvailable: isAvailable\n    }\n\n}\n","\nexport const getQuestionObject = ( questions, questionId ) => {\n\n    const qLength = questions.length;\n\n    let obj = {};\n    \n    for(let q=0; q<qLength; q++){\n        const question = questions[q];\n        if( question.id == questionId ){\n            obj = question;\n            break;\n        }\n    }\n\n    return obj;\n\n}","\nimport { optionsUtils } from './optionsUtils';\n\nexport const options = {\n    cssClasses: {\n        checkbox:           'form-check-input',\n        field:              'form-control',\n        file:               'form-control-file',\n        label:              'form-check-label',\n        radio:              'form-check-input',\n        wrapper: {\n            checkbox:       'form-check',\n            field:          '',\n            radio:          'form-check'\n        }\n    },\n    formOptions: {\n        getFormData:        optionsUtils.formOptions.getFormData\n    },\n    initAjaxOptions: {\n        cache:              'no-store',\n        credentials:        'same-origin',\n        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept':       'application/json'\n        },\n        method:             'GET',\n        mode:               'same-origin',\n        redirect:           'follow',\n        timeout:            0\n    },\n    messages:{\n        maxChoice:          'answers max',\n        error:              'Answer is necessary.',\n        errorMultiChoice:   'You must choose from {{checksMin}} to {{checksMax}} answers.'\n    },\n    showErrorMessage:       true,\n    templates: {\n        error:              '<div class=\"surveyjs-error-message\">{{errorMessage}}</div>',\n        \n        input:              '<input {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-input surveyjs-{{answerType}} {{fieldClasses}}\" />',\n\n        label:              '<label for=\"{{answerCode}}\" class=\"surveyjs-label {{labelClasses}}\">{{labelString}}</label>',\n\n        loading:            '<div class=\"surveyjs-loading\" data-surveyjs-loading>Loading...</div>',\n        \n        select:             '<select {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-select {{fieldClasses}}\">'+\n                                '{{optionsHtml}}'+\n                            '</select>',\n        \n        textarea:           '<textarea {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}\" class=\"surveyjs-textarea {{fieldClasses}}\"></textarea>',\n\n        wrapper: {\n            field:          '<div class=\"surveyjs-field-wrapper surveyjs-{{answerType}}-wrapper {{wrapperClasses}}\">'+\n                                '{{fieldTemplate}}'+\n                                '{{labelTemplate}}'+\n                            '</div>',\n            \n            nested:         '<div class=\"surveyjs-field-wrapper surveyjs-nested-wrapper\">'+\n                                '{{labelTemplate}}'+\n                                '<div class=\"surveyjs-nested-inner\">'+\n                                    '{{nestedFieldsHTML}}'+\n                                '</div>'+\n                            '</div>',\n\n            question:       '<div class=\"surveyjs-question-wrapper\" data-question-id=\"{{questionId}}\" data-formjs-question>'+\n                                '<div class=\"surveyjs-question-text\">{{questionText}}</div>'+\n                                '<div class=\"surveyjs-answers-wrapper\">'+\n                                    '{{answersHTML}}'+\n                                '</div>'+\n                                '<div class=\"surveyjs-errors-wrapper\" data-surveyjs-errors>{{errorTemplates}}</div>'+\n                            '</div>',\n            \n            related:        '<div class=\"surveyjs-field-wrapper surveyjs-related-wrapper input-group\">'+\n                                '<div class=\"input-group-prepend\">'+\n                                    '<div class=\"surveyjs-radio-wrapper input-group-text form-check\">'+\n                                        '{{fieldTemplate}}'+\n                                        '{{labelTemplate}}'+\n                                    '</div>'+\n                                '</div>'+\n                                '{{relatedFieldHTML}}'+\n                            '</div>'\n        }\n    },\n    useWebStorage:          true\n}\n","\nimport { fieldsStringSelectorSurvey, getQuestionId, isEmptyObject } from './helpers';\nimport { getQuestionObject } from './utils/getQuestionObject';\n\nexport const optionsUtils = {\n    formOptions: {\n\n        getFormData: function getFormData_surveyDefault(){\n            const instance = this;\n            const formEl = instance.formEl;\n            const fieldsList = Array.from( formEl.closest('[data-surveyjs-wrapper]').querySelectorAll(fieldsStringSelectorSurvey) );\n            const obj = {\n                    answers: [],\n                    id: instance.data.id\n                };\n            \n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                // EACH QUESTION HAS ITS OWN OBJECT ( qaObj ) THAT CONTAINS THE RELATED DATA:\n                // question:    THE QUESTION ID ( undefined FOR QUESTIONS WITH ATTRIBUTE data-required-form - will be skipped later )\n                // answer       AN OBJECT THAT CONTAINS THE FOLLOWS:\n                //                  value:      THE ANSWER VALUE\n                //                  related:    IF THE ANSWER IS REQUIRED FROM ANOTHER ANSWER (SEE BELOW)\n                const questionId = getQuestionId(fieldEl),\n                      qaObj = {\n                        question: questionId,\n                        answer: {\n                            value: fieldEl.value || ''\n                        }\n                    };\n\n                // A FIELD WITH ATTRIBUTE 'data-required-from' IS MANAGED TOGETHER WITH ITS RELATED FIELD ( WHICH HAS ATTRIBUTE 'data-require-more' )\n                // IF QUESTION ID IS EMPTY -> SKIP THE FIELD ( USEFUL FOR FORM FIELDS OUTSIDE THE SURVEY BODY )\n                if(\n                    fieldEl.matches('[data-required-from]') || \n                    questionId === '' || \n                    isEmptyObject( getQuestionObject(instance.data.questions, questionId) )\n                ){ return; }\n\n                if( type === 'radio' ){\n                    const containerEl = fieldEl.closest('form') ? formEl : fieldEl.closest(instance.options.fieldOptions.questionContainer);\n                    const checkedEl = containerEl.querySelector('[name=\"'+ name +'\"]:checked');\n\n                    qaObj.answer.value = (checkedEl && checkedEl.value) || '';\n\n                    // FOR RADIO THAT REQUIRE THE USER TO GIVE ONE MORE ANSWER\n                    if( checkedEl && checkedEl.matches('[data-require-more]') ){\n                        qaObj.answer.related = formEl.querySelector('[data-required-from=\"#'+ checkedEl.id +'\"]').value;\n                    }\n                }\n\n                if( type === 'checkbox' && fieldEl.matches('[data-checks]') ){\n                    qaObj.answer.value = [];\n                    Array.from(formEl.querySelectorAll('[name=\"'+ name +'\"]:checked')).forEach(el => {\n                        qaObj.answer.value.push( el.value );\n                    });\n                }\n                \n                obj.answers.push( qaObj );\n            });\n        \n            return obj;\n        }\n    \n    }\n}\n","\nexport const fieldsStringSelectorSurvey = '[data-surveyjs-form] input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]), [data-surveyjs-form] select, [data-surveyjs-form] textarea, [data-surveyjs-external] [data-field]'\n","\nexport const internals = {\n    storageName: 'Survey_' + location.href + '_{{surveyFormName}}_surveyId[{{surveyId}}]'\n}\n","\nexport function submit( event ){\n    const self = event.target.formjs;\n    event.data.then(() => {\n        if( self.options.useWebStorage ){\n            sessionStorage.removeItem( self.internals.storageName );\n        }\n    });\n}\n","\nexport const getAnswerIndex = ( list, fieldName, multiChoiceValue = '' ) => {\n\n    const listLength = list.length;\n\n    for(let item = 0; item < listLength; item++){\n        const lsItem = list[item];\n        if( lsItem.name === fieldName ){\n            if( multiChoiceValue ){\n                if( lsItem.value !== multiChoiceValue ){\n                    continue;\n                }\n            }\n            return item;\n        }\n    }\n    \n    return -1;\n\n}","\nimport { arrayMove, getQuestionId, isEmptyObject }  from '../helpers';\nimport { getQuestionObject }                        from '../utils/getQuestionObject';\nimport { getAnswerIndex }                           from '../utils/getAnswerIndex';\n\nexport function validationEnd( event ){\n    const fieldEl = event.data.fieldEl;\n    const errors = event.data.errors;\n    const instance = fieldEl.closest('form').formjs;\n    const options = instance.options;\n    const errorsWrapper = fieldEl.closest( options.fieldOptions.questionContainer ).querySelector('[data-surveyjs-errors]');\n    \n    const questionId = getQuestionId(fieldEl);\n    const questionObj = getQuestionObject(instance.data.questions, questionId);\n\n    // IF IT'S NOT A SURVEY QUESTION -> SKIP\n    if( isEmptyObject(questionObj) ){ return true; }\n\n    // MANAGE MULTIPLE ERROR MESSAGES\n    if( errorsWrapper && errors && isPlainObject(questionObj.errorMessage) ){\n        let errorsList = Object.keys(errors);\n        if( errors.rule ){\n            // PUT ERROR \"rule\" AS FIRST, SO THAT A GENERIC ERROR IS SHOWN BEFORE ALL OTHERS\n            const ruleIndex = errorsList.indexOf('rule');\n            errorsList = arrayMove(errorsList, ruleIndex, 0);\n        }\n        const errorsHTML = errorsList.reduce((accHTML, name) => {\n            const errorMessage = questionObj.errorMessage[name] || '';\n            return accHTML += errorMessage ? options.templates.error.replace('{{errorMessage}}', errorMessage) : '';\n        }, '');\n\n        errorsWrapper.innerHTML = errorsHTML;\n    }\n\n    // MANAGE ITEMS IN LOCAL STORAGE ( IF AVAILABLE AND ACTIVE )\n    if( !event.data.isCheckingForm && options.useWebStorage && !fieldEl.matches('[data-exclude-storage]') ){\n        const storageName = instance.internals.storageName;\n        let storageArray = sessionStorage.getObject( storageName ) || [];\n\n        const name = fieldEl.name;\n        const value = fieldEl.value;\n        const isRequiredFrom = fieldEl.matches('[data-required-from]');\n        const isMultiChoice = fieldEl.matches('[data-checks]');\n        const isRequireMore = fieldEl.matches('[data-require-more]');\n        const reqMoreEl = isRequiredFrom ? document.querySelector(fieldEl.getAttribute('data-required-from')) : null;\n\n        const inArrayRequireMorePos = getAnswerIndex( storageArray, name + '-more' );            \n        if( !isRequireMore && !isRequiredFrom && inArrayRequireMorePos >= 0 ){\n            // WHEN CHECKING A RADIO WITHOUT RELATED ANSWER ( IN A LIST OF RADIOS WITH ONE REQ-MORE ) => REMOVE RELATED ANSWER FROM STORAGE\n            storageArray.splice(inArrayRequireMorePos, 1);\n        }\n\n        const inArrayPos = getAnswerIndex( storageArray, name, (isMultiChoice ? value : false) );\n        if( inArrayPos >= 0 ){\n            // REMOVE ITEM FROM LS\n            storageArray.splice(inArrayPos, 1);\n            if( (isMultiChoice && fieldEl.checked) || (!isMultiChoice && value !== '') ){\n                // ADD ITEM TO LS\n                storageArray.push( { name, value } );\n            }\n        } else if( value !== '' ){\n            if( isRequiredFrom ){\n                const reqMorePos = getAnswerIndex( storageArray, reqMoreEl.name );\n                if( reqMorePos >= 0 ){\n                    storageArray.splice(reqMorePos, 1);\n                }\n                storageArray.push( { name: reqMoreEl.name, value: reqMoreEl.value } );\n            }\n            storageArray.push( { name, value } );\n        }\n\n        sessionStorage.setObject( storageName, storageArray );\n    }\n\n    // BASED ON JSON DATA, FORCE REQUIRED FIELDS TO BE VALIDATED\n    if( questionObj.required && !fieldEl.required && !fieldEl.matches('[data-required-from]') ){\n        fieldEl.required = true;\n        instance.validateField(fieldEl);\n    }\n}\n","\nexport const arrayMove = (array, from, to) => {\n    array.splice(to, 0, array.splice(from, 1)[0]);\n    return array;\n}\n","\nimport { sortList } from '../../helpers';\n\nexport const generateOptionTags = ( optionsList = [] ) => {\n\n    return sortList( optionsList ).reduce((optionsHTML, opt) => {\n        return optionsHTML += `<option value=\"${opt.value}\">${opt.label}</option>`;\n    }, '');\n\n}","\nimport { toKebabCase } from '../../helpers';\n\nexport const getAttributesStringHTML = ( answerObj, answerCode, isRequired ) => {\n    const excludedAttrs = ['data', 'id', 'label', 'nested', 'related', 'sort'];\n    \n    if( /^(option|textarea)$/.test(answerObj.type) ){\n        excludedAttrs.push('type', 'value');\n    }\n\n    let string = '';\n\n    Object.keys(answerObj)\n        .filter(name => excludedAttrs.indexOf(name) === -1)\n        .forEach(name => {\n            string += ` ${name}=\"${answerObj[name]}\"`;\n        });\n\n    if( answerObj.data ){\n        Object.keys(answerObj.data).forEach(name => {\n            string += ` data-${toKebabCase(name)}=\"${answerObj.data[name]}\"`;\n        });\n    }\n\n    if( isRequired ){\n        string += ' required';\n    }\n\n    if( answerObj.related ){\n        string += ' data-require-more';\n    }\n\n    string += ` id=\"${answerCode}\"`;\n\n    return string.trim();\n}\n","\nexport const toKebabCase = ( string = '', useAllCaps = false ) => {\n    let newString = string.trim().replace(/(([_ ])([a-z]))|(([a-z])?([A-Z]))/g, (match, p1, p2, p3, p4, p5, p6) => {\n        const concatGroup = p3 ? '-' + p3 : (p5 || '') + '-' + p6;\n        return concatGroup.toLowerCase();\n    } );\n    return useAllCaps ? newString.toUpperCase() : newString;\n}\n","\nimport { mergeObjects, replaceObjectKeysInString, sortList } from '../../helpers';\nimport { generateOptionTags }       from './generateOptionTags';\nimport { getAttributesStringHTML }  from './getAttributesStringHTML';\nimport { getTemplates }             from './getTemplates';\n\nexport const generateAnswers = ( answersList, extraData, options ) => {\n\n    let allAnswersHTML = '';\n    let previousType = '';\n\n    sortList( answersList ).forEach((answer, index) => {\n\n        let answerHTML = '';\n\n        // COLLECT USEFUL DATA\n        // answerType => checkbox, date, email, radio, select, text, textarea, etc...\n        const answerType = answer.type === 'option' ? 'select' : answer.type;\n        \n        if( answerType === 'select' && previousType === answerType ){ return; }\n\n        previousType = answerType;\n\n        if( extraData.question.checks ){\n            answer = mergeObjects({}, answer, {data:{checks:extraData.question.checks}});\n        }\n        \n        const answerCode = `${answerType}-${extraData.surveyId}-${extraData.question.id}-${answerType === 'select' ? (index + 1) : answer.id}`;\n        const answerData = {\n            questionNumber: extraData.question.index + 1,\n            wrapperClasses: options.cssClasses.wrapper[answerType] || options.cssClasses.wrapper.field,\n            fieldAttributes: getAttributesStringHTML( answer, answerCode, extraData.question.isRequired ),\n            fieldClasses: options.cssClasses[answerType] || options.cssClasses.field,\n\n            answerType,\n            answerCode,\n            addMoreName: '',\n\n            labelString: answer.label || '',\n            labelClasses: options.cssClasses.label\n        };\n\n        let relatedFieldHTML = '';\n        if( answer.related ){\n            const relatedType = answer.related.type || 'select';\n            const relatedIsSelect = relatedType === 'select';\n            const relatedObj = relatedIsSelect ? mergeObjects({}, answer) : answer.related;\n\n            relatedObj.type = relatedIsSelect ? 'option' : relatedType;\n            relatedObj.id = '';\n            relatedObj.data = mergeObjects({}, relatedObj.data, {requiredFrom:'#'+answerCode});\n            delete relatedObj.related;\n\n            const answerDataRelated = {\n                fieldAttributes: getAttributesStringHTML(relatedObj, '', false),\n                answerType: relatedType,\n                addMoreName: '-more',\n                fieldClasses: relatedIsSelect ? options.cssClasses.select : (options.cssClasses[relatedType] || options.cssClasses.field)\n            };\n\n            relatedFieldHTML = options.templates[relatedType] || options.templates.input;\n            if( relatedIsSelect ){\n                const optionsHtml = generateOptionTags( answer.related );\n                relatedFieldHTML = relatedFieldHTML.replace('{{optionsHtml}}', optionsHtml);\n            }\n\n            relatedFieldHTML = replaceObjectKeysInString(answerDataRelated, relatedFieldHTML);\n        }\n        \n        // TAKE RIGHT TEMPLATES ( wrapper, field and label ) AND PUT ALL TOGETHER\n        // answerTypeForTemplate => related, input, nested, select, textarea, etc...\n        const answerTypeForTemplate = answer.related ? 'related' : (answer.nested ? 'nested' : answerType);\n        const templates = getTemplates( answerTypeForTemplate, options.templates );\n\n        let nestedFieldsHTML = '';\n        if( answer.nested ){\n            nestedFieldsHTML = generateAnswers( answer.nested, extraData, options );\n        }\n\n        let optionsHtml = '';\n        if( answerType === 'select' ){\n            optionsHtml = generateOptionTags( answersList );\n        }\n\n        answerHTML = templates.wrapper\n                        .replace('{{relatedFieldHTML}}', relatedFieldHTML)\n                        .replace('{{fieldTemplate}}', templates.field)\n                        .replace('{{optionsHtml}}', optionsHtml)\n                        .replace('{{labelTemplate}}', templates.label)\n                        .replace('{{nestedFieldsHTML}}', nestedFieldsHTML);\n        allAnswersHTML += replaceObjectKeysInString(answerData, answerHTML);\n\n    });\n\n    return allAnswersHTML;\n\n}\n","\nexport const getTemplates = ( answerType, templates ) => {\n    return {\n        field: templates[answerType] || templates.input,\n        label: /^(checkbox|nested|radio|related)$/.test(answerType) ? templates.label : '',\n        wrapper: templates.wrapper[answerType] || templates.wrapper.field\n    }\n}\n","\nimport { isPlainObject, replaceObjectKeysInString, sortList } from '../helpers';\nimport { generateAnswers } from './generateQAcodeUtils/generateAnswers';\n\nexport const generateQAcode = ( questions, surveyId, options ) => {\n\n    return sortList( questions ).reduce((accCode, questionObj, index) => {\n        if( questionObj.external ){ return accCode; }\n\n        let questionHTML = options.templates.wrapper.question;\n        const questionId = questionObj.id;\n        const questionNumber = index + 1;\n        const extraData = {\n            surveyId,\n            question: {\n                id: questionId,\n                index,\n                isRequired: !!questionObj.required\n            }\n        };\n\n        if( questionObj.checks ){\n            extraData.question.checks = questionObj.checks;\n        }\n        \n        const answersHTML = generateAnswers( questionObj.answers, extraData, options );\n\n        const maxChoice = questionObj.checks ? JSON.parse(questionObj.checks) : '';\n        const checksMin = maxChoice[0] || '';\n        const checksMax = maxChoice[1] || '';\n        const maxChoiceText = maxChoice && options.messages.maxChoice ? ' ('+ checksMax +' '+ options.messages.maxChoice +')' : '';\n\n        const questionData = {\n            questionId,\n            questionNumber,\n            questionText: questionObj.question + maxChoiceText,\n            answersHTML\n        };\n        questionHTML = replaceObjectKeysInString(questionData, questionHTML);\n\n        if( options.showErrorMessage ){\n            let errorMessage = maxChoice !== '' ? options.messages.errorMultiChoice : (questionObj.errorMessage || options.messages.error);\n\n            // CASE OF MULTIPLE ERROR MESSAGES FROM JSON DATA => DYNAMICALLY MANAGED VIA EVENT LISTENER IN CONSTRUCTOR\n            if( isPlainObject(errorMessage) ){\n                errorMessage = '';\n            }\n\n            questionHTML = questionHTML.replace( /{{errorTemplates}}/g, errorMessage );\n        }\n\n        return accCode += replaceObjectKeysInString({checksMin, checksMax}, questionHTML);\n    }, '');\n\n}\n","\nimport { generateQAcode } from './generateQAcode';\n\nexport const buildSurvey = ( data, formEl, options ) => {\n    \n    const qaHtmlAll = generateQAcode( data.questions, data.id, options );\n    formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforeend', qaHtmlAll );\n\n    // MANAGE EXTERNAL QUESTION\n    const extQuestions = data.questions.filter(obj => obj.external);\n    if( extQuestions.length > 0 ){\n        const surveyWrapperEl = formEl.closest('[data-surveyjs-wrapper]');\n        extQuestions.forEach((question, qIndex) => {\n\n            const externalCont = surveyWrapperEl.querySelector('[data-surveyjs-external=\"'+ (qIndex+1) +'\"]');\n            \n            externalCont.setAttribute('data-question-id', question.id);\n\n            question.answers.forEach((answer, aIndex) => {\n                const externalField = externalCont.querySelectorAll('[data-field]')[aIndex];\n                const fieldProps = {\n                        id: `${answer.type}-${data.id}-${question.id}-${answer.id}`,\n                        type: answer.type,\n                        value: answer.value,\n                        required: !!question.required\n                    };\n                \n                Object.keys(fieldProps).forEach(name => {\n                    externalField[name] = fieldProps[name];\n                });\n\n                const answerCont = externalField.closest('[data-answer]');\n                answerCont.querySelector('label').setAttribute('for', fieldProps.id);\n                answerCont.querySelector('[data-label]').innerHTML = answer.label;\n                externalCont.querySelector('[data-question]').innerHTML = question.question;\n            });\n\n        });\n    }\n\n}\n","\nexport const populateAnswers = ( formEl, internals ) => {\n\n    const WS = sessionStorage.getObject( internals.storageName );\n    if( WS ){\n        const surveyContEl = formEl.closest('[data-surveyjs-wrapper]');\n        WS.forEach(item => {\n            const fieldFirst = surveyContEl.querySelector( '[name=\"' + item.name + '\"]' ),\n                  isRadioOrCheckbox = fieldFirst.matches('[type=\"radio\"], [type=\"checkbox\"]'),\n                  fieldEl = ( isRadioOrCheckbox ? surveyContEl.querySelector('[name=\"' + item.name + '\"][value=\"' + item.value + '\"]') : fieldFirst );\n            \n            if( isRadioOrCheckbox ){\n                fieldEl.checked = true;\n            } else {\n                fieldEl.value = item.value;\n            }\n        });\n    }\n\n}\n","\nimport { version }          from './modules/version';\nimport { ajaxCall, customEvents, deepFreeze, dispatchCustomEvent, mergeObjects, webStorage } from './modules/helpers';\nimport { options }          from './modules/options';\nimport { internals }        from './modules/internals';\nimport { submit, validationEnd } from './modules/listenerCallbacks';\nimport { buildSurvey }      from './modules/buildSurvey/buildSurvey';\nimport { populateAnswers }  from './modules/buildSurvey/populateAnswers';\nimport { destroy }          from './modules/destroy';\n\nimport Form from 'formjs-plugin';\n\nclass Survey extends Form {\n\n    constructor( formEl, optionsObj = {} ){\n        if( !optionsObj.url || typeof optionsObj.url !== 'string' ){\n            throw new Error('\"options.url\" is missing or not a string!');\n        }\n\n        optionsObj = mergeObjects( {}, Survey.prototype.options, optionsObj );\n\n        if( !webStorage().isAvailable ){\n            optionsObj.useWebStorage = false;\n        }\n\n        // CREATE FORM INSTANCE FOR SURVEY\n        super( formEl, optionsObj );\n        const self = this;\n        self.internals = internals;\n        formEl = self.formEl;\n        optionsObj = self.options;\n        const selfInternals = self.internals;\n\n        formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforebegin', optionsObj.templates.loading );\n\n        // CREATE SURVEY\n        const retrieveSurvey = ajaxCall(optionsObj.url, optionsObj.initAjaxOptions)\n            .then(response => {\n                if( response.status.toLowerCase() !== 'success' ){\n                    return Promise.reject(response);\n                }\n                return new Promise(resolve => {\n                    if( response.data.questions && response.data.questions.length > 0 ){\n    \n                        // REPLACE SURVEY ID AND FORM NAME IN WEB STORAGE NAME\n                        selfInternals.storageName = selfInternals.storageName.replace( /{{surveyId}}/, response.data.id );\n                        selfInternals.storageName = selfInternals.storageName.replace( /{{surveyFormName}}/, (formEl.getAttribute('name') || '') );\n\n                        buildSurvey(response.data, formEl, optionsObj);\n                        if( optionsObj.useWebStorage ){\n                            populateAnswers(formEl, selfInternals);\n                        }\n                        Object.defineProperty(self, 'data', {\n                            value: deepFreeze(response.data)\n                        });\n                        formEl.addEventListener('fjs.field:validation', validationEnd);\n                        formEl.addEventListener('fjs.form:submit', submit);\n                        super.init().then(() => {\n                            self.isInitialized = true;\n                            formEl.closest('[data-surveyjs-wrapper]').classList.add('surveyjs-init-success');\n                            resolve(response);\n                        });\n\n                    } else {\n                        resolve(response);\n                    }\n                });\n            })\n            .finally(() => {\n                const loadingBoxEl = formEl.querySelector('[data-surveyjs-loading]');\n                if( loadingBoxEl ){\n                    loadingBoxEl.parentNode.removeChild(loadingBoxEl);\n                }\n            });\n        \n        dispatchCustomEvent( formEl, customEvents.init, retrieveSurvey );\n    }\n\n    destroy(){\n        destroy(this.formEl);\n        super.destroy();\n    }\n\n    static setOptions( optionsObj ){\n        Survey.prototype.options = mergeObjects({}, Survey.prototype.options, optionsObj);\n    }\n\n}\n\nSurvey.prototype.isInitialized = false;\nSurvey.prototype.options = options;\nSurvey.prototype.version = version;\n\nexport default Survey;\n","\nimport { submit, validationEnd } from './listenerCallbacks';\n\nexport const destroy = formEl => {\n\n    formEl.removeEventListener('fjs.field:validation', validationEnd);\n    formEl.removeEventListener('fjs.form:submit', submit);\n    \n}\n"],"names":["ajaxCall","timeoutTimer","url","location","href","options","headers","Headers","timeout","controller","AbortController","signal","window","setTimeout","abort","fetch","then","response","ok","Error","statusText","json","error","message","clearTimeout","customEvents","deepFreeze","obj","Object","getOwnPropertyNames","forEach","name","prop","_typeof","freeze","isPlainObject","object","prototype","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","data","eventOptions","bubbles","eventObj","Event","dispatchEvent","getQuestionId","fieldEl","containerEl","closest","getAttribute","isEmptyObject","length","replaceObjectKeysInString","stringHTML","reduce","accString","regexStr","RegExp","replace","sortList","list","sort","a","b","webStorage","isAvailable","mod","localStorage","setItem","removeItem","e","checkLocalStorage","Storage","setObject","value","JSON","stringify","getObject","this","getItem","parse","getQuestionObject","questions","questionId","qLength","q","question","id","cssClasses","checkbox","field","file","label","radio","wrapper","formOptions","getFormData","instance","formEl","fieldsList","querySelectorAll","answers","fieldNameCheck","fieldTypeCheck","type","matches","qaObj","answer","checkedEl","fieldOptions","questionContainer","querySelector","related","el","initAjaxOptions","cache","credentials","method","mode","redirect","messages","maxChoice","errorMultiChoice","showErrorMessage","templates","input","loading","select","textarea","nested","useWebStorage","internals","storageName","submit","event","self","target","formjs","sessionStorage","getAnswerIndex","fieldName","multiChoiceValue","listLength","item","lsItem","validationEnd","array","to","errors","errorsWrapper","questionObj","errorMessage","errorsList","rule","ruleIndex","indexOf","splice","errorsHTML","accHTML","innerHTML","isCheckingForm","storageArray","isRequiredFrom","isMultiChoice","isRequireMore","reqMoreEl","document","inArrayRequireMorePos","inArrayPos","checked","reqMorePos","required","validateField","generateOptionTags","optionsList","optionsHTML","opt","getAttributesStringHTML","answerObj","answerCode","isRequired","excludedAttrs","test","string","useAllCaps","newString","trim","match","p1","p2","p3","p4","p5","p6","toLowerCase","toUpperCase","toKebabCase","generateAnswers","answersList","extraData","allAnswersHTML","previousType","index","answerHTML","answerType","checks","surveyId","answerData","questionNumber","wrapperClasses","fieldAttributes","fieldClasses","addMoreName","labelString","labelClasses","relatedFieldHTML","relatedType","relatedIsSelect","relatedObj","requiredFrom","answerDataRelated","optionsHtml","getTemplates","nestedFieldsHTML","generateQAcode","accCode","external","questionHTML","answersHTML","checksMin","checksMax","maxChoiceText","questionData","questionText","buildSurvey","qaHtmlAll","insertAdjacentHTML","extQuestions","surveyWrapperEl","qIndex","externalCont","setAttribute","aIndex","externalField","fieldProps","answerCont","populateAnswers","WS","surveyContEl","fieldFirst","isRadioOrCheckbox","Survey","optionsObj","selfInternals","retrieveSurvey","status","Promise","reject","resolve","defineProperty","addEventListener","isInitialized","classList","add","loadingBoxEl","parentNode","removeChild","removeEventListener","Form","version"],"mappings":";mtDACO,ICAMA,EAAW,eAEhBC,EAFkBC,yDAAMC,SAASC,KAAMC,yDAAU,MAIrDA,EAAQC,QAAU,IAAIC,QAASF,EAAQC,SAGlCD,EAAQG,QAAU,EAAI,KACjBC,EAAa,IAAIC,gBACjBC,EAASF,EAAWE,OAE1BN,EAAQM,OAASA,EAEjBV,EAAeW,OAAOC,YAAW,WAC7BJ,EAAWK,UACZT,EAAQG,gBAGRO,MAAOb,EAAKG,GACdW,MAAK,SAAAC,OACGA,EAASC,SACJ,IAAIC,MAAMF,EAASG,mBAEtBH,EAASI,iBAEb,SAAAC,SACG,IAAIH,MAAMG,EAAMC,qBAEjB,WACDtB,GACAW,OAAOY,aAAcvB,OC9BxBwB,EACH,WCDGC,EAAa,SAAbA,EAAaC,UAEtBC,OAAOC,oBAAoBF,GAAKG,SAAQ,SAAAC,OAC9BC,EAAOL,EAAII,GACG,WAAhBE,EAAOD,IAA8B,OAATA,GAC5BN,EAAWM,MAGZJ,OAAOM,OAAOP,ICRZQ,EAAgB,SAAAC,SAC2B,oBAA7CR,OAAOS,UAAUC,SAASC,KAAMH,ICC9BI,EAAe,SAAfA,QAAyBC,yDAAM,UACxCC,MAAMC,KAAKC,WAAWC,MAAM,GAAGC,QAAO,SAAAC,WAASA,KAAKjB,SAAQ,SAAAiB,GACxDnB,OAAOoB,KAAKD,GAAKjB,SAAQ,SAAAmB,GACjBP,MAAMQ,QAAQH,EAAIE,IAClBR,EAAIQ,IAAQR,EAAIQ,IAAQ,IAAIE,OAAQJ,EAAIE,GAAKJ,MAAM,IAC5CV,EAAcY,EAAIE,IACzBR,EAAIQ,GAAOT,EAAcC,EAAIQ,IAAQ,GAAKF,EAAIE,IAG1CP,MAAMQ,QAAQT,EAAIQ,IAElBR,EAAIQ,GAAKG,KAAKL,EAAIE,IAElBR,EAAIQ,GAAOF,EAAIE,SAMxBR,GCnBEY,EAAsB,SAAEC,EAAMC,OAAWC,yDAAO,GAAIC,yDAAe,GAC5EA,EAAejB,EAAa,GAAI,CAAEkB,SAAS,GAAQD,OAC7CE,EAAW,IAAIC,MAAML,EAAWE,GACtCE,EAASH,KAAOA,EAChBF,EAAKO,cAAeF,ICNXG,EAAgB,SAAAC,OACnBC,EAAcD,EAAQE,QAAQ,6BAC5BD,GAAeA,EAAYE,aAAa,qBAAwB,ICA/DC,EAAgB,SAAA/B,UAClBD,EAAcC,IAAyD,IAA9CR,OAAOC,oBAAoBO,GAAQgC,QCH1DC,EAA4B,SAAC1C,EAAK2C,UACpC1C,OAAOoB,KAAKrB,GAAK4C,QAAO,SAACC,EAAWzC,OACjC0C,EAAW,IAAIC,OAAQ,KAAO3C,EAAO,KAAM,YAC1CyC,EAAUG,QAAQF,EAAU9C,EAAII,MACxCuC,ICJMM,EAAW,SAAEC,UAClBA,EAAK,GAAL,MACAA,EAAKC,MAAK,SAACC,EAAGC,UAAMD,EAAC,KAAWC,EAAC,QAE9BH,GCJEI,EAAa,eAahBC,EAXoB,eAChBC,EAAM,2BAERC,aAAaC,QAAQF,EAAKA,GAC1BC,aAAaE,WAAWH,IACjB,EACT,MAAMI,UACG,GAIKC,UAEhBN,IAGAO,QAAQpD,UAAUqD,UAAY,SAAUzC,EAAK0C,QACpCN,QAASpC,EAAK2C,KAAKC,UAAUF,KAKtCF,QAAQpD,UAAUyD,UAAY,SAAU7C,OAC9B0C,EAAQI,KAAKC,QAAS/C,UACrB0C,GAASC,KAAKK,MAAON,KAI7B,CACHT,YAAaA,IC/BRgB,EAAoB,SAAEC,EAAWC,WAEpCC,EAAUF,EAAU/B,OAEtBzC,EAAM,GAEF2E,EAAE,EAAGA,EAAED,EAASC,IAAI,KAClBC,EAAWJ,EAAUG,MACvBC,EAASC,IAAMJ,EAAY,CAC3BzE,EAAM4E,gBAKP5E,GCZEtB,EAAU,CACnBoG,WAAY,CACRC,SAAoB,mBACpBC,MAAoB,eACpBC,KAAoB,oBACpBC,MAAoB,mBACpBC,MAAoB,mBACpBC,QAAS,CACLL,SAAgB,aAChBC,MAAgB,GAChBG,MAAgB,eAGxBE,YAAa,CACTC,YCboB,CACxBD,YAAa,CAETC,YAAa,eACHC,EAAWnB,KACXoB,EAASD,EAASC,OAClBC,EAAa1E,MAAMC,KAAMwE,EAAOlD,QAAQ,2BAA2BoD,iBCT3C,gMDUxB1F,EAAM,CACJ2F,QAAS,GACTd,GAAIU,EAAS1D,KAAKgD,IAGtBe,EAAiB,GACjBC,EAAiB,UAErBJ,EAAWtF,SAAQ,SAAAiC,OACT0D,EAAO1D,EAAQ0D,KACf1F,EAAOgC,EAAQhC,QAIhBA,IAASwF,GAAkBE,IAASD,GAEpCzD,EAAQ2D,QAAQ,0BACjBH,EAAiBxF,EACjByF,EAAiBC,OAQfrB,EAAatC,EAAcC,GAC3B4D,EAAQ,CACNpB,SAAUH,EACVwB,OAAQ,CACJjC,MAAO5B,EAAQ4B,OAAS,SAOhC5B,EAAQ2D,QAAQ,yBACD,KAAftB,IACAjC,EAAe+B,EAAkBgB,EAAS1D,KAAK2C,UAAWC,QAGjD,UAATqB,EAAkB,KAEZI,GADc9D,EAAQE,QAAQ,QAAUkD,EAASpD,EAAQE,QAAQiD,EAAS7G,QAAQyH,aAAaC,oBACvEC,cAAc,UAAWjG,EAAM,cAE7D4F,EAAMC,OAAOjC,MAASkC,GAAaA,EAAUlC,OAAU,GAGnDkC,GAAaA,EAAUH,QAAQ,yBAC/BC,EAAMC,OAAOK,QAAUd,EAAOa,cAAc,yBAA0BH,EAAUrB,GAAI,MAAMb,OAIrF,aAAT8B,GAAuB1D,EAAQ2D,QAAQ,mBACvCC,EAAMC,OAAOjC,MAAQ,GACrBjD,MAAMC,KAAKwE,EAAOE,iBAAiB,UAAWtF,EAAM,eAAeD,SAAQ,SAAAoG,GACvEP,EAAMC,OAAOjC,MAAMvC,KAAM8E,EAAGvC,WAIpChE,EAAI2F,QAAQlE,KAAMuE,QAGfhG,KD1DsBqF,YAAYC,aAEjDkB,gBAAiB,CACbC,MAAoB,WACpBC,YAAoB,cACpB/H,QAAS,gBAC2B,0BACA,oBAEpCgI,OAAoB,MACpBC,KAAoB,cACpBC,SAAoB,SACpBhI,QAAoB,GAExBiI,SAAS,CACLC,UAAoB,cACpBpH,MAAoB,uBACpBqH,iBAAoB,gEAExBC,kBAAwB,EACxBC,UAAW,CACPvH,MAAoB,6DAEpBwH,MAAoB,yJAEpBjC,MAAoB,8FAEpBkC,QAAoB,uEAEpBC,OAAoB,yJAIpBC,SAAoB,iIAEpBlC,QAAS,CACLJ,MAAgB,kIAKhBuC,OAAgB,mJAOhB3C,SAAgB,8SAQhB0B,QAAgB,uPAWxBkB,eAAwB,GGnFfC,EAAY,CACrBC,YAAa,UAAYlJ,SAASC,KAAO,8CCDtC,SAASkJ,EAAQC,OACdC,EAAOD,EAAME,OAAOC,OAC1BH,EAAM/F,KAAKxC,MAAK,WACRwI,EAAKnJ,QAAQ8I,eACbQ,eAAerE,WAAYkE,EAAKJ,UAAUC,gBCJ/C,IAAMO,EAAiB,SAAE/E,EAAMgF,WAAWC,yDAAmB,GAE1DC,EAAalF,EAAKT,OAEhB4F,EAAO,EAAGA,EAAOD,EAAYC,IAAO,KAClCC,EAASpF,EAAKmF,MAChBC,EAAOlI,OAAS8H,EAAW,IACvBC,GACIG,EAAOtE,QAAUmE,kBAIlBE,UAIP,GCZL,SAASE,EAAeX,OCJLY,EAAOxH,EAAMyH,EDK7BrG,EAAUwF,EAAM/F,KAAKO,QACrBsG,EAASd,EAAM/F,KAAK6G,OACpBnD,EAAWnD,EAAQE,QAAQ,QAAQyF,OACnCrJ,EAAU6G,EAAS7G,QACnBiK,EAAgBvG,EAAQE,QAAS5D,EAAQyH,aAAaC,mBAAoBC,cAAc,0BAExF5B,EAAatC,EAAcC,GAC3BwG,EAAcrE,EAAkBgB,EAAS1D,KAAK2C,UAAWC,MAG3DjC,EAAcoG,UAAuB,KAGrCD,GAAiBD,GAAUlI,cAAcoI,EAAYC,cAAe,KAChEC,EAAa7I,OAAOoB,KAAKqH,MACzBA,EAAOK,KAAM,KAEPC,EAAYF,EAAWG,QAAQ,QCtBhBjI,EDuBcgI,ECvBRP,EDuBmB,GCvBhCD,EDuBSM,GCtBzBI,OAAOT,EAAI,EAAGD,EAAMU,OAAOlI,EAAM,GAAG,IDsBlC8H,ECrBDN,MDuBGW,EAAaL,EAAWlG,QAAO,SAACwG,EAAShJ,OACrCyI,EAAeD,EAAYC,aAAazI,IAAS,UAChDgJ,GAAWP,EAAenK,EAAQwI,UAAUvH,MAAMqD,QAAQ,mBAAoB6F,GAAgB,MACtG,IAEHF,EAAcU,UAAYF,MAIzBvB,EAAM/F,KAAKyH,gBAAkB5K,EAAQ8I,gBAAkBpF,EAAQ2D,QAAQ,0BAA2B,KAC7F2B,EAAcnC,EAASkC,UAAUC,YACnC6B,EAAevB,eAAe7D,UAAWuD,IAAiB,GAExDtH,EAAOgC,EAAQhC,KACf4D,EAAQ5B,EAAQ4B,MAChBwF,EAAiBpH,EAAQ2D,QAAQ,wBACjC0D,EAAgBrH,EAAQ2D,QAAQ,iBAChC2D,EAAgBtH,EAAQ2D,QAAQ,uBAChC4D,EAAYH,EAAiBI,SAASvD,cAAcjE,EAAQG,aAAa,uBAAyB,KAElGsH,EAAwB5B,EAAgBsB,EAAcnJ,EAAO,UAC9DsJ,IAAkBF,GAAkBK,GAAyB,GAE9DN,EAAaL,OAAOW,EAAuB,OAGzCC,EAAa7B,EAAgBsB,EAAcnJ,IAAOqJ,GAAgBzF,MACpE8F,GAAc,EAEdP,EAAaL,OAAOY,EAAY,IAC3BL,GAAiBrH,EAAQ2H,UAAcN,GAA2B,KAAVzF,IAEzDuF,EAAa9H,KAAM,CAAErB,KAAAA,EAAM4D,MAAAA,SAE5B,GAAc,KAAVA,EAAc,IACjBwF,EAAgB,KACVQ,EAAa/B,EAAgBsB,EAAcI,EAAUvJ,MACvD4J,GAAc,GACdT,EAAaL,OAAOc,EAAY,GAEpCT,EAAa9H,KAAM,CAAErB,KAAMuJ,EAAUvJ,KAAM4D,MAAO2F,EAAU3F,QAEhEuF,EAAa9H,KAAM,CAAErB,KAAAA,EAAM4D,MAAAA,IAG/BgE,eAAejE,UAAW2D,EAAa6B,IAIvCX,EAAYqB,UAAa7H,EAAQ6H,UAAa7H,EAAQ2D,QAAQ,0BAC9D3D,EAAQ6H,UAAW,EACnB1E,EAAS2E,cAAc9H,IE1ExB,IAAM+H,EAAqB,eAAEC,yDAAc,UAEvCnH,EAAUmH,GAAcxH,QAAO,SAACyH,EAAaC,UACzCD,2BAAiCC,EAAItG,mBAAUsG,EAAIpF,qBAC3D,KCJMqF,EAA0B,SAAEC,EAAWC,EAAYC,OACtDC,EAAgB,CAAC,OAAQ,KAAM,QAAS,SAAU,UAAW,QAE/D,sBAAsBC,KAAKJ,EAAU1E,OACrC6E,EAAclJ,KAAK,OAAQ,aAG3BoJ,EAAS,UAEb5K,OAAOoB,KAAKmJ,GACPrJ,QAAO,SAAAf,UAAyC,IAAjCuK,EAAc1B,QAAQ7I,MACrCD,SAAQ,SAAAC,GACLyK,cAAczK,eAASoK,EAAUpK,WAGrCoK,EAAU3I,MACV5B,OAAOoB,KAAKmJ,EAAU3I,MAAM1B,SAAQ,SAAAC,GAChCyK,mBCnBe,eAAeC,0DAClCC,0DAD8B,IACXC,OAAOhI,QAAQ,sCAAsC,SAACiI,EAAOC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,UAChFH,EAAK,IAAMA,GAAME,GAAM,IAAM,IAAMC,GACpCC,wBAEhBV,EAAaC,EAAUU,cAAgBV,EDcnBW,CAAYtL,gBAAUoK,EAAU3I,KAAKzB,WAI5DsK,IACAG,GAAU,aAGVL,EAAUlE,UACVuE,GAAU,uBAGdA,kBAAkBJ,QAEJO,QE5BLW,EAAkB,SAAlBA,EAAoBC,EAAaC,EAAWnN,OAEjDoN,EAAiB,GACjBC,EAAe,UAEnB9I,EAAU2I,GAAczL,SAAQ,SAAC8F,EAAQ+F,OAEjCC,EAIEC,EAA6B,WAAhBjG,EAAOH,KAAoB,SAAWG,EAAOH,QAE7C,WAAfoG,GAA2BH,IAAiBG,GAEhDH,EAAeG,EAEXL,EAAUjH,SAASuH,SACnBlG,EAASpF,EAAa,GAAIoF,EAAQ,CAACpE,KAAK,CAACsK,OAAON,EAAUjH,SAASuH,eAGjE1B,YAAgByB,cAAcL,EAAUO,qBAAYP,EAAUjH,SAASC,eAAqB,WAAfqH,EAA2BF,EAAQ,EAAK/F,EAAOpB,IAC5HwH,EAAa,CACfC,eAAgBT,EAAUjH,SAASoH,MAAQ,EAC3CO,eAAgB7N,EAAQoG,WAAWM,QAAQ8G,IAAexN,EAAQoG,WAAWM,QAAQJ,MACrFwH,gBAAiBjC,EAAyBtE,EAAQwE,EAAYoB,EAAUjH,SAAS8F,YACjF+B,aAAc/N,EAAQoG,WAAWoH,IAAexN,EAAQoG,WAAWE,MAEnEkH,WAAAA,EACAzB,WAAAA,EACAiC,YAAa,GAEbC,YAAa1G,EAAOf,OAAS,GAC7B0H,aAAclO,EAAQoG,WAAWI,OAGjC2H,EAAmB,MACnB5G,EAAOK,QAAS,KACVwG,EAAc7G,EAAOK,QAAQR,MAAQ,SACrCiH,EAAkC,WAAhBD,EAClBE,EAAaD,EAAkBlM,EAAa,GAAIoF,GAAUA,EAAOK,QAEvE0G,EAAWlH,KAAOiH,EAAkB,SAAWD,EAC/CE,EAAWnI,GAAK,GAChBmI,EAAWnL,KAAOhB,EAAa,GAAImM,EAAWnL,KAAM,CAACoL,aAAa,IAAIxC,WAC/DuC,EAAW1G,YAEZ4G,EAAoB,CACtBV,gBAAiBjC,EAAwByC,EAAY,IAAI,GACzDd,WAAYY,EACZJ,YAAa,QACbD,aAAcM,EAAkBrO,EAAQoG,WAAWuC,OAAU3I,EAAQoG,WAAWgI,IAAgBpO,EAAQoG,WAAWE,UAGvH6H,EAAmBnO,EAAQwI,UAAU4F,IAAgBpO,EAAQwI,UAAUC,MACnE4F,EAAiB,KACXI,EAAchD,EAAoBlE,EAAOK,SAC/CuG,EAAmBA,EAAiB7J,QAAQ,kBAAmBmK,GAGnEN,EAAmBnK,EAA0BwK,EAAmBL,OAM9D3F,ECvEc,SAAEgF,EAAYhF,SAC/B,CACHlC,MAAOkC,EAAUgF,IAAehF,EAAUC,MAC1CjC,MAAO,oCAAoC0F,KAAKsB,GAAchF,EAAUhC,MAAQ,GAChFE,QAAS8B,EAAU9B,QAAQ8G,IAAehF,EAAU9B,QAAQJ,ODmE1CoI,CADYnH,EAAOK,QAAU,UAAaL,EAAOsB,OAAS,SAAW2E,EAChCxN,EAAQwI,WAE3DmG,EAAmB,GACnBpH,EAAOsB,SACP8F,EAAmB1B,EAAiB1F,EAAOsB,OAAQsE,EAAWnN,QAG9DyO,EAAc,GACC,WAAfjB,IACAiB,EAAchD,EAAoByB,IAGtCK,EAAa/E,EAAU9B,QACNpC,QAAQ,uBAAwB6J,GAChC7J,QAAQ,oBAAqBkE,EAAUlC,OACvChC,QAAQ,kBAAmBmK,GAC3BnK,QAAQ,oBAAqBkE,EAAUhC,OACvClC,QAAQ,uBAAwBqK,GACjDvB,GAAkBpJ,EAA0B2J,EAAYJ,OAIrDH,GE1FEwB,EAAiB,SAAE9I,EAAW4H,EAAU1N,UAE1CuE,EAAUuB,GAAY5B,QAAO,SAAC2K,EAAS3E,EAAaoD,MACnDpD,EAAY4E,gBAAmBD,MAE/BE,EAAe/O,EAAQwI,UAAU9B,QAAQR,SACvCH,EAAamE,EAAY/D,GACzByH,EAAiBN,EAAQ,EACzBH,EAAY,CACdO,SAAAA,EACAxH,SAAU,CACNC,GAAIJ,EACJuH,MAAAA,EACAtB,aAAc9B,EAAYqB,WAI9BrB,EAAYuD,SACZN,EAAUjH,SAASuH,OAASvD,EAAYuD,YAGtCuB,EAAc/B,EAAiB/C,EAAYjD,QAASkG,EAAWnN,GAE/DqI,EAAY6B,EAAYuD,OAASlI,KAAKK,MAAMsE,EAAYuD,QAAU,GAClEwB,EAAY5G,EAAU,IAAM,GAC5B6G,EAAY7G,EAAU,IAAM,GAC5B8G,EAAgB9G,GAAarI,EAAQoI,SAASC,UAAY,KAAM6G,EAAW,IAAKlP,EAAQoI,SAASC,UAAW,IAAM,GAElH+G,EAAe,CACjBrJ,WAAAA,EACA6H,eAAAA,EACAyB,aAAcnF,EAAYhE,SAAWiJ,EACrCH,YAAAA,MAEJD,EAAe/K,EAA0BoL,EAAcL,GAEnD/O,EAAQuI,iBAAkB,KACtB4B,EAA6B,KAAd9B,EAAmBrI,EAAQoI,SAASE,iBAAoB4B,EAAYC,cAAgBnK,EAAQoI,SAASnH,MAGpHa,EAAcqI,KACdA,EAAe,IAGnB4E,EAAeA,EAAazK,QAAS,sBAAuB6F,UAGzD0E,EAAW7K,EAA0B,CAACiL,UAAAA,EAAWC,UAAAA,GAAYH,KACrE,KCjDMO,EAAc,SAAEnM,EAAM2D,EAAQ9G,OAEjCuP,EAAYX,EAAgBzL,EAAK2C,UAAW3C,EAAKgD,GAAInG,GAC3D8G,EAAOa,cAAc,wBAAwB6H,mBAAoB,YAAaD,OAGxEE,EAAetM,EAAK2C,UAAUrD,QAAO,SAAAnB,UAAOA,EAAIwN,eAClDW,EAAa1L,OAAS,EAAG,KACnB2L,EAAkB5I,EAAOlD,QAAQ,2BACvC6L,EAAahO,SAAQ,SAACyE,EAAUyJ,OAEtBC,EAAeF,EAAgB/H,cAAc,6BAA8BgI,EAAO,GAAI,MAE5FC,EAAaC,aAAa,mBAAoB3J,EAASC,IAEvDD,EAASe,QAAQxF,SAAQ,SAAC8F,EAAQuI,OACxBC,EAAgBH,EAAa5I,iBAAiB,gBAAgB8I,GAC9DE,EAAa,CACX7J,aAAOoB,EAAOH,iBAAQjE,EAAKgD,eAAMD,EAASC,eAAMoB,EAAOpB,IACvDiB,KAAMG,EAAOH,KACb9B,MAAOiC,EAAOjC,MACdiG,WAAYrF,EAASqF,UAG7BhK,OAAOoB,KAAKqN,GAAYvO,SAAQ,SAAAC,GAC5BqO,EAAcrO,GAAQsO,EAAWtO,UAG/BuO,EAAaF,EAAcnM,QAAQ,iBACzCqM,EAAWtI,cAAc,SAASkI,aAAa,MAAOG,EAAW7J,IACjE8J,EAAWtI,cAAc,gBAAgBgD,UAAYpD,EAAOf,MAC5DoJ,EAAajI,cAAc,mBAAmBgD,UAAYzE,EAASA,iBCjCtEgK,EAAkB,SAAEpJ,EAAQiC,OAE/BoH,EAAK7G,eAAe7D,UAAWsD,EAAUC,gBAC3CmH,EAAI,KACEC,EAAetJ,EAAOlD,QAAQ,2BACpCuM,EAAG1O,SAAQ,SAAAkI,OACD0G,EAAaD,EAAazI,cAAe,UAAYgC,EAAKjI,KAAO,MACjE4O,EAAoBD,EAAWhJ,QAAQ,qCACvC3D,EAAY4M,EAAoBF,EAAazI,cAAc,UAAYgC,EAAKjI,KAAO,aAAeiI,EAAKrE,MAAQ,MAAQ+K,EAEzHC,EACA5M,EAAQ2H,SAAU,EAElB3H,EAAQ4B,MAAQqE,EAAKrE,WCF/BiL,+RAEWzJ,WAAQ0J,yDAAa,iBACzBA,EAAW3Q,KAAiC,iBAAnB2Q,EAAW3Q,UAC/B,IAAIiB,MAAM,6CAGpB0P,EAAarO,EAAc,GAAIoO,EAAOvO,UAAUhC,QAASwQ,GAEpD5L,IAAaC,cACd2L,EAAW1H,eAAgB,OAKzBK,kBADCrC,EAAQ0J,IAEfrH,EAAKJ,UAAYA,EACjBjC,EAASqC,EAAKrC,OACd0J,EAAarH,EAAKnJ,YACZyQ,EAAgBtH,EAAKJ,UAE3BjC,EAAOa,cAAc,wBAAwB6H,mBAAoB,cAAegB,EAAWhI,UAAUE,aAG/FgI,EAAiB/Q,EAAS6Q,EAAW3Q,IAAK2Q,EAAW1I,iBACtDnH,MAAK,SAAAC,SACoC,YAAlCA,EAAS+P,OAAO7D,cACT8D,QAAQC,OAAOjQ,GAEnB,IAAIgQ,SAAQ,SAAAE,GACXlQ,EAASuC,KAAK2C,WAAalF,EAASuC,KAAK2C,UAAU/B,OAAS,GAG5D0M,EAAczH,YAAcyH,EAAczH,YAAY1E,QAAS,eAAgB1D,EAASuC,KAAKgD,IAC7FsK,EAAczH,YAAcyH,EAAczH,YAAY1E,QAAS,qBAAuBwC,EAAOjD,aAAa,SAAW,IAErHyL,EAAY1O,EAASuC,KAAM2D,EAAQ0J,GAC/BA,EAAW1H,eACXoH,EAAgBpJ,EAAQ2J,GAE5BlP,OAAOwP,eAAe5H,EAAM,OAAQ,CAChC7D,MAAOjE,EAAWT,EAASuC,QAE/B2D,EAAOkK,iBAAiB,uBAAwBnH,GAChD/C,EAAOkK,iBAAiB,kBAAmB/H,+CAC9BtI,MAAK,WACdwI,EAAK8H,eAAgB,EACrBnK,EAAOlD,QAAQ,2BAA2BsN,UAAUC,IAAI,yBACxDL,EAAQlQ,OAIZkQ,EAAQlQ,kBAIX,eACCwQ,EAAetK,EAAOa,cAAc,2BACtCyJ,GACAA,EAAaC,WAAWC,YAAYF,aAIhDpO,EAAqB8D,EAAQ1F,EAAmBsP,oDAQjCF,GACfD,EAAOvO,UAAUhC,QAAUmC,EAAa,GAAIoO,EAAOvO,UAAUhC,QAASwQ,0CCjFvD,IAAA1J,GAAAA,ED4EPpB,KAAKoB,QC1EVyK,oBAAoB,uBAAwB1H,GACnD/C,EAAOyK,oBAAoB,kBAAmBtI,kFDM7BuI,IA6ErBjB,EAAOvO,UAAUiP,eAAgB,EACjCV,EAAOvO,UAAUhC,QAAUA,EAC3BuQ,EAAOvO,UAAUyP,Q7B1FM"}