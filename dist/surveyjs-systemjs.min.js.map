{"version":3,"file":"surveyjs-systemjs.min.js","sources":["../src/modules/helpers/ajaxCall.js","../src/modules/helpers/arrayMove.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/deepFreeze.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelectorSurvey.js","../src/modules/helpers/getQuestionId.js","../src/modules/helpers/isEmptyObject.js","../src/modules/helpers/replaceObjectKeysInString.js","../src/modules/helpers/sortList.js","../src/modules/helpers/toKebabCase.js","../src/modules/helpers/webStorage.js","../src/modules/utils/getQuestionObject.js","../src/modules/optionsUtils.js","../src/modules/options.js","../src/modules/internals.js","../src/modules/listenerCallbacks/submit.js","../src/modules/utils/getAnswerIndexInWebStorage.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/buildSurvey/generateQAcodeUtils/generateOptionTags.js","../src/modules/buildSurvey/generateQAcodeUtils/getAttributesStringHTML.js","../src/modules/buildSurvey/generateQAcodeUtils/getTemplates.js","../src/modules/buildSurvey/generateQAcodeUtils/generateAnswers.js","../src/modules/buildSurvey/generateQAcode.js","../src/modules/buildSurvey/buildSurvey.js","../src/modules/buildSurvey/populateAnswers.js","../src/modules/destroy.js","../src/index.js"],"sourcesContent":["\nexport const ajaxCall = ( url = location.href, options = {} ) => {\n\n    let timeoutTimer;\n\n    options.headers = new Headers( options.headers );\n\n    /* SET AbortController FOR timeout */\n    if ( options.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        options.signal = signal;\n\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, options.timeout);\n    }\n\n    return fetch( url, options )\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n        });\n        \n}\n","\nexport const arrayMove = (array, from, to) => {\n    array.splice(to, 0, array.splice(from, 1)[0]);\n    return array;\n}\n","\nexport const customEvents = {\n    init: 'sjs:init'\n}\n","\nexport const deepFreeze = obj => {\n\n    Object.getOwnPropertyNames(obj).forEach(name => {\n        const prop = obj[name];\n        if( typeof prop === 'object' && prop !== null ){\n            deepFreeze(prop);\n        }\n    });\n    return Object.freeze(obj);\n    \n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelectorSurvey = '[data-surveyjs-form] input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]), [data-surveyjs-form] select, [data-surveyjs-form] textarea, [data-name=\"bind-surveyjs-answer\"]'\n","\nexport const getQuestionId = fieldEl => {\n    const containerEl = fieldEl.closest('[data-question-id]');\n    return (containerEl && containerEl.getAttribute('data-question-id')) || '';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const isEmptyObject = object => {\n    return isPlainObject(object) && Object.getOwnPropertyNames(object).length === 0;\n}\n","\nexport const replaceObjectKeysInString = (obj, stringHTML) => {\n    return Object.keys(obj).reduce((accString, name) => {\n        const regexStr = new RegExp( '{{' + name + '}}', 'g' );\n        return accString.replace(regexStr, obj[name]);\n    }, stringHTML);\n}\n","\nexport const sortList = ( list ) => {\n    if( list[0]['sort'] ){\n        list.sort((a, b) => a['sort'] > b['sort']);\n    }\n    return list;\n}\n","\nexport const toKebabCase = ( string = '', useAllCaps = false ) => {\n    let newString = string.trim().replace(/(([_ ])([a-z]))|(([a-z])?([A-Z]))/g, (match, p1, p2, p3, p4, p5, p6) => {\n        const concatGroup = p3 ? '-' + p3 : (p5 || '') + '-' + p6;\n        return concatGroup.toLowerCase();\n    } );\n    return useAllCaps ? newString.toUpperCase() : newString;\n}\n","\nexport const webStorage = () => {\n\n    const checkLocalStorage = () => {\n        const mod = 'check_storage';\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    const isAvailable = checkLocalStorage();\n\n    if( isAvailable ){\n        // setObject METHOD FOR HTML STORAGE -> EG: localStorage.setObject( name, JSobj )\n        // TO STORE A JS OBJECT ( AS JSON STRING ) INSIDE THE STORAGE\n        Storage.prototype.setObject = function( key, value ) {\n            this.setItem( key, JSON.stringify(value) );\n        }\n\n        // getObject METHOD FOR HTML STORAGE -> EG: localStorage.getObject( name )\n        // RETURN THE DATA ( STORED AS JSON STRING ) AS JS OBJECT\n        Storage.prototype.getObject = function( key ) {\n            const value = this.getItem( key );\n            return value && JSON.parse( value );\n        }\n    }\n\n    return {\n        isAvailable: isAvailable\n    }\n\n}\n","\nexport const getQuestionObject = ( data, questionId ) => {\n\n    const questions = data.questions,\n          qLength = questions.length;\n\n    let obj = {};\n    \n    for(let q=0; q<qLength; q++){\n        const question = questions[q];\n        if( question.id == questionId ){\n            obj = question;\n            break;\n        }\n    }\n\n    return obj;\n\n}","\nimport { fieldsStringSelectorSurvey, getQuestionId, isEmptyObject, mergeObjects } from './helpers';\nimport { getQuestionObject } from './utils/getQuestionObject';\n\nexport const optionsUtils = {\n    formOptions: {\n\n        getFormData: function getFormData_surveyDefault(){\n            const formEl = this.formEl;\n            const instance = formEl.formjs;\n            const fieldsList = Array.from( formEl.closest('[data-surveyjs-container]').querySelectorAll(fieldsStringSelectorSurvey) );\n            const obj = {\n                    answers: [],\n                    id: instance.data.id\n                };\n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                // EACH QUESTION HAS ITS OWN OBJECT ( qaObj ) THAT CONTAINS THE RELATED DATA:\n                // question:    THE QUESTION ID ( undefined FOR QUESTIONS WITH ATTRIBUTE data-required-form - will be skipped later )\n                // answer       AN OBJECT THAT CONTAINS THE FOLLOWS:\n                //                  value:      THE ANSWER VALUE\n                //                  related:    IF THE ANSWER IS REQUIRED FROM ANOTHER ANSWER (SEE BELOW)\n                const questionId = getQuestionId(fieldEl),\n                      qaObj = {\n                        question: questionId,\n                        answer: {\n                            value: fieldEl.value || ''\n                        }\n                    };\n\n                // A FIELD WITH ATTRIBUTE 'data-required-from' IS MANAGED TOGETHER WITH ITS RELATED FIELD ( WHICH HAS ATTRIBUTE 'data-require-more' )\n                // IF QUESTION ID IS EMPTY -> SKIP THE FIELD ( USEFUL FOR FORM FIELDS OUTSIDE THE SURVEY BODY )\n                if(\n                    fieldEl.matches('[data-required-from]') || \n                    questionId === '' || \n                    isEmptyObject( getQuestionObject(instance.data, questionId) )\n                ){ return; }\n\n                if( type === 'radio' ){\n                    const containerEl = fieldEl.closest('form') ? formEl : fieldEl.closest(instance.options.fieldOptions.questionContainer);\n                    const checkedEl = containerEl.querySelector('[name=\"'+ name +'\"]:checked');\n\n                    qaObj.answer.value = (checkedEl && checkedEl.value) || '';\n\n                    // FOR RADIO THAT REQUIRE THE USER TO GIVE ONE MORE ANSWER\n                    if( checkedEl && checkedEl.matches('[data-require-more]') ){\n                        qaObj.answer.related = formEl.querySelector('[data-required-from=\"#'+ checkedEl.id +'\"]').value;\n                    }\n                }\n\n                if( type === 'checkbox' && fieldEl.matches('[data-checks]') ){\n                    qaObj.answer.value = [];\n                    Array.from(formEl.querySelectorAll('[name=\"'+ name +'\"]:checked')).forEach(el => {\n                        qaObj.answer.value.push( el.value );\n                    });\n                }\n                \n                obj.answers.push( qaObj );\n            });\n        \n            return obj;\n        }\n    \n    }\n}\n","\nimport { optionsUtils } from './optionsUtils';\n\nexport const options = {\n    cssClasses: {\n        checkbox:           'form-check-input',\n        default:            'form-control',\n        file:               'form-control-file',\n        label:              'form-check-label',\n        radio:              'form-check-input',\n        wrapper: {\n            checkbox:       'form-check',\n            default:        '',\n            radio:          'form-check'\n        }\n    },\n    fieldErrorFeedback:     true,\n    formOptions: {\n        getFormData:        optionsUtils.formOptions.getFormData\n    },\n    initAjaxOptions: {\n        cache:              'no-store',\n        credentials:        'same-origin',\n        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept':       'application/json'\n        },\n        method:             'GET',\n        mode:               'same-origin',\n        redirect:           'follow',\n        timeout:            0\n    },\n    messages:{\n        maxChoice:                 'ANSWERS MAX',\n        errorMessage:              'Answer is necessary.',\n        errorMessageMultiChoice:   'You must choose from {{checksMin}} to {{checksMax}} answers.'\n    },\n    templates: {\n        error:      '<div class=\"surveyjs-error-message\">{{errorMessage}}</div>',\n        \n        input:      '<input {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-input surveyjs-{{answerType}} {{fieldClasses}}\" />',\n\n        label:      '<label for=\"{{answerCode}}\" class=\"surveyjs-label {{labelClasses}}\">{{labelString}}</label>',\n\n        loading:    '<div class=\"surveyjs-loading\" data-surveyjs-loading>Loading...</div>',\n\n        question:   '<div class=\"surveyjs-question-wrapper\" data-question-id=\"{{questionId}}\" data-formjs-question>'+\n                        '<div class=\"surveyjs-question-header\">Question {{questionNumber}}</div>'+\n                        '<div class=\"surveyjs-question-body\">'+\n                            '<div class=\"surveyjs-question-text\">{{questionText}}</div>'+\n                            '<div class=\"surveyjs-answers-wrapper form-group\">'+\n                                '{{answersHTML}}'+\n                                '{{errorsHTML}}'+\n                            '</div>'+\n                        '</div>'+\n                    '</div>',\n        \n        select:     '<select {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-select {{fieldClasses}}\">'+\n                        '{{optionsHtml}}'+\n                    '</select>',\n        \n        textarea:   '<textarea {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}\" class=\"surveyjs-textarea {{fieldClasses}}\"></textarea>',\n\n        wrapper: {\n            default:    '<div class=\"surveyjs-field-wrapper surveyjs-wrapper-{{answerType}} {{wrapperClasses}}\">'+\n                            '{{fieldTemplate}}'+\n                            '{{labelTemplate}}'+\n                        '</div>',\n\n            errors:     '<div class=\"surveyjs-errors-wrapper\" data-surveyjs-errors>{{errorTemplates}}</div>',\n            \n            nested:     '<div class=\"surveyjs-field-wrapper surveyjs-nested-parent surveyjs-wrapper-{{answerType}}\">'+\n                            '{{labelTemplate}}'+\n                            '<div class=\"surveyjs-nested-container surveyjs-field-indent\">'+\n                                '{{nestedFieldsHTML}}'+\n                            '</div>'+\n                        '</div>',\n            \n            related:    '<div class=\"surveyjs-field-wrapper input-group {{wrapperClasses}}\">'+\n                            '<div class=\"input-group-prepend\">'+\n                                '<div class=\"input-group-text form-check surveyjs-wrapper-radio\">'+\n                                    '{{fieldTemplate}}'+\n                                    '{{labelTemplate}}'+\n                                '</div>'+\n                            '</div>'+\n                            '{{relatedFieldHTML}}'+\n                        '</div>'\n        }\n    },\n    useWebStorage:          true\n}\n","\nexport const internals = {\n    storageArray: [],\n    storageName: 'Survey_' + location.href + '_{{surveyFormName}}_surveyId[{{surveyId}}]'\n}\n","\nexport function submit( event ){\n    const self = event.target.formjs;\n    event.data.then(() => {\n        if( self.options.useWebStorage ){\n            sessionStorage.removeItem( self.internals.storageName );\n        }\n    });\n}\n","\nexport const getAnswerIndexInWebStorage = ( internals, fieldName, multiChoiceValue = '' ) => {\n\n    const wsSurvey = sessionStorage.getObject( internals.storageName );\n            \n    if( wsSurvey ){\n        const wsSurveyLength = wsSurvey.length;\n        \n        for(let ws=0; ws<wsSurveyLength; ws++){\n            const lsItem = wsSurvey[ws];\n\n            if( lsItem.name === fieldName ){\n                if( multiChoiceValue ){\n                    if( lsItem.value !== multiChoiceValue ){\n                        continue;\n                    }\n                }\n                return ws;\n            }\n        }\n    }\n    \n    return -1;\n\n}","\nimport { arrayMove, getQuestionId, isEmptyObject } from '../helpers';\nimport { getQuestionObject }            from '../utils/getQuestionObject';\nimport { getAnswerIndexInWebStorage }   from '../utils/getAnswerIndexInWebStorage';\n\nexport function validationEnd( event ){\n    const fieldEl = event.data.fieldEl;\n    const errors = event.data.errors;\n    const instance = event.target.formjs;\n    \n    const questionId = getQuestionId(fieldEl);\n    const questionObj = getQuestionObject(instance.data, questionId);\n\n    // IF IT'S NOT A SURVEY QUESTION -> SKIP\n    if( isEmptyObject(questionObj) ){ return true; }\n\n    // MANAGE MULTIPLE ERROR MESSAGES\n    if( errors && isPlainObject(questionObj.errorMessage) ){\n        let errorsList = Object.keys(errors);\n        if( errors.rule ){\n            // PUT ERROR \"rule\" AS FIRST, SO THAT A GENERIC ERROR IS SHOWN BEFORE ALL OTHERS\n            const ruleIndex = errorsList.indexOf('rule');\n            errorsList = arrayMove(errorsList, ruleIndex, 0);\n        }\n        const errorsWrapper = fieldEl.closest( instance.options.fieldOptions.questionContainer ).querySelector('[data-surveyjs-errors]');\n        const errorsHTML = errorsList.reduce((accHTML, name) => {\n            const errorMessage = questionObj.errorMessage[name] || '';\n            return accHTML += errorMessage ? instance.options.templates.error.replace('{{errorMessage}}', errorMessage) : '';\n        }, '');\n\n        errorsWrapper.innerHTML = errorsHTML;\n    }\n\n    // MANAGE ITEMS IN LOCAL STORAGE ( IF AVAILABLE AND ACTIVE )\n    if( instance.options.useWebStorage && !fieldEl.matches('[data-exclude-storage]') ){\n        const internals = instance.internals;\n\n        const fieldValue = fieldEl.value;\n        const isRequiredFrom = fieldEl.matches('[data-required-from]');\n        const isMultiChoice = fieldEl.matches('[data-checks]');\n        const isRequireMore = fieldEl.matches('[data-require-more]');\n        const reqMoreEl = isRequiredFrom ? document.querySelector(fieldEl.getAttribute('data-required-from')) : null;\n\n        const inArrayPos = getAnswerIndexInWebStorage( internals, fieldEl.name, (isMultiChoice ? fieldValue : false) );\n        const inArrayRequireMorePos = getAnswerIndexInWebStorage( internals, fieldEl.name + '-more' );\n\n        let storageArray = internals.storageArray;\n\n        if( !isRequireMore && !isRequiredFrom && inArrayRequireMorePos !== -1 ){\n            storageArray.splice(inArrayRequireMorePos, 1);\n        }\n\n        if( inArrayPos !== -1 ){\n            if( isMultiChoice ){\n                if( !fieldEl.checked && storageArray[inArrayPos].value === fieldValue ){\n                    // REMOVE ITEM FROM LS\n                    storageArray.splice(inArrayPos, 1);\n                } else {\n                    // ADD ITEM TO LS\n                    storageArray.push( { name: fieldEl.name, value: fieldValue } );\n                }\n            } else {\n                if( fieldValue !== '' ){\n                    storageArray[inArrayPos].value = fieldValue;\n                } else {\n                    storageArray.splice(inArrayPos, 1); \n                }\n            }\n        } else {\n            if( fieldValue !== '' ){\n                if( isRequiredFrom && fieldValue !== '' ){\n                    const oldFieldNamePos = getAnswerIndexInWebStorage( internals, reqMoreEl.name );\n                    if( oldFieldNamePos !== -1 ){\n                        storageArray.splice(oldFieldNamePos, 1);\n                    }\n                    storageArray.push( { name: reqMoreEl.name, value: reqMoreEl.value } );\n                }\n                storageArray.push( { name: fieldEl.name, value: fieldValue } );\n                if( isRequireMore ){\n                    const elReqFromEl = fieldEl.closest('form').querySelector( '[data-required-from=\"#' + fieldEl.id + '\"]' );\n                    storageArray.push( { name: elReqFromEl.name, value: elReqFromEl.value } );\n                }\n            }\n        }\n\n        sessionStorage.setObject( internals.storageName, storageArray );\n    }\n\n    // BASED ON JSON DATA, FORCE REQUIRED FIELDS TO BE VALIDATED\n    if( questionObj.required && !fieldEl.required ){\n        fieldEl.required = true;\n        instance.validateField(fieldEl);\n    }\n}\n","\nimport { sortList } from '../../helpers';\n\nexport const generateOptionTags = ( optionsList = [] ) => {\n\n    return sortList( optionsList ).reduce((optionsHTML, opt) => {\n        return optionsHTML += `<option value=\"${opt.value}\">${opt.label}</option>`;\n    }, '');\n\n}","\nimport { toKebabCase } from '../../helpers';\n\nexport const getAttributesStringHTML = ( answerObj, answerCode, isRequired ) => {\n    const excludedAttrs = ['data', 'id', 'label', 'nested', 'related', 'sort'];\n    \n    if( /^(option|textarea)$/.test(answerObj.type) ){\n        excludedAttrs.push('type', 'value');\n    }\n\n    let string = '';\n\n    Object.keys(answerObj)\n        .filter(name => excludedAttrs.indexOf(name) === -1)\n        .forEach(name => {\n            string += ` ${name}=\"${answerObj[name]}\"`;\n        });\n\n    if( answerObj.data ){\n        Object.keys(answerObj.data).forEach(name => {\n            string += ` data-${toKebabCase(name)}=\"${answerObj.data[name]}\"`;\n        });\n    }\n\n    if( isRequired ){\n        string += ' required';\n    }\n\n    if( answerObj.related ){\n        string += ' data-require-more';\n    }\n\n    string += ` id=\"${answerCode}\"`;\n\n    return string.trim();\n}\n","\nexport const getTemplates = ( answerType, templates ) => {\n    return {\n        field: templates[answerType] || templates.input,\n        label: /^(checkbox|nested|radio|related)$/.test(answerType) ? templates.label : '',\n        wrapper: templates.wrapper[answerType] || templates.wrapper.default\n    }\n}\n","\nimport { mergeObjects, replaceObjectKeysInString, sortList } from '../../helpers';\nimport { generateOptionTags }       from './generateOptionTags';\nimport { getAttributesStringHTML }  from './getAttributesStringHTML';\nimport { getTemplates }             from './getTemplates';\n\nexport const generateAnswers = ( answersList, extraData, options ) => {\n\n    let allAnswersHTML = '';\n    let previousType = '';\n\n    sortList( answersList ).forEach((answer, index) => {\n\n        let answerHTML = '';\n\n        // COLLECT USEFUL DATA\n        // answerType => checkbox, date, email, radio, select, text, textarea, etc...\n        const answerType = answer.type === 'option' ? 'select' : answer.type;\n        \n        if( answerType === 'select' && previousType === answerType ){ return; }\n\n        previousType = answerType;\n\n        if( extraData.question.checks ){\n            answer = mergeObjects({}, answer, {data:{checks:extraData.question.checks}});\n        }\n        \n        const answerCode = `${answerType}-${extraData.surveyId}-${extraData.question.id}-${answerType === 'select' ? (index + 1) : answer.id}`;\n        const answerData = {\n            questionNumber: extraData.question.index + 1,\n            wrapperClasses: options.cssClasses.wrapper[answerType] || options.cssClasses.wrapper.default,\n            fieldAttributes: getAttributesStringHTML( answer, answerCode, extraData.question.isRequired ),\n            fieldClasses: options.cssClasses[answerType] || options.cssClasses.default,\n\n            answerType,\n            answerCode,\n            addMoreName: '',\n\n            labelString: answer.label || '',\n            labelClasses: options.cssClasses.label\n        };\n\n        let relatedFieldHTML = '';\n        if( answer.related ){\n            const relatedType = answer.related.type || 'select';\n            const relatedIsSelect = relatedType === 'select';\n            const relatedObj = relatedIsSelect ? mergeObjects({}, answer) : answer.related;\n\n            relatedObj.type = relatedIsSelect ? 'option' : relatedType;\n            relatedObj.id = '';\n            relatedObj.data = mergeObjects({}, relatedObj.data, {requiredFrom:'#'+answerCode});\n            delete relatedObj.related;\n\n            const answerDataRelated = {\n                fieldAttributes: getAttributesStringHTML(relatedObj, '', false),\n                answerType: relatedType,\n                addMoreName: '-more',\n                fieldClasses: relatedIsSelect ? options.cssClasses.select : (options.cssClasses[relatedType] || options.cssClasses.default)\n            };\n\n            relatedFieldHTML = options.templates[relatedType] || options.templates.input;\n            if( relatedIsSelect ){\n                const optionsHtml = generateOptionTags( answer.related );\n                relatedFieldHTML = relatedFieldHTML.replace('{{optionsHtml}}', optionsHtml);\n            }\n\n            relatedFieldHTML = replaceObjectKeysInString(answerDataRelated, relatedFieldHTML);\n        }\n        \n        // TAKE RIGHT TEMPLATES ( wrapper, field and label ) AND PUT ALL TOGETHER\n        // answerTypeForTemplate => related, input, nested, select, textarea, etc...\n        const answerTypeForTemplate = answer.related ? 'related' : (answer.nested ? 'nested' : answerType);\n        const templates = getTemplates( answerTypeForTemplate, options.templates );\n\n        let nestedFieldsHTML = '';\n        if( answer.nested ){\n            nestedFieldsHTML = generateAnswers( answer.nested, extraData, options );\n        }\n\n        let optionsHtml = '';\n        if( answerType === 'select' ){\n            optionsHtml = generateOptionTags( answersList );\n        }\n\n        answerHTML = templates.wrapper\n                        .replace('{{relatedFieldHTML}}', relatedFieldHTML)\n                        .replace('{{fieldTemplate}}', templates.field)\n                        .replace('{{optionsHtml}}', optionsHtml)\n                        .replace('{{labelTemplate}}', templates.label)\n                        .replace('{{nestedFieldsHTML}}', nestedFieldsHTML);\n        allAnswersHTML += replaceObjectKeysInString(answerData, answerHTML);\n\n    });\n\n    return allAnswersHTML;\n\n}\n","\nimport { isPlainObject, replaceObjectKeysInString, sortList } from '../helpers';\nimport { generateAnswers } from './generateQAcodeUtils/generateAnswers';\n\nexport const generateQAcode = ( questions, surveyId, options ) => {\n\n    return sortList( questions ).reduce((accCode, questionObj, index) => {\n        if( questionObj.external ){ return accCode; }\n\n        let qaHtml = options.templates.question;\n        const questionId = questionObj.id;\n        const questionNumber = index + 1;\n        const extraData = {\n            surveyId,\n            question: {\n                id: questionId,\n                index,\n                isRequired: !!questionObj.required\n            }\n        };\n\n        if( questionObj.checks ){\n            extraData.question.checks = questionObj.checks;\n        }\n        \n        let answersHTML = generateAnswers( questionObj.answers, extraData, options );\n\n        const maxChoice = questionObj.checks ? JSON.parse(questionObj.checks) : '';\n        const checksMin = maxChoice[0] || '';\n        const checksMax = maxChoice[1] || '';\n        const maxChoiceText = maxChoice && options.messages.maxChoice ? ' ('+ checksMax +' '+ options.messages.maxChoice +')' : '';\n\n        const questionData = {\n            questionId,\n            questionNumber,\n            questionText: questionObj.question + maxChoiceText,\n            answersHTML,\n            errorsHTML: options.fieldErrorFeedback ? options.templates.wrapper.errors : ''\n        };\n        qaHtml = replaceObjectKeysInString(questionData, qaHtml);\n\n        if( options.fieldErrorFeedback ){\n            let errorMessage = maxChoice !== '' ? options.messages.errorMessageMultiChoice : (questionObj.errorMessage || options.messages.errorMessage);\n\n            // CASE OF MULTIPLE ERROR MESSAGES FROM JSON DATA => DYNAMICALLY MANAGED VIA EVENT LISTENER IN CONSTRUCTOR\n            if( isPlainObject(errorMessage) ){\n                errorMessage = '';\n            }\n\n            qaHtml = qaHtml.replace( /{{errorTemplates}}/g, errorMessage );\n        }\n\n        return accCode += replaceObjectKeysInString({checksMin, checksMax}, qaHtml);\n    }, '');\n\n}\n","\nimport { generateQAcode } from './generateQAcode';\n\nexport const buildSurvey = ( data, formEl, options, internals ) => {\n    \n    const formName = formEl.getAttribute('name') || '';\n    \n    // REPLACE SURVEY ID AND FORM NAME IN WEB STORAGE NAME\n    internals.storageName = internals.storageName.replace( /{{surveyId}}/, data.id );\n    internals.storageName = internals.storageName.replace( /{{surveyFormName}}/, formName );\n    \n    const qaHtmlAll = generateQAcode( data.questions, data.id, options );\n    formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforeend', qaHtmlAll );\n\n    // MANAGE EXTERNAL QUESTION\n    const extQuestion = data.questions.filter(obj => obj.external)[0];\n    if( extQuestion ){\n        const externalCont = formEl.closest('[data-surveyjs-container]').querySelector('[data-surveyjs-external]');\n        \n        externalCont.setAttribute('data-question-id', extQuestion.id);\n        extQuestion.answers.forEach((answer, index) => {\n            const externalField = externalCont.querySelectorAll('[data-field]')[index];\n            const fieldProps = {\n                    id: `${answer.type}-${data.id}-${extQuestion.id}-${answer.id}`,\n                    type: answer.type,\n                    value: answer.value,\n                    required: !!extQuestion.required\n                };\n            \n            Object.keys(fieldProps).forEach(name => {\n                externalField[name] = fieldProps[name];\n            });\n\n            const answerCont = externalField.closest('[data-answer]');\n            answerCont.querySelector('label').setAttribute('for', fieldProps.id);\n            answerCont.querySelector('[data-label]').innerHTML = answer.label;\n            externalCont.querySelector('[data-question]').innerHTML = extQuestion.question;\n        });\n    }\n\n}\n","\nexport const populateAnswers = ( formEl, internals ) => {\n\n    const WS = sessionStorage.getObject( internals.storageName );\n    if( WS ){\n        const surveyContEl = formEl.closest('[data-surveyjs-container]');\n        internals.storageArray = WS;\n        WS.forEach(item => {\n            const fieldFirst = surveyContEl.querySelector( '[name=\"' + item.name + '\"]' ),\n                  isRadioOrCheckbox = fieldFirst.matches('[type=\"radio\"], [type=\"checkbox\"]'),\n                  fieldEl = ( isRadioOrCheckbox ? surveyContEl.querySelector('[name=\"' + item.name + '\"][value=\"' + item.value + '\"]') : fieldFirst );\n            \n            if( isRadioOrCheckbox ){\n                fieldEl.checked = true;\n            } else {\n                fieldEl.value = item.value;\n            }\n        });\n    }\n\n}\n","\nimport { submit, validationEnd } from './listenerCallbacks';\n\nexport const destroy = formEl => {\n\n    formEl.removeEventListener('fjs.field:validation', validationEnd);\n    formEl.removeEventListener('fjs.form:submit', submit);\n    \n}\n","\nimport { ajaxCall, customEvents, deepFreeze, dispatchCustomEvent, mergeObjects, webStorage } from './modules/helpers';\nimport { options }          from './modules/options';\nimport { internals }        from './modules/internals';\nimport { submit, validationEnd } from './modules/listenerCallbacks';\nimport { buildSurvey }      from './modules/buildSurvey/buildSurvey';\nimport { populateAnswers }  from './modules/buildSurvey/populateAnswers';\nimport { destroy }          from './modules/destroy';\n\nimport Form from 'formjs-plugin';\n\nimport './index.scss';\n\nconst version = '3.0.0';\n\nclass Survey extends Form {\n\n    constructor( formEl, optionsObj = {} ){\n        if( !optionsObj.url || typeof optionsObj.url !== 'string' ){\n            throw new Error('\"options.url\" is missing or not a string!');\n        }\n\n        const options = mergeObjects( {}, Survey.prototype.options, optionsObj );\n\n        if( !webStorage().isAvailable ){\n            options.useWebStorage = false;\n        }\n\n        // CREATE FORM INSTANCE FOR SURVEY\n        super( formEl, options );\n        const self = this;\n        self.internals = internals;\n\n        self.formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforebegin', self.options.templates.loading );\n\n        // CREATE SURVEY\n        const retrieveSurvey = ajaxCall(self.options.url, self.options.initAjaxOptions)\n            .then(response => {\n                if( response.status.toLowerCase() !== 'success' ){\n                    return Promise.reject(response);\n                }\n                return new Promise(resolve => {\n                    self.data = response.data;\n                    if( self.data.questions && self.data.questions.length > 0 ){\n                        buildSurvey(self.data, self.formEl, self.options, self.internals);\n                        if( self.options.useWebStorage ){\n                            populateAnswers(self.formEl, self.internals);\n                        }\n                        deepFreeze(self.data);\n                        self.formEl.addEventListener('fjs.field:validation', validationEnd);\n                        self.formEl.addEventListener('fjs.form:submit', submit);\n                        super.init().then(() => {\n                            self.isInitialized = true;\n                            self.formEl.closest('[data-surveyjs-container]').classList.add('surveyjs-init-success');\n                            // ON super.init() FOCUS IS SET ON FIELD [data-required-from] WHEN VALIDATING\n                            /* const activeEl = document.activeElement;\n                            const formSelector = 'form[name=\"'+ self.formEl.name +'\"]';\n                            if( activeEl.matches(formSelector + ' [data-required-from]') ){\n                                activeEl.blur();\n                            } */\n                            resolve(response);\n                        });\n                    } else {\n                        resolve(response);\n                    }\n                });\n            })\n            .finally(() => {\n                const loadingBoxEl = self.formEl.querySelector('[data-surveyjs-loading]');\n                if( loadingBoxEl ){\n                    loadingBoxEl.parentNode.removeChild(loadingBoxEl);\n                }\n            });\n        \n        dispatchCustomEvent( self.formEl, customEvents.init, retrieveSurvey );\n    }\n\n    destroy(){\n        destroy(this.formEl);\n        super.destroy();\n    }\n\n    static setOptions( optionsObj ){\n        Survey.prototype.options = mergeObjects({}, Survey.prototype.options, optionsObj);\n    }\n\n}\n\nSurvey.prototype.isInitialized = false;\nSurvey.prototype.options = options;\nSurvey.prototype.version = version;\n\nexport default Survey;\n"],"names":["ajaxCall","timeoutTimer","url","location","href","options","headers","Headers","timeout","controller","AbortController","signal","window","setTimeout","abort","fetch","then","response","ok","json","Promise","reject","error","clearTimeout","arrayMove","array","from","to","splice","customEvents","init","deepFreeze","obj","Object","getOwnPropertyNames","forEach","name","prop","_typeof","freeze","isPlainObject","object","prototype","toString","call","mergeObjects","out","Array","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","data","eventOptions","bubbles","eventObj","Event","dispatchEvent","fieldsStringSelectorSurvey","getQuestionId","fieldEl","containerEl","closest","getAttribute","isEmptyObject","length","replaceObjectKeysInString","stringHTML","reduce","accString","regexStr","RegExp","replace","sortList","list","sort","a","b","toKebabCase","string","useAllCaps","newString","trim","match","p1","p2","p3","p4","p5","p6","toLowerCase","toUpperCase","webStorage","isAvailable","mod","localStorage","setItem","removeItem","e","checkLocalStorage","Storage","setObject","value","JSON","stringify","getObject","this","getItem","parse","getQuestionObject","questionId","questions","qLength","q","question","id","optionsUtils","formOptions","getFormData","formEl","instance","formjs","fieldsList","querySelectorAll","answers","fieldNameCheck","fieldTypeCheck","type","matches","qaObj","answer","checkedEl","fieldOptions","questionContainer","querySelector","related","el","cssClasses","checkbox","file","label","radio","wrapper","fieldErrorFeedback","initAjaxOptions","cache","credentials","method","mode","redirect","messages","maxChoice","errorMessage","errorMessageMultiChoice","templates","input","loading","select","textarea","errors","nested","useWebStorage","internals","storageArray","storageName","submit","event","self","target","sessionStorage","getAnswerIndexInWebStorage","fieldName","multiChoiceValue","wsSurvey","wsSurveyLength","ws","lsItem","validationEnd","questionObj","errorsList","rule","ruleIndex","indexOf","errorsWrapper","errorsHTML","accHTML","innerHTML","fieldValue","isRequiredFrom","isMultiChoice","isRequireMore","reqMoreEl","document","inArrayPos","inArrayRequireMorePos","checked","oldFieldNamePos","elReqFromEl","required","validateField","generateOptionTags","optionsList","optionsHTML","opt","getAttributesStringHTML","answerObj","answerCode","isRequired","excludedAttrs","test","getTemplates","answerType","field","generateAnswers","answersList","extraData","allAnswersHTML","previousType","index","answerHTML","checks","surveyId","answerData","questionNumber","wrapperClasses","fieldAttributes","fieldClasses","addMoreName","labelString","labelClasses","relatedFieldHTML","relatedType","relatedIsSelect","relatedObj","requiredFrom","answerDataRelated","optionsHtml","answerTypeForTemplate","nestedFieldsHTML","generateQAcode","accCode","external","qaHtml","answersHTML","checksMin","checksMax","maxChoiceText","questionData","questionText","buildSurvey","formName","qaHtmlAll","insertAdjacentHTML","extQuestion","externalCont","setAttribute","externalField","fieldProps","answerCont","populateAnswers","WS","surveyContEl","item","fieldFirst","isRadioOrCheckbox","destroy","removeEventListener","version","Survey","optionsObj","Error","retrieveSurvey","status","resolve","addEventListener","isInitialized","classList","add","loadingBoxEl","parentNode","removeChild","Form"],"mappings":";s/DACO,IAAMA,EAAW,eAEhBC,EAFkBC,yDAAMC,SAASC,KAAMC,yDAAU,MAIrDA,EAAQC,QAAU,IAAIC,QAASF,EAAQC,SAGlCD,EAAQG,QAAU,EAAI,KACjBC,EAAa,IAAIC,gBACjBC,EAASF,EAAWE,OAE1BN,EAAQM,OAASA,EAEjBV,EAAeW,OAAOC,YAAW,WAC7BJ,EAAWK,UACZT,EAAQG,gBAGRO,MAAOb,EAAKG,GACdW,MAAK,SAAAC,UACGA,EAASC,GAGPD,EAASE,OAFLC,QAAQC,OAAOJ,aAIvB,SAAAK,UACIF,QAAQC,OAAOC,eAEjB,WACDrB,GACAW,OAAOW,aAActB,OC9BxBuB,EAAY,SAACC,EAAOC,EAAMC,UACnCF,EAAMG,OAAOD,EAAI,EAAGF,EAAMG,OAAOF,EAAM,GAAG,IACnCD,GCFEI,EAAe,CACxBC,KAAM,YCDGC,EAAa,SAAbA,EAAaC,UAEtBC,OAAOC,oBAAoBF,GAAKG,SAAQ,SAAAC,OAC9BC,EAAOL,EAAII,GACG,WAAhBE,EAAOD,IAA8B,OAATA,GAC5BN,EAAWM,MAGZJ,OAAOM,OAAOP,ICRZQ,EAAgB,SAAAC,SAC2B,oBAA7CR,OAAOS,UAAUC,SAASC,KAAMH,ICC9BI,EAAe,SAAfA,QAAyBC,yDAAM,UACxCC,MAAMrB,KAAKsB,WAAWC,MAAM,GAAGC,QAAO,SAAAC,WAASA,KAAKhB,SAAQ,SAAAgB,GACxDlB,OAAOmB,KAAKD,GAAKhB,SAAQ,SAAAkB,GACjBN,MAAMO,QAAQH,EAAIE,IAClBP,EAAIO,IAAQP,EAAIO,IAAQ,IAAIE,OAAQJ,EAAIE,GAAKJ,MAAM,IAC5CT,EAAcW,EAAIE,IACzBP,EAAIO,GAAOR,EAAcC,EAAIO,IAAQ,GAAKF,EAAIE,IAG1CN,MAAMO,QAAQR,EAAIO,IAElBP,EAAIO,GAAKG,KAAKL,EAAIE,IAElBP,EAAIO,GAAOF,EAAIE,SAMxBP,GCnBEW,EAAsB,SAAEC,EAAMC,OAAWC,yDAAO,GAAIC,yDAAe,GAC5EA,EAAehB,EAAa,GAAI,CAAEiB,SAAS,GAAQD,OAC7CE,EAAW,IAAIC,MAAML,EAAWE,GACtCE,EAASH,KAAOA,EAChBF,EAAKO,cAAeF,ICNXG,EAA6B,2LCA7BC,EAAgB,SAAAC,OACnBC,EAAcD,EAAQE,QAAQ,6BAC5BD,GAAeA,EAAYE,aAAa,qBAAwB,ICA/DC,EAAgB,SAAA/B,UAClBD,EAAcC,IAAyD,IAA9CR,OAAOC,oBAAoBO,GAAQgC,QCH1DC,EAA4B,SAAC1C,EAAK2C,UACpC1C,OAAOmB,KAAKpB,GAAK4C,QAAO,SAACC,EAAWzC,OACjC0C,EAAW,IAAIC,OAAQ,KAAO3C,EAAO,KAAM,YAC1CyC,EAAUG,QAAQF,EAAU9C,EAAII,MACxCuC,ICJMM,EAAW,SAAEC,UAClBA,EAAK,GAAL,MACAA,EAAKC,MAAK,SAACC,EAAGC,UAAMD,EAAC,KAAWC,EAAC,QAE9BH,GCJEI,EAAc,eAAEC,yDAAS,GAAIC,0DAClCC,EAAYF,EAAOG,OAAOV,QAAQ,sCAAsC,SAACW,EAAOC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,UAChFH,EAAK,IAAMA,GAAME,GAAM,IAAM,IAAMC,GACpCC,wBAEhBV,EAAaC,EAAUU,cAAgBV,GCLrCW,EAAa,eAahBC,EAXoB,eAChBC,EAAM,2BAERC,aAAaC,QAAQF,EAAKA,GAC1BC,aAAaE,WAAWH,IACjB,EACT,MAAMI,UACG,GAIKC,UAEhBN,IAGAO,QAAQlE,UAAUmE,UAAY,SAAUxD,EAAKyD,QACpCN,QAASnD,EAAK0D,KAAKC,UAAUF,KAKtCF,QAAQlE,UAAUuE,UAAY,SAAU5D,OAC9ByD,EAAQI,KAAKC,QAAS9D,UACrByD,GAASC,KAAKK,MAAON,KAI7B,CACHT,YAAaA,IC/BRgB,EAAoB,SAAEzD,EAAM0D,WAE/BC,EAAY3D,EAAK2D,UACjBC,EAAUD,EAAU9C,OAEtBzC,EAAM,GAEFyF,EAAE,EAAGA,EAAED,EAASC,IAAI,KAClBC,EAAWH,EAAUE,MACvBC,EAASC,IAAML,EAAY,CAC3BtF,EAAM0F,gBAKP1F,GCZE4F,EAAe,CACxBC,YAAa,CAETC,YAAa,eACHC,EAASb,KAAKa,OACdC,EAAWD,EAAOE,OAClBC,EAAanF,MAAMrB,KAAMqG,EAAOzD,QAAQ,6BAA6B6D,iBAAiBjE,IACtFlC,EAAM,CACJoG,QAAS,GACTT,GAAIK,EAASpE,KAAK+D,IAEtBU,EAAiB,GACjBC,EAAiB,UAErBJ,EAAW/F,SAAQ,SAAAiC,OACTmE,EAAOnE,EAAQmE,KACfnG,EAAOgC,EAAQhC,QAIhBA,IAASiG,GAAkBE,IAASD,GAEpClE,EAAQoE,QAAQ,0BACjBH,EAAiBjG,EACjBkG,EAAiBC,OAQfjB,EAAanD,EAAcC,GAC3BqE,EAAQ,CACNf,SAAUJ,EACVoB,OAAQ,CACJ5B,MAAO1C,EAAQ0C,OAAS,SAOhC1C,EAAQoE,QAAQ,yBACD,KAAflB,IACA9C,EAAe6C,EAAkBW,EAASpE,KAAM0D,QAGvC,UAATiB,EAAkB,KAEZI,GADcvE,EAAQE,QAAQ,QAAUyD,EAAS3D,EAAQE,QAAQ0D,EAAS3H,QAAQuI,aAAaC,oBACvEC,cAAc,UAAW1G,EAAM,cAE7DqG,EAAMC,OAAO5B,MAAS6B,GAAaA,EAAU7B,OAAU,GAGnD6B,GAAaA,EAAUH,QAAQ,yBAC/BC,EAAMC,OAAOK,QAAUhB,EAAOe,cAAc,yBAA0BH,EAAUhB,GAAI,MAAMb,OAIrF,aAATyB,GAAuBnE,EAAQoE,QAAQ,mBACvCC,EAAMC,OAAO5B,MAAQ,GACrB/D,MAAMrB,KAAKqG,EAAOI,iBAAiB,UAAW/F,EAAM,eAAeD,SAAQ,SAAA6G,GACvEP,EAAMC,OAAO5B,MAAMtD,KAAMwF,EAAGlC,WAIpC9E,EAAIoG,QAAQ5E,KAAMiF,QAGfzG,KCvEN3B,EAAU,CACnB4I,WAAY,CACRC,SAAoB,2BACA,eACpBC,KAAoB,oBACpBC,MAAoB,mBACpBC,MAAoB,mBACpBC,QAAS,CACLJ,SAAgB,qBACA,GAChBG,MAAgB,eAGxBE,oBAAwB,EACxB1B,YAAa,CACTC,YAAoBF,EAAaC,YAAYC,aAEjD0B,gBAAiB,CACbC,MAAoB,WACpBC,YAAoB,cACpBpJ,QAAS,gBAC2B,0BACA,oBAEpCqJ,OAAoB,MACpBC,KAAoB,cACpBC,SAAoB,SACpBrJ,QAAoB,GAExBsJ,SAAS,CACLC,UAA2B,cAC3BC,aAA2B,uBAC3BC,wBAA2B,gEAE/BC,UAAW,CACP5I,MAAY,6DAEZ6I,MAAY,yJAEZf,MAAY,8FAEZgB,QAAY,uEAEZ1C,SAAY,sWAWZ2C,OAAY,yJAIZC,SAAY,iIAEZhB,QAAS,SACO,kIAKZiB,OAAY,qFAEZC,OAAY,4MAOZzB,QAAY,iPAWpB0B,eAAwB,GCxFfC,EAAY,CACrBC,aAAc,GACdC,YAAa,UAAYzK,SAASC,KAAO,8CCFtC,SAASyK,EAAQC,OACdC,EAAOD,EAAME,OAAO/C,OAC1B6C,EAAMlH,KAAK5C,MAAK,WACR+J,EAAK1K,QAAQoK,eACbQ,eAAexE,WAAYsE,EAAKL,UAAUE,gBCJ/C,IAAMM,EAA6B,SAAER,EAAWS,OAAWC,yDAAmB,GAE3EC,EAAWJ,eAAehE,UAAWyD,EAAUE,gBAEjDS,UACMC,EAAiBD,EAAS5G,OAExB8G,EAAG,EAAGA,EAAGD,EAAgBC,IAAK,KAC5BC,EAASH,EAASE,MAEpBC,EAAOpJ,OAAS+I,EAAW,IACvBC,GACII,EAAO1E,QAAUsE,kBAIlBG,UAKX,GCjBL,SAASE,EAAeX,OACrB1G,EAAU0G,EAAMlH,KAAKQ,QACrBmG,EAASO,EAAMlH,KAAK2G,OACpBvC,EAAW8C,EAAME,OAAO/C,OAExBX,EAAanD,EAAcC,GAC3BsH,EAAcrE,EAAkBW,EAASpE,KAAM0D,MAGjD9C,EAAckH,UAAuB,KAGrCnB,GAAU/H,cAAckJ,EAAY1B,cAAe,KAC/C2B,EAAa1J,OAAOmB,KAAKmH,MACzBA,EAAOqB,KAAM,KAEPC,EAAYF,EAAWG,QAAQ,QACrCH,EAAanK,EAAUmK,EAAYE,EAAW,OAE5CE,EAAgB3H,EAAQE,QAAS0D,EAAS3H,QAAQuI,aAAaC,mBAAoBC,cAAc,0BACjGkD,EAAaL,EAAW/G,QAAO,SAACqH,EAAS7J,OACrC4H,EAAe0B,EAAY1B,aAAa5H,IAAS,UAChD6J,GAAWjC,EAAehC,EAAS3H,QAAQ6J,UAAU5I,MAAM0D,QAAQ,mBAAoBgF,GAAgB,MAC/G,IAEH+B,EAAcG,UAAYF,KAI1BhE,EAAS3H,QAAQoK,gBAAkBrG,EAAQoE,QAAQ,0BAA2B,KACxEkC,EAAY1C,EAAS0C,UAErByB,EAAa/H,EAAQ0C,MACrBsF,EAAiBhI,EAAQoE,QAAQ,wBACjC6D,EAAgBjI,EAAQoE,QAAQ,iBAChC8D,EAAgBlI,EAAQoE,QAAQ,uBAChC+D,EAAYH,EAAiBI,SAAS1D,cAAc1E,EAAQG,aAAa,uBAAyB,KAElGkI,EAAavB,EAA4BR,EAAWtG,EAAQhC,OAAOiK,GAAgBF,GACnFO,EAAwBxB,EAA4BR,EAAWtG,EAAQhC,KAAO,SAEhFuI,EAAeD,EAAUC,gBAExB2B,GAAkBF,IAA6C,IAA3BM,GACrC/B,EAAa/I,OAAO8K,EAAuB,IAG3B,IAAhBD,EACIJ,EACKjI,EAAQuI,SAAWhC,EAAa8B,GAAY3F,QAAUqF,EAKvDxB,EAAanH,KAAM,CAAEpB,KAAMgC,EAAQhC,KAAM0E,MAAOqF,IAHhDxB,EAAa/I,OAAO6K,EAAY,GAMjB,KAAfN,EACAxB,EAAa8B,GAAY3F,MAAQqF,EAEjCxB,EAAa/I,OAAO6K,EAAY,WAIrB,KAAfN,EAAmB,IACfC,GAAiC,KAAfD,EAAmB,KAC/BS,EAAkB1B,EAA4BR,EAAW6B,EAAUnK,OAChD,IAArBwK,GACAjC,EAAa/I,OAAOgL,EAAiB,GAEzCjC,EAAanH,KAAM,CAAEpB,KAAMmK,EAAUnK,KAAM0E,MAAOyF,EAAUzF,WAEhE6D,EAAanH,KAAM,CAAEpB,KAAMgC,EAAQhC,KAAM0E,MAAOqF,IAC5CG,EAAe,KACTO,EAAczI,EAAQE,QAAQ,QAAQwE,cAAe,yBAA2B1E,EAAQuD,GAAK,MACnGgD,EAAanH,KAAM,CAAEpB,KAAMyK,EAAYzK,KAAM0E,MAAO+F,EAAY/F,SAK5EmE,eAAepE,UAAW6D,EAAUE,YAAaD,GAIjDe,EAAYoB,WAAa1I,EAAQ0I,WACjC1I,EAAQ0I,UAAW,EACnB9E,EAAS+E,cAAc3I,ICxFxB,IAAM4I,EAAqB,eAAEC,yDAAc,UAEvChI,EAAUgI,GAAcrI,QAAO,SAACsI,EAAaC,UACzCD,2BAAiCC,EAAIrG,mBAAUqG,EAAI/D,qBAC3D,KCJMgE,EAA0B,SAAEC,EAAWC,EAAYC,OACtDC,EAAgB,CAAC,OAAQ,KAAM,QAAS,SAAU,UAAW,QAE/D,sBAAsBC,KAAKJ,EAAU9E,OACrCiF,EAAchK,KAAK,OAAQ,aAG3B+B,EAAS,UAEbtD,OAAOmB,KAAKiK,GACPnK,QAAO,SAAAd,UAAyC,IAAjCoL,EAAc1B,QAAQ1J,MACrCD,SAAQ,SAAAC,GACLmD,cAAcnD,eAASiL,EAAUjL,WAGrCiL,EAAUzJ,MACV3B,OAAOmB,KAAKiK,EAAUzJ,MAAMzB,SAAQ,SAAAC,GAChCmD,mBAAmBD,EAAYlD,gBAAUiL,EAAUzJ,KAAKxB,WAI5DmL,IACAhI,GAAU,aAGV8H,EAAUtE,UACVxD,GAAU,uBAGdA,kBAAkB+H,QAEJ5H,QCjCLgI,EAAe,SAAEC,EAAYzD,SAC/B,CACH0D,MAAO1D,EAAUyD,IAAezD,EAAUC,MAC1Cf,MAAO,oCAAoCqE,KAAKE,GAAczD,EAAUd,MAAQ,GAChFE,QAASY,EAAUZ,QAAQqE,IAAezD,EAAUZ,kBCC/CuE,EAAkB,SAAlBA,EAAoBC,EAAaC,EAAW1N,OAEjD2N,EAAiB,GACjBC,EAAe,UAEnBhJ,EAAU6I,GAAc3L,SAAQ,SAACuG,EAAQwF,OAEjCC,EAIER,EAA6B,WAAhBjF,EAAOH,KAAoB,SAAWG,EAAOH,QAE7C,WAAfoF,GAA2BM,IAAiBN,GAEhDM,EAAeN,EAEXI,EAAUrG,SAAS0G,SACnB1F,EAAS7F,EAAa,GAAI6F,EAAQ,CAAC9E,KAAK,CAACwK,OAAOL,EAAUrG,SAAS0G,eAGjEd,YAAgBK,cAAcI,EAAUM,qBAAYN,EAAUrG,SAASC,eAAqB,WAAfgG,EAA2BO,EAAQ,EAAKxF,EAAOf,IAC5H2G,EAAa,CACfC,eAAgBR,EAAUrG,SAASwG,MAAQ,EAC3CM,eAAgBnO,EAAQ4I,WAAWK,QAAQqE,IAAetN,EAAQ4I,WAAWK,gBAC7EmF,gBAAiBrB,EAAyB1E,EAAQ4E,EAAYS,EAAUrG,SAAS6F,YACjFmB,aAAcrO,EAAQ4I,WAAW0E,IAAetN,EAAQ4I,mBAExD0E,WAAAA,EACAL,WAAAA,EACAqB,YAAa,GAEbC,YAAalG,EAAOU,OAAS,GAC7ByF,aAAcxO,EAAQ4I,WAAWG,OAGjC0F,EAAmB,MACnBpG,EAAOK,QAAS,KACVgG,EAAcrG,EAAOK,QAAQR,MAAQ,SACrCyG,EAAkC,WAAhBD,EAClBE,EAAaD,EAAkBnM,EAAa,GAAI6F,GAAUA,EAAOK,QAEvEkG,EAAW1G,KAAOyG,EAAkB,SAAWD,EAC/CE,EAAWtH,GAAK,GAChBsH,EAAWrL,KAAOf,EAAa,GAAIoM,EAAWrL,KAAM,CAACsL,aAAa,IAAI5B,WAC/D2B,EAAWlG,YAEZoG,EAAoB,CACtBV,gBAAiBrB,EAAwB6B,EAAY,IAAI,GACzDtB,WAAYoB,EACZJ,YAAa,QACbD,aAAcM,EAAkB3O,EAAQ4I,WAAWoB,OAAUhK,EAAQ4I,WAAW8F,IAAgB1O,EAAQ4I,uBAG5G6F,EAAmBzO,EAAQ6J,UAAU6E,IAAgB1O,EAAQ6J,UAAUC,MACnE6E,EAAiB,KACXI,EAAcpC,EAAoBtE,EAAOK,SAC/C+F,EAAmBA,EAAiB9J,QAAQ,kBAAmBoK,GAGnEN,EAAmBpK,EAA0ByK,EAAmBL,OAK9DO,EAAwB3G,EAAOK,QAAU,UAAaL,EAAO8B,OAAS,SAAWmD,EACjFzD,EAAYwD,EAAc2B,EAAuBhP,EAAQ6J,WAE3DoF,EAAmB,GACnB5G,EAAO8B,SACP8E,EAAmBzB,EAAiBnF,EAAO8B,OAAQuD,EAAW1N,QAG9D+O,EAAc,GACC,WAAfzB,IACAyB,EAAcpC,EAAoBc,IAGtCK,EAAajE,EAAUZ,QACNtE,QAAQ,uBAAwB8J,GAChC9J,QAAQ,oBAAqBkF,EAAU0D,OACvC5I,QAAQ,kBAAmBoK,GAC3BpK,QAAQ,oBAAqBkF,EAAUd,OACvCpE,QAAQ,uBAAwBsK,GACjDtB,GAAkBtJ,EAA0B4J,EAAYH,OAIrDH,GC1FEuB,EAAiB,SAAEhI,EAAW8G,EAAUhO,UAE1C4E,EAAUsC,GAAY3C,QAAO,SAAC4K,EAAS9D,EAAawC,MACnDxC,EAAY+D,gBAAmBD,MAE/BE,EAASrP,EAAQ6J,UAAUxC,SACzBJ,EAAaoE,EAAY/D,GACzB4G,EAAiBL,EAAQ,EACzBH,EAAY,CACdM,SAAAA,EACA3G,SAAU,CACNC,GAAIL,EACJ4G,MAAAA,EACAX,aAAc7B,EAAYoB,WAI9BpB,EAAY0C,SACZL,EAAUrG,SAAS0G,OAAS1C,EAAY0C,YAGxCuB,EAAc9B,EAAiBnC,EAAYtD,QAAS2F,EAAW1N,GAE7D0J,EAAY2B,EAAY0C,OAASrH,KAAKK,MAAMsE,EAAY0C,QAAU,GAClEwB,EAAY7F,EAAU,IAAM,GAC5B8F,EAAY9F,EAAU,IAAM,GAC5B+F,EAAgB/F,GAAa1J,EAAQyJ,SAASC,UAAY,KAAM8F,EAAW,IAAKxP,EAAQyJ,SAASC,UAAW,IAAM,GAElHgG,EAAe,CACjBzI,WAAAA,EACAiH,eAAAA,EACAyB,aAActE,EAAYhE,SAAWoI,EACrCH,YAAAA,EACA3D,WAAY3L,EAAQkJ,mBAAqBlJ,EAAQ6J,UAAUZ,QAAQiB,OAAS,OAEhFmF,EAAShL,EAA0BqL,EAAcL,GAE7CrP,EAAQkJ,mBAAoB,KACxBS,EAA6B,KAAdD,EAAmB1J,EAAQyJ,SAASG,wBAA2ByB,EAAY1B,cAAgB3J,EAAQyJ,SAASE,aAG3HxH,EAAcwH,KACdA,EAAe,IAGnB0F,EAASA,EAAO1K,QAAS,sBAAuBgF,UAG7CwF,EAAW9K,EAA0B,CAACkL,UAAAA,EAAWC,UAAAA,GAAYH,KACrE,KClDMO,EAAc,SAAErM,EAAMmE,EAAQ1H,EAASqK,OAE1CwF,EAAWnI,EAAOxD,aAAa,SAAW,GAGhDmG,EAAUE,YAAcF,EAAUE,YAAY5F,QAAS,eAAgBpB,EAAK+D,IAC5E+C,EAAUE,YAAcF,EAAUE,YAAY5F,QAAS,qBAAsBkL,OAEvEC,EAAYZ,EAAgB3L,EAAK2D,UAAW3D,EAAK+D,GAAItH,GAC3D0H,EAAOe,cAAc,wBAAwBsH,mBAAoB,YAAaD,OAGxEE,EAAczM,EAAK2D,UAAUrE,QAAO,SAAAlB,UAAOA,EAAIyN,YAAU,MAC3DY,EAAa,KACPC,EAAevI,EAAOzD,QAAQ,6BAA6BwE,cAAc,4BAE/EwH,EAAaC,aAAa,mBAAoBF,EAAY1I,IAC1D0I,EAAYjI,QAAQjG,SAAQ,SAACuG,EAAQwF,OAC3BsC,EAAgBF,EAAanI,iBAAiB,gBAAgB+F,GAC9DuC,EAAa,CACX9I,aAAOe,EAAOH,iBAAQ3E,EAAK+D,eAAM0I,EAAY1I,eAAMe,EAAOf,IAC1DY,KAAMG,EAAOH,KACbzB,MAAO4B,EAAO5B,MACdgG,WAAYuD,EAAYvD,UAGhC7K,OAAOmB,KAAKqN,GAAYtO,SAAQ,SAAAC,GAC5BoO,EAAcpO,GAAQqO,EAAWrO,UAG/BsO,EAAaF,EAAclM,QAAQ,iBACzCoM,EAAW5H,cAAc,SAASyH,aAAa,MAAOE,EAAW9I,IACjE+I,EAAW5H,cAAc,gBAAgBoD,UAAYxD,EAAOU,MAC5DkH,EAAaxH,cAAc,mBAAmBoD,UAAYmE,EAAY3I,cCnCrEiJ,EAAkB,SAAE5I,EAAQ2C,OAE/BkG,EAAK3F,eAAehE,UAAWyD,EAAUE,gBAC3CgG,EAAI,KACEC,EAAe9I,EAAOzD,QAAQ,6BACpCoG,EAAUC,aAAeiG,EACzBA,EAAGzO,SAAQ,SAAA2O,OACDC,EAAaF,EAAa/H,cAAe,UAAYgI,EAAK1O,KAAO,MACjE4O,EAAoBD,EAAWvI,QAAQ,qCACvCpE,EAAY4M,EAAoBH,EAAa/H,cAAc,UAAYgI,EAAK1O,KAAO,aAAe0O,EAAKhK,MAAQ,MAAQiK,EAEzHC,EACA5M,EAAQuI,SAAU,EAElBvI,EAAQ0C,MAAQgK,EAAKhK,WCZxBmK,EAAU,SAAAlJ,GAEnBA,EAAOmJ,oBAAoB,uBAAwBzF,GACnD1D,EAAOmJ,oBAAoB,kBAAmBrG,ICO5CsG,EAAU,QAEVC,uDAEWrJ,WAAQsJ,yDAAa,iBACzBA,EAAWnR,KAAiC,iBAAnBmR,EAAWnR,UAC/B,IAAIoR,MAAM,iDAGdjR,EAAUwC,EAAc,GAAIuO,EAAO1O,UAAUrC,QAASgR,GAEvDjL,IAAaC,cACdhG,EAAQoK,eAAgB,OAKtBM,kBADChD,EAAQ1H,IAEf0K,EAAKL,UAAYA,EAEjBK,EAAKhD,OAAOe,cAAc,wBAAwBsH,mBAAoB,cAAerF,EAAK1K,QAAQ6J,UAAUE,aAGtGmH,EAAiBvR,EAAS+K,EAAK1K,QAAQH,IAAK6K,EAAK1K,QAAQmJ,iBAC1DxI,MAAK,SAAAC,SACoC,YAAlCA,EAASuQ,OAAOtL,cACT9E,QAAQC,OAAOJ,GAEnB,IAAIG,SAAQ,SAAAqQ,GACf1G,EAAKnH,KAAO3C,EAAS2C,KACjBmH,EAAKnH,KAAK2D,WAAawD,EAAKnH,KAAK2D,UAAU9C,OAAS,GACpDwL,EAAYlF,EAAKnH,KAAMmH,EAAKhD,OAAQgD,EAAK1K,QAAS0K,EAAKL,WACnDK,EAAK1K,QAAQoK,eACbkG,EAAgB5F,EAAKhD,OAAQgD,EAAKL,WAEtC3I,EAAWgJ,EAAKnH,MAChBmH,EAAKhD,OAAO2J,iBAAiB,uBAAwBjG,GACrDV,EAAKhD,OAAO2J,iBAAiB,kBAAmB7G,+CACnC7J,MAAK,WACd+J,EAAK4G,eAAgB,EACrB5G,EAAKhD,OAAOzD,QAAQ,6BAA6BsN,UAAUC,IAAI,yBAO/DJ,EAAQxQ,OAGZwQ,EAAQxQ,kBAIX,eACC6Q,EAAe/G,EAAKhD,OAAOe,cAAc,2BAC3CgJ,GACAA,EAAaC,WAAWC,YAAYF,aAIhDrO,EAAqBsH,EAAKhD,OAAQlG,EAAaC,KAAMyP,iDAIrDN,EAAQ/J,KAAKa,yFAIEsJ,GACfD,EAAO1O,UAAUrC,QAAUwC,EAAa,GAAIuO,EAAO1O,UAAUrC,QAASgR,UApEzDY,IAyErBb,EAAO1O,UAAUiP,eAAgB,EACjCP,EAAO1O,UAAUrC,QAAUA,EAC3B+Q,EAAO1O,UAAUyO,QAAUA"}