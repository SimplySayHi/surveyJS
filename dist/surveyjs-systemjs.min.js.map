{"version":3,"file":"surveyjs-systemjs.min.js","sources":["../src/modules/version.js","../src/modules/helpers/ajaxCall.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/deepFreeze.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/getQuestionId.js","../src/modules/helpers/isEmptyObject.js","../src/modules/helpers/replaceObjectKeysInString.js","../src/modules/helpers/sortList.js","../src/modules/helpers/webStorage.js","../src/modules/utils/getQuestionObject.js","../src/modules/options.js","../src/modules/optionsUtils.js","../src/modules/helpers/fieldsStringSelectorSurvey.js","../src/modules/internals.js","../src/modules/listenerCallbacks/submit.js","../src/modules/utils/getAnswerIndex.js","../src/modules/listenerCallbacks/validationEnd.js","../src/modules/helpers/arrayMove.js","../src/modules/buildSurvey/generateQAcodeUtils/generateOptionTags.js","../src/modules/buildSurvey/generateQAcodeUtils/getAttributesStringHTML.js","../src/modules/helpers/toKebabCase.js","../src/modules/buildSurvey/generateQAcodeUtils/generateAnswers.js","../src/modules/buildSurvey/generateQAcodeUtils/getTemplates.js","../src/modules/buildSurvey/generateQAcode.js","../src/modules/buildSurvey/buildSurvey.js","../src/modules/buildSurvey/populateAnswers.js","../src/index.js","../src/modules/destroy.js"],"sourcesContent":["\nexport const version = '4.0.0';\n","\nexport const ajaxCall = ( url = location.href, options = {} ) => {\n\n    let timeoutTimer;\n\n    options.headers = new Headers( options.headers );\n\n    /* SET AbortController FOR timeout */\n    if ( options.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        options.signal = signal;\n\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, options.timeout);\n    }\n\n    return fetch( url, options )\n        .then(response => {\n            if( !response.ok ){\n                throw new Error(response.statusText);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            throw new Error(error.message);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n        });\n        \n}\n","\nexport const customEvents = {\n    destroy: 'sjs:destroy',\n    init: 'sjs:init'\n}\n","\nexport const deepFreeze = obj => {\n\n    Object.getOwnPropertyNames(obj).forEach(name => {\n        const prop = obj[name];\n        if( typeof prop === 'object' && prop !== null ){\n            deepFreeze(prop);\n        }\n    });\n    return Object.freeze(obj);\n    \n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, eventOptions ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new CustomEvent(eventName, eventOptions);\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const getQuestionId = fieldEl => {\n    const containerEl = fieldEl.closest('[data-question-id]');\n    return (containerEl && containerEl.getAttribute('data-question-id')) || '';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const isEmptyObject = object => {\n    return isPlainObject(object) && Object.getOwnPropertyNames(object).length === 0;\n}\n","\nexport const replaceObjectKeysInString = (obj, stringHTML) => {\n    return Object.keys(obj).reduce((accString, name) => {\n        const regexStr = new RegExp( '{{' + name + '}}', 'g' );\n        return accString.replace(regexStr, obj[name]);\n    }, stringHTML);\n}\n","\nexport const sortList = ( list ) => {\n    if( list[0]['sort'] ){\n        list.sort((a, b) => a['sort'] > b['sort']);\n    }\n    return list;\n}\n","\nexport const webStorage = () => {\n\n    const checkLocalStorage = () => {\n        const mod = 'check_storage';\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    const isAvailable = checkLocalStorage();\n\n    if( isAvailable ){\n        // setObject METHOD FOR HTML STORAGE -> EG: localStorage.setObject( name, JSobj )\n        // TO STORE A JS OBJECT ( AS JSON STRING ) INSIDE THE STORAGE\n        Storage.prototype.setObject = function( key, value ) {\n            this.setItem( key, JSON.stringify(value) );\n        }\n\n        // getObject METHOD FOR HTML STORAGE -> EG: localStorage.getObject( name )\n        // RETURN THE DATA ( STORED AS JSON STRING ) AS JS OBJECT\n        Storage.prototype.getObject = function( key ) {\n            const value = this.getItem( key );\n            return value && JSON.parse( value );\n        }\n    }\n\n    return {\n        isAvailable: isAvailable\n    }\n\n}\n","\nexport const getQuestionObject = ( questions, questionId ) => {\n\n    const qLength = questions.length;\n\n    let obj = {};\n    \n    for(let q=0; q<qLength; q++){\n        const question = questions[q];\n        if( question.id == questionId ){\n            obj = question;\n            break;\n        }\n    }\n\n    return obj;\n\n}","\nimport { optionsUtils } from './optionsUtils';\n\nexport const options = {\n    cssClasses: {\n        checkbox:           'form-check-input',\n        field:              'form-control',\n        file:               'form-control-file',\n        label:              'form-check-label',\n        radio:              'form-check-input',\n        wrapper: {\n            checkbox:       'form-check',\n            field:          '',\n            radio:          'form-check'\n        }\n    },\n    formOptions: {\n        getFormData:        optionsUtils.formOptions.getFormData\n    },\n    initAjaxOptions: {\n        cache:              'no-store',\n        credentials:        'same-origin',\n        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept':       'application/json'\n        },\n        method:             'GET',\n        mode:               'same-origin',\n        redirect:           'follow',\n        timeout:            0\n    },\n    messages:{\n        maxChoice:          'answers max',\n        error:              'Answer is necessary.',\n        errorMultiChoice:   'You must choose from {{checksMin}} to {{checksMax}} answers.'\n    },\n    showErrorMessage:       true,\n    templates: {\n        error:              '<div class=\"surveyjs-error-message\">{{errorMessage}}</div>',\n        \n        input:              '<input {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-input surveyjs-{{answerType}} {{fieldClasses}}\" />',\n\n        label:              '<label for=\"{{answerCode}}\" class=\"surveyjs-label {{labelClasses}}\">{{labelString}}</label>',\n\n        loading:            '<div class=\"surveyjs-loading\" data-surveyjs-loading>Loading...</div>',\n        \n        select:             '<select {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-select {{fieldClasses}}\">'+\n                                '{{optionsHtml}}'+\n                            '</select>',\n        \n        textarea:           '<textarea {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}\" class=\"surveyjs-textarea {{fieldClasses}}\"></textarea>',\n\n        wrapper: {\n            field:          '<div class=\"surveyjs-field-wrapper surveyjs-{{answerType}}-wrapper {{wrapperClasses}}\">'+\n                                '{{fieldTemplate}}'+\n                                '{{labelTemplate}}'+\n                            '</div>',\n            \n            nested:         '<div class=\"surveyjs-field-wrapper surveyjs-nested-wrapper\">'+\n                                '{{labelTemplate}}'+\n                                '<div class=\"surveyjs-nested-inner\">'+\n                                    '{{nestedFieldsHTML}}'+\n                                '</div>'+\n                            '</div>',\n\n            question:       '<div class=\"surveyjs-question-wrapper\" data-question-id=\"{{questionId}}\" data-formjs-question>'+\n                                '<div class=\"surveyjs-question-text\">{{questionText}}</div>'+\n                                '<div class=\"surveyjs-answers-wrapper\">'+\n                                    '{{answersHTML}}'+\n                                '</div>'+\n                                '<div class=\"surveyjs-errors-wrapper\" data-surveyjs-errors>{{errorTemplates}}</div>'+\n                            '</div>',\n            \n            related:        '<div class=\"surveyjs-field-wrapper surveyjs-related-wrapper input-group\">'+\n                                '<div class=\"input-group-prepend\">'+\n                                    '<div class=\"surveyjs-radio-wrapper input-group-text form-check\">'+\n                                        '{{fieldTemplate}}'+\n                                        '{{labelTemplate}}'+\n                                    '</div>'+\n                                '</div>'+\n                                '{{relatedFieldHTML}}'+\n                            '</div>'\n        }\n    },\n    useWebStorage:          true\n}\n","\nimport { fieldsStringSelectorSurvey, getQuestionId, isEmptyObject } from './helpers';\nimport { getQuestionObject } from './utils/getQuestionObject';\n\nexport const optionsUtils = {\n    formOptions: {\n\n        getFormData: function getFormData_surveyDefault(){\n            const instance = this;\n            const $form = instance.$form;\n            const fieldsList = Array.from( $form.closest('[data-surveyjs-wrapper]').querySelectorAll(fieldsStringSelectorSurvey) );\n            const obj = {\n                    answers: [],\n                    id: instance.data.id\n                };\n            \n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach($field => {\n                const type = $field.type,\n                      name = $field.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !$field.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                // EACH QUESTION HAS ITS OWN OBJECT ( qaObj ) THAT CONTAINS THE RELATED DATA:\n                // question:    THE QUESTION ID ( undefined FOR QUESTIONS WITH ATTRIBUTE data-required-form - will be skipped later )\n                // answer       AN OBJECT THAT CONTAINS THE FOLLOWS:\n                //                  value:      THE ANSWER VALUE\n                //                  related:    IF THE ANSWER IS REQUIRED FROM ANOTHER ANSWER (SEE BELOW)\n                const questionId = getQuestionId($field),\n                      qaObj = {\n                        question: questionId,\n                        answer: {\n                            value: $field.value || ''\n                        }\n                    };\n\n                // A FIELD WITH ATTRIBUTE 'data-required-from' IS MANAGED TOGETHER WITH ITS RELATED FIELD ( WHICH HAS ATTRIBUTE 'data-require-more' )\n                // IF QUESTION ID IS EMPTY -> SKIP THE FIELD ( USEFUL FOR FORM FIELDS OUTSIDE THE SURVEY BODY )\n                if(\n                    $field.matches('[data-required-from]') || \n                    questionId === '' || \n                    isEmptyObject( getQuestionObject(instance.data.questions, questionId) )\n                ){ return; }\n\n                if( type === 'radio' ){\n                    const $container = $field.closest('form') ? $form : $field.closest(instance.options.fieldOptions.questionContainer);\n                    const $checked = $container.querySelector('[name=\"'+ name +'\"]:checked');\n\n                    qaObj.answer.value = ($checked && $checked.value) || '';\n\n                    // FOR RADIO THAT REQUIRE THE USER TO GIVE ONE MORE ANSWER\n                    if( $checked && $checked.matches('[data-require-more]') ){\n                        qaObj.answer.related = $form.querySelector('[data-required-from=\"#'+ $checked.id +'\"]').value;\n                    }\n                }\n\n                if( type === 'checkbox' && $field.matches('[data-checks]') ){\n                    qaObj.answer.value = [];\n                    Array.from($form.querySelectorAll('[name=\"'+ name +'\"]:checked')).forEach($el => {\n                        qaObj.answer.value.push( $el.value );\n                    });\n                }\n                \n                obj.answers.push( qaObj );\n            });\n        \n            return obj;\n        }\n    \n    }\n}\n","\nexport const fieldsStringSelectorSurvey = '[data-surveyjs-form] input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]), [data-surveyjs-form] select, [data-surveyjs-form] textarea, [data-surveyjs-external] [data-field]'\n","\nexport const internals = {\n    storageName: 'Survey_' + location.href + '_{{surveyFormName}}_surveyId[{{surveyId}}]'\n}\n","\nexport function submit( event ){\n    const self = event.target.surveyjs;\n    event.detail.then(() => {\n        if( self.options.useWebStorage ){\n            sessionStorage.removeItem( self.internals.storageName );\n        }\n    });\n}\n","\nexport const getAnswerIndex = ( list, fieldName, multiChoiceValue = '' ) => {\n\n    const listLength = list.length;\n\n    for(let item = 0; item < listLength; item++){\n        const lsItem = list[item];\n        if( lsItem.name === fieldName ){\n            if( multiChoiceValue ){\n                if( lsItem.value !== multiChoiceValue ){\n                    continue;\n                }\n            }\n            return item;\n        }\n    }\n    \n    return -1;\n\n}","\nimport { arrayMove, getQuestionId, isEmptyObject }  from '../helpers';\nimport { getQuestionObject }                        from '../utils/getQuestionObject';\nimport { getAnswerIndex }                           from '../utils/getAnswerIndex';\n\nexport function validationEnd( event ){\n    const $field = event.detail.$field;\n    const errors = event.detail.errors;\n    const instance = $field.closest('form').surveyjs;\n    const options = instance.options;\n    const $errorsWrapper = $field.closest( options.fieldOptions.questionContainer ).querySelector('[data-surveyjs-errors]');\n    \n    const questionId = getQuestionId($field);\n    const questionObj = getQuestionObject(instance.data.questions, questionId);\n\n    // IF IT'S NOT A SURVEY QUESTION -> SKIP\n    if( isEmptyObject(questionObj) ){ return true; }\n\n    // MANAGE MULTIPLE ERROR MESSAGES\n    if( $errorsWrapper && errors && isPlainObject(questionObj.errorMessage) ){\n        let errorsList = Object.keys(errors);\n        if( errors.rule ){\n            // PUT ERROR \"rule\" AS FIRST, SO THAT A GENERIC ERROR IS SHOWN BEFORE ALL OTHERS\n            const ruleIndex = errorsList.indexOf('rule');\n            errorsList = arrayMove(errorsList, ruleIndex, 0);\n        }\n        const errorsHTML = errorsList.reduce((accHTML, name) => {\n            const errorMessage = questionObj.errorMessage[name] || '';\n            return accHTML += errorMessage ? options.templates.error.replace('{{errorMessage}}', errorMessage) : '';\n        }, '');\n\n        $errorsWrapper.innerHTML = errorsHTML;\n    }\n\n    // MANAGE ITEMS IN LOCAL STORAGE ( IF AVAILABLE AND ACTIVE )\n    if( !event.detail.isCheckingForm && options.useWebStorage && !$field.matches('[data-exclude-storage]') ){\n        const storageName = instance.internals.storageName;\n        let storageArray = sessionStorage.getObject( storageName ) || [];\n\n        const name = $field.name;\n        const value = $field.value;\n        const isRequiredFrom = $field.matches('[data-required-from]');\n        const isMultiChoice = $field.matches('[data-checks]');\n        const isRequireMore = $field.matches('[data-require-more]');\n        const $reqMore = isRequiredFrom ? document.querySelector($field.getAttribute('data-required-from')) : null;\n\n        const inArrayRequireMorePos = getAnswerIndex( storageArray, name + '-more' );            \n        if( !isRequireMore && !isRequiredFrom && inArrayRequireMorePos >= 0 ){\n            // WHEN CHECKING A RADIO WITHOUT RELATED ANSWER ( IN A LIST OF RADIOS WITH ONE REQ-MORE ) => REMOVE RELATED ANSWER FROM STORAGE\n            storageArray.splice(inArrayRequireMorePos, 1);\n        }\n\n        const inArrayPos = getAnswerIndex( storageArray, name, (isMultiChoice ? value : false) );\n        if( inArrayPos >= 0 ){\n            // REMOVE ITEM FROM LS\n            storageArray.splice(inArrayPos, 1);\n            if( (isMultiChoice && $field.checked) || (!isMultiChoice && value !== '') ){\n                // ADD ITEM TO LS\n                storageArray.push( { name, value } );\n            }\n        } else if( value !== '' ){\n            if( isRequiredFrom ){\n                const reqMorePos = getAnswerIndex( storageArray, $reqMore.name );\n                if( reqMorePos >= 0 ){\n                    storageArray.splice(reqMorePos, 1);\n                }\n                storageArray.push( { name: $reqMore.name, value: $reqMore.value } );\n            }\n            storageArray.push( { name, value } );\n        }\n\n        sessionStorage.setObject( storageName, storageArray );\n    }\n\n    // BASED ON JSON DATA, FORCE REQUIRED FIELDS TO BE VALIDATED\n    if( questionObj.required && !$field.required && !$field.matches('[data-required-from]') ){\n        $field.required = true;\n        instance.validateField($field);\n    }\n}\n","\nexport const arrayMove = (array, from, to) => {\n    array.splice(to, 0, array.splice(from, 1)[0]);\n    return array;\n}\n","\nimport { sortList } from '../../helpers';\n\nexport const generateOptionTags = ( optionsList = [] ) => {\n\n    return sortList( optionsList ).reduce((optionsHTML, opt) => {\n        return optionsHTML += `<option value=\"${opt.value}\">${opt.label}</option>`;\n    }, '');\n\n}","\nimport { toKebabCase } from '../../helpers';\n\nexport const getAttributesStringHTML = ( answerObj, answerCode, isRequired ) => {\n    const excludedAttrs = ['data', 'id', 'label', 'nested', 'related', 'sort'];\n    \n    if( /^(option|textarea)$/.test(answerObj.type) ){\n        excludedAttrs.push('type', 'value');\n    }\n\n    let string = '';\n\n    Object.keys(answerObj)\n        .filter(name => excludedAttrs.indexOf(name) === -1)\n        .forEach(name => {\n            string += ` ${name}=\"${answerObj[name]}\"`;\n        });\n\n    if( answerObj.data ){\n        Object.keys(answerObj.data).forEach(name => {\n            string += ` data-${toKebabCase(name)}=\"${answerObj.data[name]}\"`;\n        });\n    }\n\n    if( isRequired ){\n        string += ' required';\n    }\n\n    if( answerObj.related ){\n        string += ' data-require-more';\n    }\n\n    string += ` id=\"${answerCode}\"`;\n\n    return string.trim();\n}\n","\nexport const toKebabCase = ( string = '', useAllCaps = false ) => {\n    let newString = string.trim().replace(/(([_ ])([a-z]))|(([a-z])?([A-Z]))/g, (match, p1, p2, p3, p4, p5, p6) => {\n        const concatGroup = p3 ? '-' + p3 : (p5 || '') + '-' + p6;\n        return concatGroup.toLowerCase();\n    } );\n    return useAllCaps ? newString.toUpperCase() : newString;\n}\n","\nimport { mergeObjects, replaceObjectKeysInString, sortList } from '../../helpers';\nimport { generateOptionTags }       from './generateOptionTags';\nimport { getAttributesStringHTML }  from './getAttributesStringHTML';\nimport { getTemplates }             from './getTemplates';\n\nexport const generateAnswers = ( answersList, extraData, options ) => {\n\n    let allAnswersHTML = '';\n    let previousType = '';\n\n    sortList( answersList ).forEach((answer, index) => {\n\n        let answerHTML = '';\n\n        // COLLECT USEFUL DATA\n        // answerType => checkbox, date, email, radio, select, text, textarea, etc...\n        const answerType = answer.type === 'option' ? 'select' : answer.type;\n        \n        if( answerType === 'select' && previousType === answerType ){ return; }\n\n        previousType = answerType;\n\n        if( extraData.question.checks ){\n            answer = mergeObjects({}, answer, {data:{checks:extraData.question.checks}});\n        }\n        \n        const answerCode = `${answerType}-${extraData.surveyId}-${extraData.question.id}-${answerType === 'select' ? (index + 1) : answer.id}`;\n        const answerData = {\n            questionNumber: extraData.question.index + 1,\n            wrapperClasses: options.cssClasses.wrapper[answerType] || options.cssClasses.wrapper.field,\n            fieldAttributes: getAttributesStringHTML( answer, answerCode, extraData.question.isRequired ),\n            fieldClasses: options.cssClasses[answerType] || options.cssClasses.field,\n\n            answerType,\n            answerCode,\n            addMoreName: '',\n\n            labelString: answer.label || '',\n            labelClasses: options.cssClasses.label\n        };\n\n        let relatedFieldHTML = '';\n        if( answer.related ){\n            const relatedType = answer.related.type || 'select';\n            const relatedIsSelect = relatedType === 'select';\n            const relatedObj = relatedIsSelect ? mergeObjects({}, answer) : answer.related;\n\n            relatedObj.type = relatedIsSelect ? 'option' : relatedType;\n            relatedObj.id = '';\n            relatedObj.data = mergeObjects({}, relatedObj.data, {requiredFrom:'#'+answerCode});\n            delete relatedObj.related;\n\n            const answerDataRelated = {\n                fieldAttributes: getAttributesStringHTML(relatedObj, '', false),\n                answerType: relatedType,\n                addMoreName: '-more',\n                fieldClasses: relatedIsSelect ? options.cssClasses.select : (options.cssClasses[relatedType] || options.cssClasses.field)\n            };\n\n            relatedFieldHTML = options.templates[relatedType] || options.templates.input;\n            if( relatedIsSelect ){\n                const optionsHtml = generateOptionTags( answer.related );\n                relatedFieldHTML = relatedFieldHTML.replace('{{optionsHtml}}', optionsHtml);\n            }\n\n            relatedFieldHTML = replaceObjectKeysInString(answerDataRelated, relatedFieldHTML);\n        }\n        \n        // TAKE RIGHT TEMPLATES ( wrapper, field and label ) AND PUT ALL TOGETHER\n        // answerTypeForTemplate => related, input, nested, select, textarea, etc...\n        const answerTypeForTemplate = answer.related ? 'related' : (answer.nested ? 'nested' : answerType);\n        const templates = getTemplates( answerTypeForTemplate, options.templates );\n\n        let nestedFieldsHTML = '';\n        if( answer.nested ){\n            nestedFieldsHTML = generateAnswers( answer.nested, extraData, options );\n        }\n\n        let optionsHtml = '';\n        if( answerType === 'select' ){\n            optionsHtml = generateOptionTags( answersList );\n        }\n\n        answerHTML = templates.wrapper\n                        .replace('{{relatedFieldHTML}}', relatedFieldHTML)\n                        .replace('{{fieldTemplate}}', templates.field)\n                        .replace('{{optionsHtml}}', optionsHtml)\n                        .replace('{{labelTemplate}}', templates.label)\n                        .replace('{{nestedFieldsHTML}}', nestedFieldsHTML);\n        allAnswersHTML += replaceObjectKeysInString(answerData, answerHTML);\n\n    });\n\n    return allAnswersHTML;\n\n}\n","\nexport const getTemplates = ( answerType, templates ) => {\n    return {\n        field: templates[answerType] || templates.input,\n        label: /^(checkbox|nested|radio|related)$/.test(answerType) ? templates.label : '',\n        wrapper: templates.wrapper[answerType] || templates.wrapper.field\n    }\n}\n","\nimport { isPlainObject, replaceObjectKeysInString, sortList } from '../helpers';\nimport { generateAnswers } from './generateQAcodeUtils/generateAnswers';\n\nexport const generateQAcode = ( questions, surveyId, options ) => {\n\n    return sortList( questions ).reduce((accCode, questionObj, index) => {\n        if( questionObj.external ){ return accCode; }\n\n        let questionHTML = options.templates.wrapper.question;\n        const questionId = questionObj.id;\n        const questionNumber = index + 1;\n        const extraData = {\n            surveyId,\n            question: {\n                id: questionId,\n                index,\n                isRequired: !!questionObj.required\n            }\n        };\n\n        if( questionObj.checks ){\n            extraData.question.checks = questionObj.checks;\n        }\n        \n        const answersHTML = generateAnswers( questionObj.answers, extraData, options );\n\n        const maxChoice = questionObj.checks ? JSON.parse(questionObj.checks) : '';\n        const checksMin = maxChoice[0] || '';\n        const checksMax = maxChoice[1] || '';\n        const maxChoiceText = maxChoice && options.messages.maxChoice ? ' ('+ checksMax +' '+ options.messages.maxChoice +')' : '';\n\n        const questionData = {\n            questionId,\n            questionNumber,\n            questionText: questionObj.question + maxChoiceText,\n            answersHTML\n        };\n        questionHTML = replaceObjectKeysInString(questionData, questionHTML);\n\n        if( options.showErrorMessage ){\n            let errorMessage = maxChoice !== '' ? options.messages.errorMultiChoice : (questionObj.errorMessage || options.messages.error);\n\n            // CASE OF MULTIPLE ERROR MESSAGES FROM JSON DATA => DYNAMICALLY MANAGED VIA EVENT LISTENER IN CONSTRUCTOR\n            if( isPlainObject(errorMessage) ){\n                errorMessage = '';\n            }\n\n            questionHTML = questionHTML.replace( /{{errorTemplates}}/g, errorMessage );\n        }\n\n        return accCode += replaceObjectKeysInString({checksMin, checksMax}, questionHTML);\n    }, '');\n\n}\n","\nimport { generateQAcode } from './generateQAcode';\n\nexport const buildSurvey = ( data, $form, options ) => {\n    \n    const qaHtmlAll = generateQAcode( data.questions, data.id, options );\n    $form.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforeend', qaHtmlAll );\n\n    // MANAGE EXTERNAL QUESTION\n    const extQuestions = data.questions.filter(obj => obj.external);\n    if( extQuestions.length > 0 ){\n        const $surveyWrapper = $form.closest('[data-surveyjs-wrapper]');\n        extQuestions.forEach((question, qIndex) => {\n\n            const $externalCont = $surveyWrapper.querySelector('[data-surveyjs-external=\"'+ (qIndex+1) +'\"]');\n            \n            $externalCont.setAttribute('data-question-id', question.id);\n\n            question.answers.forEach((answer, aIndex) => {\n                const $externalField = $externalCont.querySelectorAll('[data-field]')[aIndex];\n                const fieldProps = {\n                        id: `${answer.type}-${data.id}-${question.id}-${answer.id}`,\n                        type: answer.type,\n                        value: answer.value,\n                        required: !!question.required\n                    };\n                \n                Object.keys(fieldProps).forEach(name => {\n                    $externalField[name] = fieldProps[name];\n                });\n\n                const $answerCont = $externalField.closest('[data-answer]');\n                $answerCont.querySelector('label').setAttribute('for', fieldProps.id);\n                $answerCont.querySelector('[data-label]').innerHTML = answer.label;\n                $externalCont.querySelector('[data-question]').innerHTML = question.question;\n            });\n\n        });\n    }\n\n}\n","\nexport const populateAnswers = ( $form, internals ) => {\n\n    const WS = sessionStorage.getObject( internals.storageName );\n    if( WS ){\n        const $surveyCont = $form.closest('[data-surveyjs-wrapper]');\n        WS.forEach(item => {\n            const $fieldFirst = $surveyCont.querySelector( '[name=\"' + item.name + '\"]' ),\n                  isRadioOrCheckbox = $fieldFirst.matches('[type=\"radio\"], [type=\"checkbox\"]'),\n                  $field = ( isRadioOrCheckbox ? $surveyCont.querySelector('[name=\"' + item.name + '\"][value=\"' + item.value + '\"]') : $fieldFirst );\n            \n            if( isRadioOrCheckbox ){\n                $field.checked = true;\n            } else {\n                $field.value = item.value;\n            }\n        });\n    }\n\n}\n","\nimport { version }          from './modules/version';\nimport { ajaxCall, customEvents, deepFreeze, dispatchCustomEvent, mergeObjects, webStorage } from './modules/helpers';\nimport { options }          from './modules/options';\nimport { internals }        from './modules/internals';\nimport { submit, validationEnd } from './modules/listenerCallbacks';\nimport { buildSurvey }      from './modules/buildSurvey/buildSurvey';\nimport { populateAnswers }  from './modules/buildSurvey/populateAnswers';\nimport { destroy }          from './modules/destroy';\n\nimport Form from 'formjs-plugin';\n\nclass Survey extends Form {\n\n    constructor( form, optionsObj = {} ){\n        if( !optionsObj.url || typeof optionsObj.url !== 'string' ){\n            throw new Error('\"options.url\" is missing or not a string!');\n        }\n\n        optionsObj = mergeObjects( {}, Survey.prototype.options, optionsObj );\n\n        if( !webStorage().isAvailable ){\n            optionsObj.useWebStorage = false;\n        }\n\n        // CREATE FORM INSTANCE FOR SURVEY\n        super( form, optionsObj );\n        const self = this;\n        self.internals = internals;\n        const $form = self.$form;\n        optionsObj = self.options;\n        const selfInternals = self.internals;\n\n        $form.surveyjs = self;\n        $form.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforebegin', optionsObj.templates.loading );\n\n        // CREATE SURVEY\n        const retrieveSurvey = ajaxCall(optionsObj.url, optionsObj.initAjaxOptions)\n            .then(response => {\n                if( response.status.toLowerCase() !== 'success' ){\n                    return Promise.reject(response);\n                }\n\n                if( response.data.questions && response.data.questions.length > 0 ){\n                    // REPLACE SURVEY ID AND FORM NAME IN WEB STORAGE NAME\n                    selfInternals.storageName = selfInternals.storageName.replace( /{{surveyId}}/, response.data.id );\n                    selfInternals.storageName = selfInternals.storageName.replace( /{{surveyFormName}}/, ($form.getAttribute('name') || '') );\n\n                    buildSurvey(response.data, $form, optionsObj);\n                    \n                    if( optionsObj.useWebStorage ){\n                        populateAnswers($form, selfInternals);\n                    }\n                    \n                    Object.defineProperty(self, 'data', {\n                        value: deepFreeze(response.data)\n                    });\n                    \n                    $form.addEventListener('fjs.field:validation', validationEnd);\n                    $form.addEventListener('fjs.form:submit', submit);\n                    $form.closest('[data-surveyjs-wrapper]').classList.add('surveyjs-init-success');\n\n                    return super.validateFilledFields().then(fields => {\n                        self.isInitialized = true;\n                        $form.closest('[data-surveyjs-wrapper]').classList.add('surveyjs-init-success');\n                        return response\n                    });\n                }\n                \n                return response;\n            })\n            .finally(() => {\n                const $loadingBox = $form.querySelector('[data-surveyjs-loading]');\n                if( $loadingBox ){\n                    $loadingBox.parentNode.removeChild($loadingBox);\n                }\n            });\n        \n        dispatchCustomEvent( $form, customEvents.init, { detail: retrieveSurvey } );\n    }\n\n    destroy(){\n        super.destroy();\n        destroy(this.$form);\n        dispatchCustomEvent( this.$form, customEvents.destroy );\n    }\n\n    static setOptions( optionsObj ){\n        Survey.prototype.options = mergeObjects({}, Survey.prototype.options, optionsObj);\n    }\n\n}\n\nSurvey.prototype.isInitialized = false;\nSurvey.prototype.options = options;\nSurvey.prototype.version = version;\n\nexport default Survey;\n","\nimport { submit, validationEnd } from './listenerCallbacks';\n\nexport const destroy = $form => {\n\n    $form.removeEventListener('fjs.field:validation', validationEnd);\n    $form.removeEventListener('fjs.form:submit', submit);\n\n    delete $form.surveyjs;\n    \n}\n"],"names":["ajaxCall","timeoutTimer","url","location","href","options","headers","Headers","timeout","controller","AbortController","signal","window","setTimeout","abort","fetch","then","response","ok","Error","statusText","json","error","message","clearTimeout","customEvents","deepFreeze","obj","Object","getOwnPropertyNames","forEach","name","prop","_typeof","freeze","isPlainObject","object","prototype","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","eventOptions","bubbles","eventObj","CustomEvent","dispatchEvent","getQuestionId","fieldEl","containerEl","closest","getAttribute","isEmptyObject","length","replaceObjectKeysInString","stringHTML","reduce","accString","regexStr","RegExp","replace","sortList","list","sort","a","b","webStorage","isAvailable","mod","localStorage","setItem","removeItem","e","checkLocalStorage","Storage","setObject","value","JSON","stringify","getObject","this","getItem","parse","getQuestionObject","questions","questionId","qLength","q","question","id","cssClasses","checkbox","field","file","label","radio","wrapper","formOptions","getFormData","instance","$form","fieldsList","querySelectorAll","answers","data","fieldNameCheck","fieldTypeCheck","$field","type","matches","qaObj","answer","$checked","fieldOptions","questionContainer","querySelector","related","$el","initAjaxOptions","cache","credentials","method","mode","redirect","messages","maxChoice","errorMultiChoice","showErrorMessage","templates","input","loading","select","textarea","nested","useWebStorage","internals","storageName","submit","event","self","target","surveyjs","detail","sessionStorage","getAnswerIndex","fieldName","multiChoiceValue","listLength","item","lsItem","validationEnd","array","to","errors","$errorsWrapper","questionObj","errorMessage","errorsList","rule","ruleIndex","indexOf","splice","errorsHTML","accHTML","innerHTML","isCheckingForm","storageArray","isRequiredFrom","isMultiChoice","isRequireMore","$reqMore","document","inArrayRequireMorePos","inArrayPos","checked","reqMorePos","required","validateField","generateOptionTags","optionsList","optionsHTML","opt","getAttributesStringHTML","answerObj","answerCode","isRequired","excludedAttrs","test","string","useAllCaps","newString","trim","match","p1","p2","p3","p4","p5","p6","toLowerCase","toUpperCase","toKebabCase","generateAnswers","answersList","extraData","allAnswersHTML","previousType","index","answerHTML","answerType","checks","surveyId","answerData","questionNumber","wrapperClasses","fieldAttributes","fieldClasses","addMoreName","labelString","labelClasses","relatedFieldHTML","relatedType","relatedIsSelect","relatedObj","requiredFrom","answerDataRelated","optionsHtml","getTemplates","nestedFieldsHTML","generateQAcode","accCode","external","questionHTML","answersHTML","checksMin","checksMax","maxChoiceText","questionData","questionText","buildSurvey","qaHtmlAll","insertAdjacentHTML","extQuestions","$surveyWrapper","qIndex","$externalCont","setAttribute","aIndex","$externalField","fieldProps","$answerCont","populateAnswers","WS","$surveyCont","$fieldFirst","isRadioOrCheckbox","Survey","form","optionsObj","selfInternals","retrieveSurvey","status","Promise","reject","defineProperty","addEventListener","classList","add","_get","fields","isInitialized","$loadingBox","parentNode","removeChild","removeEventListener","Form","version"],"mappings":"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"}