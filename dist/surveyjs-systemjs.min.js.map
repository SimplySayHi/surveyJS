{"version":3,"file":"surveyjs-systemjs.min.js","sources":["../src/modules/helpers/ajaxCall.js","../src/modules/helpers/customEvents.js","../src/modules/helpers/deepFreeze.js","../src/modules/helpers/isPlainObject.js","../src/modules/helpers/mergeObjects.js","../src/modules/helpers/dispatchCustomEvent.js","../src/modules/helpers/fieldsStringSelectorSurvey.js","../src/modules/helpers/isEmptyObject.js","../src/modules/helpers/isFieldForChangeEvent.js","../src/modules/helpers/replaceObjectKeysInString.js","../src/modules/helpers/sortList.js","../src/modules/helpers/toKebabCase.js","../src/modules/helpers/webStorage.js","../src/modules/utils/getQuestionObject.js","../src/modules/optionsUtils.js","../src/modules/options.js","../src/modules/internals.js","../src/modules/utils/getAnswerIndexInWebStorage.js","../src/modules/listenerCallbacks.js","../src/modules/buildSurvey/generateQAcodeUtils/generateOptionTags.js","../src/modules/buildSurvey/generateQAcodeUtils/getAttributesStringHTML.js","../src/modules/buildSurvey/generateQAcodeUtils/getTemplates.js","../src/modules/buildSurvey/generateQAcodeUtils/generateAnswers.js","../src/modules/buildSurvey/generateQAcode.js","../src/modules/buildSurvey/populateAnswers.js","../src/modules/buildSurvey/buildSurvey.js","../src/modules/destroy.js","../src/index.js"],"sourcesContent":["\nexport const ajaxCall = ( url = location.href, options = {} ) => {\n\n    let timeoutTimer;\n\n    options.headers = new Headers( options.headers );\n\n    /* SET AbortController FOR timeout */\n    if ( options.timeout > 0 ) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        options.signal = signal;\n\n        timeoutTimer = window.setTimeout(() => {\n            controller.abort();\n        }, options.timeout);\n    }\n\n    return fetch( url, options )\n        .then(response => {\n            if( !response.ok ){\n                return Promise.reject(response);\n            }\n            return response.json();\n        })\n        .catch(error => {\n            return Promise.reject(error);\n        })\n        .finally(() => {\n            if( timeoutTimer ){\n                window.clearTimeout( timeoutTimer );\n            }\n        });\n        \n}\n","\nexport const customEvents = {\n    init: 'sjs:init'\n}\n","\nexport const deepFreeze = obj => {\n\n    Object.getOwnPropertyNames(obj).forEach(name => {\n        const prop = obj[name];\n        if( typeof prop === 'object' && prop !== null ){\n            deepFreeze(prop);\n        }\n    });\n    return Object.freeze(obj);\n    \n}\n","\nexport const isPlainObject = object => {\n    return Object.prototype.toString.call( object ) === '[object Object]';\n}\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const mergeObjects = function( out = {} ){\n    Array.from(arguments).slice(1).filter(arg => !!arg).forEach(arg => {\n        Object.keys(arg).forEach(key => {\n            if( Array.isArray(arg[key]) ){\n                out[key] = (out[key] || []).concat( arg[key].slice(0) );\n            } else if( isPlainObject(arg[key]) ){\n                out[key] = mergeObjects((out[key] || {}), arg[key]);\n            } else {\n                // * STRING | NUMBER | BOOLEAN | FUNCTION\n                if( Array.isArray(out[key]) ){\n                    // IF THIS IS ONE OF ABOVE (*) AND THE DESTINATION OBJECT IS AN ARRAY\n                    out[key].push(arg[key]);\n                } else {\n                    out[key] = arg[key];\n                }\n            }\n        });\n    });\n\n    return out;\n}\n","\nimport { mergeObjects } from './mergeObjects';\n\nexport const dispatchCustomEvent = ( elem, eventName, data = {}, eventOptions = {} ) => {\n    eventOptions = mergeObjects({}, { bubbles: true }, eventOptions);\n    const eventObj = new Event(eventName, eventOptions);\n    eventObj.data = data;\n    elem.dispatchEvent( eventObj );\n}\n","\nexport const fieldsStringSelectorSurvey = '[data-surveyjs-form] input:not([type=\"reset\"]):not([type=\"submit\"]):not([type=\"button\"]), [data-surveyjs-form] select, [data-surveyjs-form] textarea, [data-name=\"bind-surveyjs-answer\"]'\n","\nimport { isPlainObject } from './isPlainObject';\n\nexport const isEmptyObject = object => {\n    return isPlainObject(object) && Object.getOwnPropertyNames(object).length === 0;\n}\n","\nexport const isFieldForChangeEvent = fieldEl => {\n    return fieldEl.matches('select, [type=\"radio\"], [type=\"checkbox\"], [type=\"file\"]');\n}\n","\nexport const replaceObjectKeysInString = (obj, stringHTML) => {\n    return Object.keys(obj).reduce((accString, name) => {\n        const regexStr = new RegExp( '{{' + name + '}}', 'g' );\n        return accString.replace(regexStr, obj[name]);\n    }, stringHTML);\n}\n","\nexport const sortList = ( list ) => {\n    if( list[0]['sort'] ){\n        list.sort((a, b) => a['sort'] > b['sort']);\n    }\n    return list;\n}\n","\nexport const toKebabCase = ( string = '', useAllCaps = false ) => {\n    let newString = string.trim().replace(/(([_ ])([a-z]))|(([a-z])?([A-Z]))/g, (match, p1, p2, p3, p4, p5, p6) => {\n        const concatGroup = p3 ? '-' + p3 : (p5 || '') + '-' + p6;\n        return concatGroup.toLowerCase();\n    } );\n    return useAllCaps ? newString.toUpperCase() : newString;\n}\n","\nexport const webStorage = () => {\n\n    const checkLocalStorage = () => {\n        const mod = 'check_storage';\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    const isAvailable = checkLocalStorage();\n\n    if( isAvailable ){\n        // setObject METHOD FOR HTML STORAGE -> EG: localStorage.setObject( name, JSobj )\n        // TO STORE A JS OBJECT ( AS JSON STRING ) INSIDE THE STORAGE\n        Storage.prototype.setObject = function( key, value ) {\n            this.setItem( key, JSON.stringify(value) );\n        }\n\n        // getObject METHOD FOR HTML STORAGE -> EG: localStorage.getObject( name )\n        // RETURN THE DATA ( STORED AS JSON STRING ) AS JS OBJECT\n        Storage.prototype.getObject = function( key ) {\n            const value = this.getItem( key );\n            return value && JSON.parse( value );\n        }\n    }\n\n    return {\n        isAvailable: isAvailable\n    }\n\n}\n","\nexport const getQuestionObject = ( data, questionId ) => {\n\n    const questions = data.questions,\n          qLength = questions.length;\n\n    let obj = {};\n    \n    for(let q=0; q<qLength; q++){\n        const question = questions[q];\n        if( question.id == questionId ){\n            obj = question;\n            break;\n        }\n    }\n\n    return obj;\n\n}","\nimport { fieldsStringSelectorSurvey, isEmptyObject, mergeObjects } from './helpers';\nimport { getQuestionObject } from './utils/getQuestionObject';\n\nexport const defaultCallbacksInOptions = {\n    formOptions: {\n\n        beforeSend: function beforeSend_surveyDefault( data ){\n            let isHacking = false;\n            const instance = this;\n            const surveyContEl = instance.formEl.closest('[data-surveyjs-container]');\n            const fieldsList = Array.from( surveyContEl.querySelectorAll(fieldsStringSelectorSurvey) );\n\n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                \n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                const questionEl = fieldEl.closest('[data-question-id]');\n                const questionId = questionEl ? questionEl.getAttribute('data-question-id') : '';\n                const questionObj = getQuestionObject( instance.data, questionId );\n\n                // BASED ON SURVEY JSON FILE, FORCE REQUIRED FIELDS TO BE VALIDATED\n                // THIS AVOIDS USERS TO HACK THE SURVEY, FOR EXAMPLE REMOVING required ATTRIBUTE FROM THE HTML\n                if( questionId !== '' && questionObj && !!questionObj.required ){\n\n                    const isRequiredFrom = fieldEl.matches('[data-required-from]');\n                    const reqMoreEl = document.querySelector(fieldEl.getAttribute('data-required-from'));\n                    if( !isRequiredFrom || ( isRequiredFrom && reqMoreEl.checked ) ){\n                        if( !fieldEl.required ){\n                            // FIELD IS NOT REQUIRED BUT IT SHOULD => USER HACKED FIELD\n                            isHacking = true;\n                        }\n                        fieldEl.required = true;\n                    }\n                    \n                }\n\n            });\n\n            if( isHacking ){\n                // USER IS HACKING FORM ( REMOVING ATTRIBUTE required FROM A FIELD )\n                // => FORCE VALIDATION TO SHOW ERROR AND STOP SUBMIT\n                const fieldOptions = mergeObjects({}, instance.options.fieldOptions, {focusOnRelated: false});\n                return instance.validateForm( fieldOptions )\n                    .then(formRes => {\n                        data.stopExecution = true;\n                        return data;\n                    });\n            }\n            return data;\n        },\n\n        getFormData: function getFormData_surveyDefault(){\n            const formEl = this.formEl;\n            const instance = formEl.formjs;\n            const fieldsList = Array.from( formEl.closest('[data-surveyjs-container]').querySelectorAll(fieldsStringSelectorSurvey) );\n            const obj = {\n                    answers: [],\n                    id: instance.data.id\n                };\n            let fieldNameCheck = '',\n                fieldTypeCheck = '';\n\n            fieldsList.forEach(fieldEl => {\n                const type = fieldEl.type,\n                      name = fieldEl.name;\n\n                // IF A FIELD HAS THE SAME NAME ATTRIBUTE AND IT IS OF THE SAME TYPE\n                // SKIP THE REST OF THE CODE FOR THIS FIELD AND GO TO THE NEXT\n                if( (name === fieldNameCheck && type === fieldTypeCheck) ){ return; }\n                \n                if( !fieldEl.matches('[data-required-from]') ){\n                    fieldNameCheck = name;\n                    fieldTypeCheck = type;\n                }\n\n                // EACH QUESTION HAS ITS OWN OBJECT ( qaObj ) THAT CONTAINS THE RELATED DATA:\n                // question:    THE QUESTION ID ( undefined FOR QUESTIONS WITH ATTRIBUTE data-required-form - will be skipped later )\n                // answer       AN OBJECT THAT CONTAINS THE FOLLOWS:\n                //                  value:      THE ANSWER VALUE\n                //                  related:    IF THE ANSWER IS REQUIRED FROM ANOTHER ANSWER (SEE BELOW)\n                const questionEl = fieldEl.closest('[data-question-id]'),\n                      questionId = questionEl ? questionEl.getAttribute('data-question-id') : '',\n                      qaObj = {\n                        question: questionId,\n                        answer: {\n                            value: fieldEl.value || ''\n                        }\n                    };\n\n                // A FIELD WITH ATTRIBUTE 'data-required-from' IS MANAGED TOGETHER WITH ITS RELATED FIELD ( WHICH HAS ATTRIBUTE 'data-require-more' )\n                // IF QUESTION ID IS EMPTY -> SKIP THE FIELD ( USEFUL FOR FORM FIELDS OUTSIDE THE SURVEY BODY )\n                if(\n                    fieldEl.matches('[data-required-from]') || \n                    questionId === '' || \n                    isEmptyObject( getQuestionObject(instance.data, questionId) )\n                ){ return; }\n\n                if( type === 'radio' ){\n                    const containerEl = fieldEl.closest('form') ? formEl : fieldEl.closest(instance.options.fieldOptions.questionContainer);\n                    const checkedEl = containerEl.querySelector('[name=\"'+ name +'\"]:checked');\n\n                    qaObj.answer.value = (checkedEl && checkedEl.value) || '';\n\n                    // FOR RADIO THAT REQUIRE THE USER TO GIVE ONE MORE ANSWER\n                    if( checkedEl && checkedEl.matches('[data-require-more]') ){\n                        qaObj.answer.related = formEl.querySelector('[data-required-from=\"#'+ checkedEl.id +'\"]').value;\n                    }\n                }\n\n                if( type === 'checkbox' && fieldEl.matches('[data-checks]') ){\n                    qaObj.answer.value = [];\n                    Array.from(formEl.querySelectorAll('[name=\"'+ name +'\"]:checked')).forEach(el => {\n                        qaObj.answer.value.push( el.value );\n                    });\n                }\n                \n                obj.answers.push( qaObj );\n            });\n        \n            return obj;\n        }\n    \n    }\n}\n","\nimport { defaultCallbacksInOptions } from './optionsUtils';\n\nexport const options = {\n    cssClasses: {\n        checkbox:           'form-check-input',\n        default:            'form-control',\n        file:               'form-control-file',\n        label:              'form-check-label',\n        radio:              'form-check-input',\n        wrapper: {\n            checkbox:       'form-check',\n            default:        '',\n            radio:          'form-check'\n        }\n    },\n    fieldErrorFeedback:     true,\n    formOptions: {\n        beforeSend:         [defaultCallbacksInOptions.formOptions.beforeSend],\n        getFormData:        defaultCallbacksInOptions.formOptions.getFormData\n    },\n    initAjaxOptions: {\n        cache:              'no-store',\n        credentials:        'same-origin',\n        headers: {\n                            'Content-Type': 'application/json',\n                            'Accept':       'application/json'\n        },\n        method:             'GET',\n        mode:               'same-origin',\n        redirect:           'follow',\n        timeout:            0\n    },\n    messages:{\n        maxChoice:                 'ANSWERS MAX',\n        errorMessage:              'Answer is necessary.',\n        errorMessageMultiChoice:   'You must choose from {{checksMin}} to {{checksMax}} answers.'\n    },\n    templates: {\n        error:      '<div class=\"surveyjs-field-error-message\">{{errorMessage}}</div>',\n        \n        input:      '<input {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-input surveyjs-{{answerType}} {{fieldClasses}}\" />',\n\n        label:      '<label for=\"{{answerCode}}\" class=\"surveyjs-label {{labelClasses}}\">{{labelString}}</label>',\n\n        loading:    '<div class=\"surveyjs-loading\" data-surveyjs-loading>Loading...</div>',\n\n        question:   '<div data-question-id=\"{{questionId}}\" data-formjs-question class=\"surveyjs-question-box\">'+\n                        '<div class=\"surveyjs-question-header\">Question {{questionNumber}}</div>'+\n                        '<div class=\"surveyjs-question-body\">'+\n                            '<div class=\"surveyjs-question-text\">{{questionText}}</div>'+\n                            '<div class=\"surveyjs-answers-box form-group\">'+\n                                '{{answersHTML}}'+\n                                '{{errorsHTML}}'+\n                            '</div>'+\n                        '</div>'+\n                    '</div>',\n        \n        select:     '<select {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}{{addMoreName}}\" class=\"surveyjs-select {{fieldClasses}}\">'+\n                        '{{optionsHtml}}'+\n                    '</select>',\n        \n        textarea:   '<textarea {{fieldAttributes}} name=\"surveyjs-answer-{{questionNumber}}\" class=\"surveyjs-textarea {{fieldClasses}}\"></textarea>',\n\n        wrapper: {\n            default:    '<div class=\"surveyjs-single-answer surveyjs-field-container surveyjs-answer-{{answerType}} {{wrapperClasses}}\">'+\n                            '{{fieldTemplate}}'+\n                            '{{labelTemplate}}'+\n                        '</div>',\n\n            errors:     '<div class=\"surveyjs-errors-wrapper\" data-surveyjs-errors>{{errorTemplates}}</div>',\n            \n            nested:     '<div class=\"surveyjs-nested-parent surveyjs-single-answer surveyjs-field-container surveyjs-answer-{{answerType}}\">'+\n                            '{{labelTemplate}}'+\n                            '<div class=\"surveyjs-nested-container surveyjs-field-indent\">'+\n                                '{{nestedFieldsHTML}}'+\n                            '</div>'+\n                        '</div>',\n            \n            related:    '<div class=\"surveyjs-single-answer surveyjs-field-container input-group {{wrapperClasses}}\">'+\n                            '<div class=\"input-group-prepend\">'+\n                                '<div class=\"input-group-text form-check surveyjs-answer-radio\">'+\n                                    '{{fieldTemplate}}'+\n                                    '{{labelTemplate}}'+\n                                '</div>'+\n                            '</div>'+\n                            '{{relatedFieldHTML}}'+\n                        '</div>'\n        }\n    },\n    useWebStorage:          true\n}\n","\nexport const internals = {\n    storageArray: [],\n    storageName: 'Survey_' + location.href + '_{{surveyFormName}}_surveyId[{{surveyId}}]'\n}\n","\nexport const getAnswerIndexInWebStorage = ( internals, fieldName, multiChoiceValue = '' ) => {\n\n    const wsSurvey = sessionStorage.getObject( internals.storageName );\n            \n    if( wsSurvey ){\n        const wsSurveyLength = wsSurvey.length;\n        \n        for(let ws=0; ws<wsSurveyLength; ws++){\n            const lsItem = wsSurvey[ws];\n\n            if( lsItem.field === fieldName ){\n                if( multiChoiceValue ){\n                    if( lsItem.value !== multiChoiceValue ){\n                        continue;\n                    }\n                }\n                return ws;\n            }\n        }\n    }\n    \n    return -1;\n\n}","\nimport { isEmptyObject, isFieldForChangeEvent, isPlainObject } from './helpers';\nimport { getAnswerIndexInWebStorage }           from './utils/getAnswerIndexInWebStorage';\nimport { getQuestionObject }                    from './utils/getQuestionObject';\n\nexport const callbackFns = {\n\n    submit: function( event ){\n        const self = event.target.formjs;\n        event.data.then(() => {\n            if( self.options.useWebStorage ){\n                sessionStorage.removeItem( self.internals.storageName );\n            }\n        });\n    },\n\n    validation: function( event ){\n\n        const eventName = event.type,\n              fieldEl = event.target,\n              self = fieldEl.closest('form').formjs,\n              internals = self.internals,\n              containerEl = fieldEl.closest( self.options.fieldOptions.questionContainer ),\n              fieldValue = fieldEl.value,\n              isMultiChoice = fieldEl.matches('[data-checks]'),\n              isRequireMore = fieldEl.matches('[data-require-more]'),\n              isRequiredFrom = fieldEl.matches('[data-required-from]'),\n              reqMoreEl = isRequiredFrom ? containerEl.querySelector(fieldEl.getAttribute('data-required-from')) : null;\n\n        // VARS USED TO VALIDATE THE FILED IF IT IS REQUIRED\n        const itemEl = isRequiredFrom ? reqMoreEl : fieldEl,\n              questionId = itemEl.id ? itemEl.id.split('-')[2] : 'id-not-found',\n              isFieldForChangeEventBoolean = isFieldForChangeEvent(fieldEl),\n              questionObj = getQuestionObject(self.data, questionId);\n\n        // IF IT'S NOT A SURVEY QUESTION -> SKIP\n        if( isEmptyObject(questionObj) ){ return true; }\n\n        if(\n            (isFieldForChangeEventBoolean && eventName === 'change') ||\n            (!isFieldForChangeEventBoolean && eventName !== 'change')\n        ){\n            \n            // MANAGE ITEMS IN LOCAL STORAGE ( IF AVAILABLE AND USABLE )\n            if( self.options.useWebStorage && !fieldEl.matches('[data-exclude-storage]') ){\n                const inArrayPos = getAnswerIndexInWebStorage( internals, fieldEl.name, (isMultiChoice ? fieldValue : false) );\n                const inArrayRequireMorePos = getAnswerIndexInWebStorage( internals, fieldEl.name + '-more' );\n\n                let storageArray = internals.storageArray;\n\n                if( !isRequireMore && !isRequiredFrom && inArrayRequireMorePos !== -1 ){\n                    storageArray.splice(inArrayRequireMorePos, 1);\n                }\n\n                if( inArrayPos !== -1 ){\n                    if( isMultiChoice ){\n                        if( !fieldEl.checked && storageArray[inArrayPos].value === fieldValue ){\n                            // REMOVE ITEM FROM LS\n                            storageArray.splice(inArrayPos, 1);\n                        } else {\n                            // ADD ITEM TO LS\n                            storageArray.push( { field: fieldEl.name, value: fieldValue } );\n                        }\n                    } else {\n                        if( fieldValue !== '' ){\n                            storageArray[inArrayPos].value = fieldValue;\n                        } else {\n                            storageArray.splice(inArrayPos, 1); \n                        }\n                    }\n                } else {\n                    if( fieldValue !== '' ){\n                        if( isRequiredFrom && fieldValue !== '' ){\n                            const oldFieldNamePos = getAnswerIndexInWebStorage( internals, reqMoreEl.name );\n                            if( oldFieldNamePos !== -1 ){\n                                storageArray.splice(oldFieldNamePos, 1);\n                            }\n                            storageArray.push( { field: reqMoreEl.name, value: reqMoreEl.value } );\n                        }\n                        storageArray.push( { field: fieldEl.name, value: fieldValue } );\n                        if( isRequireMore ){\n                            const elReqFromEl = fieldEl.closest('form').querySelector( '[data-required-from=\"#' + fieldEl.id + '\"]' );\n                            storageArray.push( { field: elReqFromEl.name, value: elReqFromEl.value } );\n                        }\n                    }\n                }\n\n                sessionStorage.setObject( internals.storageName, storageArray );\n            }\n\n            // BASED ON JSON DATA, FORCE REQUIRED FIELDS TO BE VALIDATED\n            if( typeof questionObj.required !== 'undefined' ){\n                fieldEl.required = true;\n            }\n\n        }\n        \n    },\n\n    validationEnd: function( event ){\n        const fieldEl = event.data.fieldEl;\n        const errors = event.data.errors;\n        const instance = event.target.formjs;\n        \n        const questionId = fieldEl.id ? fieldEl.id.split('-')[2] : 'id-not-found';\n        const questionObj = getQuestionObject(instance.data, questionId);\n\n        if( errors && isPlainObject(questionObj.errorMessage) ){\n            const errorsWrapper = fieldEl.closest( instance.options.fieldOptions.questionContainer ).querySelector('[data-surveyjs-errors]');\n            const errorsHTML = Object.keys(errors).reduce((accHTML, name) => {\n                const errorMessage = questionObj.errorMessage[name] || '';\n                return accHTML += errorMessage ? instance.options.templates.error.replace('{{errorMessage}}', errorMessage) : '';\n            }, '');\n\n            errorsWrapper.innerHTML = errorsHTML;\n        }\n    }\n\n}\n","\nimport { sortList } from '../../helpers';\n\nexport const generateOptionTags = ( optionsList = [] ) => {\n\n    return sortList( optionsList ).reduce((optionsHTML, opt) => {\n        return optionsHTML += `<option value=\"${opt.value}\">${opt.label}</option>`;\n    }, '');\n\n}","\nimport { toKebabCase } from '../../helpers';\n\nexport const getAttributesStringHTML = ( answerObj, answerCode, isRequired ) => {\n    const excludedAttrs = ['data', 'id', 'label', 'nested', 'related', 'sort'];\n    \n    if( /^(option|textarea)$/.test(answerObj.type) ){\n        excludedAttrs.push('type', 'value');\n    }\n\n    let string = '';\n\n    Object.keys(answerObj)\n        .filter(name => excludedAttrs.indexOf(name) === -1)\n        .forEach(name => {\n            string += ` ${name}=\"${answerObj[name]}\"`;\n        });\n\n    if( answerObj.data ){\n        Object.keys(answerObj.data).forEach(name => {\n            string += ` data-${toKebabCase(name)}=\"${answerObj.data[name]}\"`;\n        });\n    }\n\n    if( isRequired ){\n        string += ' required';\n    }\n\n    if( answerObj.related ){\n        string += ' data-require-more';\n    }\n\n    string += ` id=\"${answerCode}\"`;\n    // string += ` data-answer-id=\"${answerObj.id}\"`;\n\n    return string.trim();\n}\n","\nexport const getTemplates = ( templates, answerType ) => {\n    return {\n        field: templates[answerType] || templates.input,\n        label: /^(checkbox|nested|radio|related)$/.test(answerType) ? templates.label : '',\n        wrapper: templates.wrapper[answerType] || templates.wrapper.default\n    }\n}\n","\nimport { mergeObjects, replaceObjectKeysInString, sortList } from '../../helpers';\nimport { generateOptionTags }       from './generateOptionTags';\nimport { getAttributesStringHTML }  from './getAttributesStringHTML';\nimport { getTemplates }             from './getTemplates';\n\nexport const generateAnswers = ( options, answersList, extraData ) => {\n\n    let allAnswersHTML = '';\n    let previousType = '';\n\n    sortList( answersList ).forEach((answer, index) => {\n\n        let answerHTML = '';\n\n        // COLLECT USEFUL DATA\n        // answerType => checkbox, date, email, radio, select, text, textarea, etc...\n        const answerType = answer.type === 'option' ? 'select' : answer.type;\n        \n        if( answerType === 'select' && previousType === answerType ){ return; }\n\n        previousType = answerType;\n\n        if( extraData.question.checks ){\n            answer = mergeObjects({}, answer, {data:{checks:extraData.question.checks}});\n        }\n        \n        const answerCode = `${answerType}-${extraData.surveyId}-${extraData.question.id}-${answerType === 'select' ? (index + 1) : answer.id}`;\n        const answerData = {\n            questionNumber: extraData.question.index + 1,\n            wrapperClasses: options.cssClasses.wrapper[answerType] || options.cssClasses.wrapper.default,\n            fieldAttributes: getAttributesStringHTML( answer, answerCode, extraData.question.isRequired ),\n            fieldClasses: options.cssClasses[answerType] || options.cssClasses.default,\n\n            answerType,\n            answerCode,\n            addMoreName: '',\n\n            labelString: answer.label || '',\n            labelClasses: options.cssClasses.label\n        };\n\n        let relatedFieldHTML = '';\n        if( answer.related ){\n            const relatedType = answer.related.type || 'select';\n            const relatedIsSelect = relatedType === 'select';\n            const relatedObj = relatedIsSelect ? mergeObjects({}, answer) : answer.related;\n\n            relatedObj.type = relatedIsSelect ? 'option' : relatedType;\n            // relatedObj.id = `${answer.id}-more`;\n            relatedObj.id = '';\n            relatedObj.data = mergeObjects({}, relatedObj.data, {requiredFrom:'#'+answerCode});\n            delete relatedObj.related;\n\n            const answerDataRelated = {\n                fieldAttributes: getAttributesStringHTML(relatedObj, /* `${answerCode}-more` */'', false),\n                answerType: relatedType,\n                addMoreName: '-more',\n                fieldClasses: relatedIsSelect ? options.cssClasses.select : (options.cssClasses[relatedType] || options.cssClasses.default)\n            };\n\n            relatedFieldHTML = options.templates[relatedType] || options.templates.input;\n            if( relatedIsSelect ){\n                const optionsHtml = generateOptionTags( answer.related );\n                relatedFieldHTML = relatedFieldHTML.replace('{{optionsHtml}}', optionsHtml);\n            }\n\n            relatedFieldHTML = replaceObjectKeysInString(answerDataRelated, relatedFieldHTML);\n        }\n        \n        // TAKE RIGHT TEMPLATES ( wrapper, field and label ) AND PUT ALL TOGETHER\n        // answerTypeForTemplate => related, input, nested, select, textarea, etc...\n        const answerTypeForTemplate = answer.related ? 'related' : (answer.nested ? 'nested' : answerType);\n        const templates = getTemplates( options.templates, answerTypeForTemplate );\n\n        let nestedFieldsHTML = '';\n        if( answer.nested ){\n            nestedFieldsHTML = generateAnswers( options, answer.nested, extraData );\n        }\n\n        let optionsHtml = '';\n        if( answerType === 'select' ){\n            optionsHtml = generateOptionTags( answersList );\n        }\n\n        answerHTML = templates.wrapper\n                        .replace('{{relatedFieldHTML}}', relatedFieldHTML)\n                        .replace('{{fieldTemplate}}', templates.field)\n                        .replace('{{optionsHtml}}', optionsHtml)\n                        .replace('{{labelTemplate}}', templates.label)\n                        .replace('{{nestedFieldsHTML}}', nestedFieldsHTML);\n        allAnswersHTML += replaceObjectKeysInString(answerData, answerHTML);\n\n    });\n\n    return allAnswersHTML;\n\n}\n","\nimport { isPlainObject, replaceObjectKeysInString, sortList } from '../helpers';\nimport { generateAnswers } from './generateQAcodeUtils/generateAnswers';\n\nexport const generateQAcode = ( formEl, options, surveyData ) => {\n\n    const questionsList = sortList( surveyData.questions );\n    const qaDataLength = questionsList.length;\n    \n    let qaCodeAll = '';\n    \n    for(let i=0; i<qaDataLength; i++){\n        const questionObj = questionsList[i];\n\n        let qaHtml = options.templates.question;\n        const questionId = questionObj.id;\n        const questionNumber = i + 1;\n        const extraData = {\n            surveyId: surveyData.id,\n            question: {\n                id: questionId,\n                index: i,\n                isRequired: !!questionObj.required\n            }\n        };\n\n        if( questionObj.checks ){\n            extraData.question.checks = questionObj.checks;\n        }\n        \n        let answersHTML = generateAnswers( options, questionObj.answers, extraData );\n\n        // MANAGE EXTERNAL QUESTION\n        if( questionObj.external ){\n            const externalCont = formEl.closest('[data-surveyjs-container]').querySelector('[data-surveyjs-external]');\n            externalCont.setAttribute('data-question-id', questionId);\n\n            questionObj.answers.forEach((answer, index) => {\n                const bindAnswerEl = externalCont.querySelectorAll('[data-field]')[index];\n                const fieldProps = {\n                        id: `${answer.type}-${extraData.surveyId}-${questionId}-${answer.id}`,\n                        name: `${bindAnswerEl.name}${questionNumber}`,\n                        type: answer.type,\n                        value: answer.value,\n                        required: !!questionObj.required\n                    };\n                \n                Object.keys(fieldProps).forEach(name => {\n                    bindAnswerEl[name] = fieldProps[name];\n                });\n\n                // bindAnswerEl.setAttribute('data-answer-id', answer.id);\n\n                const answerCont = bindAnswerEl.closest('[data-answer]');\n                answerCont.querySelector('label').setAttribute('for', fieldProps.id);\n                answerCont.querySelector('[data-label]').innerHTML = answer.label;\n                externalCont.querySelector('[data-question]').innerHTML = questionObj.question;\n            });\n\n            continue;\n        }\n\n        const maxChoice = questionObj.checks ? JSON.parse(questionObj.checks) : '';\n        const checksMin = maxChoice[0] || '';\n        const checksMax = maxChoice[1] || '';\n        const maxChoiceText = maxChoice && options.messages.maxChoice ? ' ('+ checksMax +' '+ options.messages.maxChoice +')' : '';\n\n        const questionData = {\n            questionId,\n            questionNumber,\n            questionText: questionObj.question + maxChoiceText,\n            answersHTML,\n            errorsHTML: options.fieldErrorFeedback ? options.templates.wrapper.errors : ''\n        };\n        qaHtml = replaceObjectKeysInString(questionData, qaHtml);\n\n        if( options.fieldErrorFeedback ){\n            let errorMessage = maxChoice !== '' ? options.messages.errorMessageMultiChoice : (questionObj.errorMessage || options.messages.errorMessage);\n\n            // CASE OF MULTIPLE ERROR MESSAGES FROM JSON DATA => DYNAMICALLY MANAGED VIA EVENT LISTENER IN CONSTRUCTOR\n            if( isPlainObject(errorMessage) ){\n                errorMessage = '';\n            }\n\n            qaHtml = qaHtml.replace( /{{errorTemplates}}/g, errorMessage );\n        }\n\n        qaCodeAll += replaceObjectKeysInString({checksMin, checksMax}, qaHtml);\n    }\n    \n    return qaCodeAll;\n\n}\n","\nexport const populateAnswers = ( formEl, internals ) => {\n\n    const WS = sessionStorage.getObject( internals.storageName );\n    if( WS ){\n        const surveyContEl = formEl.closest('[data-surveyjs-container]');\n        internals.storageArray = WS;\n        WS.forEach(item => {\n            const fieldFirst = surveyContEl.querySelector( '[name=\"' + item.field + '\"]' ),\n                  isRadioOrCheckbox = fieldFirst.matches('[type=\"radio\"], [type=\"checkbox\"]'),\n                  fieldEl = ( isRadioOrCheckbox ? surveyContEl.querySelector('[name=\"' + item.field + '\"][value=\"' + item.value + '\"]') : fieldFirst );\n            \n            if( isRadioOrCheckbox ){\n                fieldEl.checked = true;\n            } else {\n                fieldEl.value = item.value;\n            }\n        });\n    }\n\n}\n","\nimport { generateQAcode }       from './generateQAcode';\nimport { populateAnswers }      from './populateAnswers';\n\nexport const buildSurvey = ( formEl, options, internals, data ) => {\n    \n    const formName = formEl.getAttribute('name') || '';\n    \n    // REPLACE SURVEY ID AND FORM NAME IN WEB STORAGE NAME\n    internals.storageName = internals.storageName.replace( /{{surveyId}}/, data.id );\n    internals.storageName = internals.storageName.replace( /{{surveyFormName}}/, formName );\n    \n    const qaHtmlAll = generateQAcode( formEl, options, data );\n    formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforeend', qaHtmlAll );\n\n    // FILL ANSWERS WITH LOCAL STORAGE ( IF AVAILABLE )\n    if( options.useWebStorage ){\n        populateAnswers( formEl, internals );\n    }\n\n}\n","\nimport { callbackFns } from './listenerCallbacks';\n\nexport const destroy = formEl => {\n\n    formEl.formjs.options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n        const useCapturing = eventName === 'blur' ? true : false;\n        formEl.removeEventListener(eventName, callbackFns.validation, useCapturing);\n    });\n    formEl.removeEventListener('fjs.form:submit', callbackFns.submit);\n    \n}\n","\nimport { ajaxCall, customEvents, deepFreeze, dispatchCustomEvent, mergeObjects, webStorage } from './modules/helpers';\nimport { options }      from './modules/options';\nimport { internals }    from './modules/internals';\nimport { callbackFns }  from './modules/listenerCallbacks';\nimport { buildSurvey }  from './modules/buildSurvey/buildSurvey';\nimport { destroy }      from './modules/destroy';\n\nimport Form from 'formjs-plugin';\n\nimport './index.scss';\n\nconst version = '3.0.0';\n\nclass Survey extends Form {\n\n    constructor( formEl, optionsObj = {} ){\n        if( !optionsObj.url || typeof optionsObj.url !== 'string' ){\n            throw new Error('\"options.url\" is missing or not a string!');\n        }\n\n        const options = mergeObjects( {}, Survey.prototype.options, optionsObj );\n\n        if( !webStorage().isAvailable ){\n            options.useWebStorage = false;\n        }\n\n        // CREATE FORM INSTANCE FOR SURVEY\n        super( formEl, options );\n        const self = this;\n        self.internals = internals;\n        self.options.fieldOptions.validateOnEvents.split(' ').forEach(eventName => {\n            const useCapturing = eventName === 'blur' ? true : false;\n            self.formEl.addEventListener(eventName, callbackFns.validation, useCapturing);\n        });\n\n        self.formEl.querySelector('[data-surveyjs-body]').insertAdjacentHTML( 'beforebegin', self.options.templates.loading );\n\n        // CREATE SURVEY\n        const retrieveSurvey = ajaxCall(self.options.url, self.options.initAjaxOptions)\n            .then(response => {\n                if( response.status.toLowerCase() !== 'success' ){\n                    return Promise.reject(response);\n                }\n                return new Promise(resolve => {\n                    self.data = response.data;\n                    if( self.data.questions && self.data.questions.length > 0 ){\n                        buildSurvey(self.formEl, self.options, self.internals, self.data);\n                        deepFreeze(self.data);\n                        self.formEl.addEventListener('fjs.field:validation', callbackFns.validationEnd);\n                        self.formEl.addEventListener('fjs.form:submit', callbackFns.submit);\n                        super.init().then(() => {\n                            self.isInitialized = true;\n                            self.formEl.closest('[data-surveyjs-container]').classList.add('surveyjs-init-success');\n                            resolve(response);\n                        });\n                    } else {\n                        resolve(response);\n                    }\n                });\n            })\n            .finally(() => {\n                const loadingBoxEl = self.formEl.querySelector('[data-surveyjs-loading]');\n                if( loadingBoxEl ){\n                    loadingBoxEl.parentNode.removeChild(loadingBoxEl);\n                }\n            });\n        \n        dispatchCustomEvent( self.formEl, customEvents.init, retrieveSurvey );\n    }\n\n    destroy(){\n        destroy(this.formEl);\n        super.destroy();\n    }\n\n    static setOptions( optionsObj ){\n        Survey.prototype.options = mergeObjects({}, Survey.prototype.options, optionsObj);\n    }\n\n}\n\nSurvey.prototype.isInitialized = false;\nSurvey.prototype.options = options;\nSurvey.prototype.version = version;\n\nexport default Survey;\n"],"names":["ajaxCall","timeoutTimer","url","location","href","options","headers","Headers","timeout","controller","AbortController","signal","window","setTimeout","abort","fetch","then","response","ok","json","Promise","reject","error","clearTimeout","customEvents","init","deepFreeze","obj","Object","getOwnPropertyNames","forEach","name","prop","_typeof","freeze","isPlainObject","object","prototype","toString","call","mergeObjects","out","Array","from","arguments","slice","filter","arg","keys","key","isArray","concat","push","dispatchCustomEvent","elem","eventName","data","eventOptions","bubbles","eventObj","Event","dispatchEvent","fieldsStringSelectorSurvey","isEmptyObject","length","isFieldForChangeEvent","fieldEl","matches","replaceObjectKeysInString","stringHTML","reduce","accString","regexStr","RegExp","replace","sortList","list","sort","a","b","toKebabCase","string","useAllCaps","newString","trim","match","p1","p2","p3","p4","p5","p6","toLowerCase","toUpperCase","webStorage","isAvailable","mod","localStorage","setItem","removeItem","e","checkLocalStorage","Storage","setObject","value","JSON","stringify","getObject","this","getItem","parse","getQuestionObject","questionId","questions","qLength","q","question","id","defaultCallbacksInOptions","formOptions","beforeSend","isHacking","instance","surveyContEl","formEl","closest","fieldsList","querySelectorAll","fieldNameCheck","fieldTypeCheck","type","questionEl","getAttribute","questionObj","required","isRequiredFrom","reqMoreEl","document","querySelector","checked","fieldOptions","focusOnRelated","validateForm","formRes","stopExecution","getFormData","formjs","answers","qaObj","answer","checkedEl","questionContainer","related","el","cssClasses","checkbox","file","label","radio","wrapper","fieldErrorFeedback","initAjaxOptions","cache","credentials","method","mode","redirect","messages","maxChoice","errorMessage","errorMessageMultiChoice","templates","input","loading","select","textarea","errors","nested","useWebStorage","internals","storageArray","storageName","getAnswerIndexInWebStorage","fieldName","multiChoiceValue","wsSurvey","sessionStorage","wsSurveyLength","ws","lsItem","field","callbackFns","submit","event","self","target","validation","containerEl","fieldValue","isMultiChoice","isRequireMore","itemEl","split","isFieldForChangeEventBoolean","inArrayPos","inArrayRequireMorePos","splice","oldFieldNamePos","elReqFromEl","validationEnd","errorsWrapper","errorsHTML","accHTML","innerHTML","generateOptionTags","optionsList","optionsHTML","opt","getAttributesStringHTML","answerObj","answerCode","isRequired","excludedAttrs","test","indexOf","getTemplates","answerType","generateAnswers","answersList","extraData","allAnswersHTML","previousType","index","answerHTML","checks","surveyId","answerData","questionNumber","wrapperClasses","fieldAttributes","fieldClasses","addMoreName","labelString","labelClasses","relatedFieldHTML","relatedType","relatedIsSelect","relatedObj","requiredFrom","answerDataRelated","optionsHtml","answerTypeForTemplate","nestedFieldsHTML","generateQAcode","surveyData","questionsList","qaDataLength","qaCodeAll","i","qaHtml","answersHTML","external","externalCont","setAttribute","bindAnswerEl","fieldProps","answerCont","checksMin","checksMax","maxChoiceText","questionData","questionText","populateAnswers","WS","item","fieldFirst","isRadioOrCheckbox","buildSurvey","formName","qaHtmlAll","insertAdjacentHTML","destroy","validateOnEvents","useCapturing","removeEventListener","version","Survey","optionsObj","Error","addEventListener","retrieveSurvey","status","resolve","isInitialized","classList","add","loadingBoxEl","parentNode","removeChild","Form"],"mappings":";s/DACO,IAAMA,EAAW,eAEhBC,EAFkBC,yDAAMC,SAASC,KAAMC,yDAAU,MAIrDA,EAAQC,QAAU,IAAIC,QAASF,EAAQC,SAGlCD,EAAQG,QAAU,EAAI,KACjBC,EAAa,IAAIC,gBACjBC,EAASF,EAAWE,OAE1BN,EAAQM,OAASA,EAEjBV,EAAeW,OAAOC,YAAW,WAC7BJ,EAAWK,UACZT,EAAQG,gBAGRO,MAAOb,EAAKG,GACdW,MAAK,SAAAC,UACGA,EAASC,GAGPD,EAASE,OAFLC,QAAQC,OAAOJ,aAIvB,SAAAK,UACIF,QAAQC,OAAOC,eAEjB,WACDrB,GACAW,OAAOW,aAActB,OC9BxBuB,EAAe,CACxBC,KAAM,YCDGC,EAAa,SAAbA,EAAaC,UAEtBC,OAAOC,oBAAoBF,GAAKG,SAAQ,SAAAC,OAC9BC,EAAOL,EAAII,GACG,WAAhBE,EAAOD,IAA8B,OAATA,GAC5BN,EAAWM,MAGZJ,OAAOM,OAAOP,ICRZQ,EAAgB,SAAAC,SAC2B,oBAA7CR,OAAOS,UAAUC,SAASC,KAAMH,ICC9BI,EAAe,SAAfA,QAAyBC,yDAAM,UACxCC,MAAMC,KAAKC,WAAWC,MAAM,GAAGC,QAAO,SAAAC,WAASA,KAAKjB,SAAQ,SAAAiB,GACxDnB,OAAOoB,KAAKD,GAAKjB,SAAQ,SAAAmB,GACjBP,MAAMQ,QAAQH,EAAIE,IAClBR,EAAIQ,IAAQR,EAAIQ,IAAQ,IAAIE,OAAQJ,EAAIE,GAAKJ,MAAM,IAC5CV,EAAcY,EAAIE,IACzBR,EAAIQ,GAAOT,EAAcC,EAAIQ,IAAQ,GAAKF,EAAIE,IAG1CP,MAAMQ,QAAQT,EAAIQ,IAElBR,EAAIQ,GAAKG,KAAKL,EAAIE,IAElBR,EAAIQ,GAAOF,EAAIE,SAMxBR,GCnBEY,EAAsB,SAAEC,EAAMC,OAAWC,yDAAO,GAAIC,yDAAe,GAC5EA,EAAejB,EAAa,GAAI,CAAEkB,SAAS,GAAQD,OAC7CE,EAAW,IAAIC,MAAML,EAAWE,GACtCE,EAASH,KAAOA,EAChBF,EAAKO,cAAeF,ICNXG,EAA6B,2LCE7BC,EAAgB,SAAA3B,UAClBD,EAAcC,IAAyD,IAA9CR,OAAOC,oBAAoBO,GAAQ4B,QCH1DC,EAAwB,SAAAC,UAC1BA,EAAQC,QAAQ,6DCDdC,EAA4B,SAACzC,EAAK0C,UACpCzC,OAAOoB,KAAKrB,GAAK2C,QAAO,SAACC,EAAWxC,OACjCyC,EAAW,IAAIC,OAAQ,KAAO1C,EAAO,KAAM,YAC1CwC,EAAUG,QAAQF,EAAU7C,EAAII,MACxCsC,ICJMM,EAAW,SAAEC,UAClBA,EAAK,GAAL,MACAA,EAAKC,MAAK,SAACC,EAAGC,UAAMD,EAAC,KAAWC,EAAC,QAE9BH,GCJEI,EAAc,eAAEC,yDAAS,GAAIC,0DAClCC,EAAYF,EAAOG,OAAOV,QAAQ,sCAAsC,SAACW,EAAOC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,UAChFH,EAAK,IAAMA,GAAME,GAAM,IAAM,IAAMC,GACpCC,wBAEhBV,EAAaC,EAAUU,cAAgBV,GCLrCW,EAAa,eAahBC,EAXoB,eAChBC,EAAM,2BAERC,aAAaC,QAAQF,EAAKA,GAC1BC,aAAaE,WAAWH,IACjB,EACT,MAAMI,UACG,GAIKC,UAEhBN,IAGAO,QAAQjE,UAAUkE,UAAY,SAAUtD,EAAKuD,QACpCN,QAASjD,EAAKwD,KAAKC,UAAUF,KAKtCF,QAAQjE,UAAUsE,UAAY,SAAU1D,OAC9BuD,EAAQI,KAAKC,QAAS5D,UACrBuD,GAASC,KAAKK,MAAON,KAI7B,CACHT,YAAaA,IC/BRgB,EAAoB,SAAEvD,EAAMwD,WAE/BC,EAAYzD,EAAKyD,UACjBC,EAAUD,EAAUjD,OAEtBrC,EAAM,GAEFwF,EAAE,EAAGA,EAAED,EAASC,IAAI,KAClBC,EAAWH,EAAUE,MACvBC,EAASC,IAAML,EAAY,CAC3BrF,EAAMyF,gBAKPzF,GCZE2F,EAA4B,CACrCC,YAAa,CAETC,WAAY,SAAmChE,OACvCiE,GAAY,EACVC,EAAWd,KACXe,EAAeD,EAASE,OAAOC,QAAQ,6BACvCC,EAAapF,MAAMC,KAAMgF,EAAaI,iBAAiBjE,IAEzDkE,EAAiB,GACjBC,EAAiB,MAErBH,EAAWhG,SAAQ,SAAAoC,OAETgE,EAAOhE,EAAQgE,KACfnG,EAAOmC,EAAQnC,QAIhBA,IAASiG,GAAkBE,IAASD,GAEpC/D,EAAQC,QAAQ,0BACjB6D,EAAiBjG,EACjBkG,EAAiBC,OAGfC,EAAajE,EAAQ2D,QAAQ,sBAC7Bb,EAAamB,EAAaA,EAAWC,aAAa,oBAAsB,GACxEC,EAActB,EAAmBW,EAASlE,KAAMwD,MAInC,KAAfA,GAAqBqB,GAAiBA,EAAYC,SAAU,KAEtDC,EAAiBrE,EAAQC,QAAQ,wBACjCqE,EAAYC,SAASC,cAAcxE,EAAQkE,aAAa,yBACzDG,GAAoBA,GAAkBC,EAAUG,WAC5CzE,EAAQoE,WAETb,GAAY,GAEhBvD,EAAQoE,UAAW,QAO3Bb,EAAW,KAGLmB,EAAepG,EAAa,GAAIkF,EAASrH,QAAQuI,aAAc,CAACC,gBAAgB,WAC/EnB,EAASoB,aAAcF,GACzB5H,MAAK,SAAA+H,UACFvF,EAAKwF,eAAgB,EACdxF,YAGZA,GAGXyF,YAAa,eACHrB,EAAShB,KAAKgB,OACdF,EAAWE,EAAOsB,OAClBpB,EAAapF,MAAMC,KAAMiF,EAAOC,QAAQ,6BAA6BE,iBAAiBjE,IACtFnC,EAAM,CACJwH,QAAS,GACT9B,GAAIK,EAASlE,KAAK6D,IAEtBW,EAAiB,GACjBC,EAAiB,UAErBH,EAAWhG,SAAQ,SAAAoC,OACTgE,EAAOhE,EAAQgE,KACfnG,EAAOmC,EAAQnC,QAIhBA,IAASiG,GAAkBE,IAASD,GAEpC/D,EAAQC,QAAQ,0BACjB6D,EAAiBjG,EACjBkG,EAAiBC,OAQfC,EAAajE,EAAQ2D,QAAQ,sBAC7Bb,EAAamB,EAAaA,EAAWC,aAAa,oBAAsB,GACxEgB,EAAQ,CACNhC,SAAUJ,EACVqC,OAAQ,CACJ7C,MAAOtC,EAAQsC,OAAS,SAOhCtC,EAAQC,QAAQ,yBACD,KAAf6C,IACAjD,EAAegD,EAAkBW,EAASlE,KAAMwD,QAGvC,UAATkB,EAAkB,KAEZoB,GADcpF,EAAQ2D,QAAQ,QAAUD,EAAS1D,EAAQ2D,QAAQH,EAASrH,QAAQuI,aAAaW,oBACvEb,cAAc,UAAW3G,EAAM,cAE7DqH,EAAMC,OAAO7C,MAAS8C,GAAaA,EAAU9C,OAAU,GAGnD8C,GAAaA,EAAUnF,QAAQ,yBAC/BiF,EAAMC,OAAOG,QAAU5B,EAAOc,cAAc,yBAA0BY,EAAUjC,GAAI,MAAMb,OAIrF,aAAT0B,GAAuBhE,EAAQC,QAAQ,mBACvCiF,EAAMC,OAAO7C,MAAQ,GACrB9D,MAAMC,KAAKiF,EAAOG,iBAAiB,UAAWhG,EAAM,eAAeD,SAAQ,SAAA2H,GACvEL,EAAMC,OAAO7C,MAAMpD,KAAMqG,EAAGjD,WAIpC7E,EAAIwH,QAAQ/F,KAAMgG,QAGfzH,KClINtB,EAAU,CACnBqJ,WAAY,CACRC,SAAoB,2BACA,eACpBC,KAAoB,oBACpBC,MAAoB,mBACpBC,MAAoB,mBACpBC,QAAS,CACLJ,SAAgB,qBACA,GAChBG,MAAgB,eAGxBE,oBAAwB,EACxBzC,YAAa,CACTC,WAAoB,CAACF,EAA0BC,YAAYC,YAC3DyB,YAAoB3B,EAA0BC,YAAY0B,aAE9DgB,gBAAiB,CACbC,MAAoB,WACpBC,YAAoB,cACpB7J,QAAS,gBAC2B,0BACA,oBAEpC8J,OAAoB,MACpBC,KAAoB,cACpBC,SAAoB,SACpB9J,QAAoB,GAExB+J,SAAS,CACLC,UAA2B,cAC3BC,aAA2B,uBAC3BC,wBAA2B,gEAE/BC,UAAW,CACPrJ,MAAY,mEAEZsJ,MAAY,yJAEZf,MAAY,8FAEZgB,QAAY,uEAEZzD,SAAY,8VAWZ0D,OAAY,yJAIZC,SAAY,iIAEZhB,QAAS,SACO,0JAKZiB,OAAY,qFAEZC,OAAY,oOAOZzB,QAAY,yQAWpB0B,eAAwB,GCzFfC,EAAY,CACrBC,aAAc,GACdC,YAAa,UAAYlL,SAASC,KAAO,8CCFhCkL,EAA6B,SAAEH,EAAWI,OAAWC,yDAAmB,GAE3EC,EAAWC,eAAe/E,UAAWwE,EAAUE,gBAEjDI,UACME,EAAiBF,EAASzH,OAExB4H,EAAG,EAAGA,EAAGD,EAAgBC,IAAK,KAC5BC,EAASJ,EAASG,MAEpBC,EAAOC,QAAUP,EAAW,IACxBC,GACIK,EAAOrF,QAAUgF,kBAIlBI,UAKX,GCjBCG,EAAc,CAEvBC,OAAQ,SAAUC,OACRC,EAAOD,EAAME,OAAOjD,OAC1B+C,EAAMzI,KAAKxC,MAAK,WACRkL,EAAK7L,QAAQ6K,eACbQ,eAAevF,WAAY+F,EAAKf,UAAUE,iBAKtDe,WAAY,SAAUH,OAEZ1I,EAAY0I,EAAM/D,KAClBhE,EAAU+H,EAAME,OAChBD,EAAOhI,EAAQ2D,QAAQ,QAAQqB,OAC/BiC,EAAYe,EAAKf,UACjBkB,EAAcnI,EAAQ2D,QAASqE,EAAK7L,QAAQuI,aAAaW,mBACzD+C,EAAapI,EAAQsC,MACrB+F,EAAgBrI,EAAQC,QAAQ,iBAChCqI,EAAgBtI,EAAQC,QAAQ,uBAChCoE,EAAiBrE,EAAQC,QAAQ,wBACjCqE,EAAYD,EAAiB8D,EAAY3D,cAAcxE,EAAQkE,aAAa,uBAAyB,KAGrGqE,EAASlE,EAAiBC,EAAYtE,EACtC8C,EAAayF,EAAOpF,GAAKoF,EAAOpF,GAAGqF,MAAM,KAAK,GAAK,eACnDC,EAA+B1I,EAAsBC,GACrDmE,EAActB,EAAkBmF,EAAK1I,KAAMwD,MAG7CjD,EAAcsE,UAAuB,KAGpCsE,GAA8C,WAAdpJ,IAC/BoJ,GAA8C,WAAdpJ,EACrC,IAGO2I,EAAK7L,QAAQ6K,gBAAkBhH,EAAQC,QAAQ,0BAA2B,KACpEyI,EAAatB,EAA4BH,EAAWjH,EAAQnC,OAAOwK,GAAgBD,GACnFO,EAAwBvB,EAA4BH,EAAWjH,EAAQnC,KAAO,SAEhFqJ,EAAeD,EAAUC,gBAExBoB,GAAkBjE,IAA6C,IAA3BsE,GACrCzB,EAAa0B,OAAOD,EAAuB,IAG3B,IAAhBD,EACIL,EACKrI,EAAQyE,SAAWyC,EAAawB,GAAYpG,QAAU8F,EAKvDlB,EAAahI,KAAM,CAAE0I,MAAO5H,EAAQnC,KAAMyE,MAAO8F,IAHjDlB,EAAa0B,OAAOF,EAAY,GAMjB,KAAfN,EACAlB,EAAawB,GAAYpG,MAAQ8F,EAEjClB,EAAa0B,OAAOF,EAAY,WAIrB,KAAfN,EAAmB,IACf/D,GAAiC,KAAf+D,EAAmB,KAC/BS,EAAkBzB,EAA4BH,EAAW3C,EAAUzG,OAChD,IAArBgL,GACA3B,EAAa0B,OAAOC,EAAiB,GAEzC3B,EAAahI,KAAM,CAAE0I,MAAOtD,EAAUzG,KAAMyE,MAAOgC,EAAUhC,WAEjE4E,EAAahI,KAAM,CAAE0I,MAAO5H,EAAQnC,KAAMyE,MAAO8F,IAC7CE,EAAe,KACTQ,EAAc9I,EAAQ2D,QAAQ,QAAQa,cAAe,yBAA2BxE,EAAQmD,GAAK,MACnG+D,EAAahI,KAAM,CAAE0I,MAAOkB,EAAYjL,KAAMyE,MAAOwG,EAAYxG,SAK7EkF,eAAenF,UAAW4E,EAAUE,YAAaD,QAIjB,IAAzB/C,EAAYC,WACnBpE,EAAQoE,UAAW,KAO/B2E,cAAe,SAAUhB,OACf/H,EAAU+H,EAAMzI,KAAKU,QACrB8G,EAASiB,EAAMzI,KAAKwH,OACpBtD,EAAWuE,EAAME,OAAOjD,OAExBlC,EAAa9C,EAAQmD,GAAKnD,EAAQmD,GAAGqF,MAAM,KAAK,GAAK,eACrDrE,EAActB,EAAkBW,EAASlE,KAAMwD,MAEjDgE,GAAU7I,EAAckG,EAAYoC,cAAe,KAC7CyC,EAAgBhJ,EAAQ2D,QAASH,EAASrH,QAAQuI,aAAaW,mBAAoBb,cAAc,0BACjGyE,EAAavL,OAAOoB,KAAKgI,GAAQ1G,QAAO,SAAC8I,EAASrL,OAC9C0I,EAAepC,EAAYoC,aAAa1I,IAAS,UAChDqL,GAAW3C,EAAe/C,EAASrH,QAAQsK,UAAUrJ,MAAMoD,QAAQ,mBAAoB+F,GAAgB,MAC/G,IAEHyC,EAAcG,UAAYF,KC/GzBG,EAAqB,eAAEC,yDAAc,UAEvC5I,EAAU4I,GAAcjJ,QAAO,SAACkJ,EAAaC,UACzCD,2BAAiCC,EAAIjH,mBAAUiH,EAAI5D,qBAC3D,KCJM6D,EAA0B,SAAEC,EAAWC,EAAYC,OACtDC,EAAgB,CAAC,OAAQ,KAAM,QAAS,SAAU,UAAW,QAE/D,sBAAsBC,KAAKJ,EAAUzF,OACrC4F,EAAc1K,KAAK,OAAQ,aAG3B6B,EAAS,UAEbrD,OAAOoB,KAAK2K,GACP7K,QAAO,SAAAf,UAAyC,IAAjC+L,EAAcE,QAAQjM,MACrCD,SAAQ,SAAAC,GACLkD,cAAclD,eAAS4L,EAAU5L,WAGrC4L,EAAUnK,MACV5B,OAAOoB,KAAK2K,EAAUnK,MAAM1B,SAAQ,SAAAC,GAChCkD,mBAAmBD,EAAYjD,gBAAU4L,EAAUnK,KAAKzB,WAI5D8L,IACA5I,GAAU,aAGV0I,EAAUnE,UACVvE,GAAU,uBAGdA,kBAAkB2I,QAGJxI,QClCL6I,EAAe,SAAEtD,EAAWuD,SAC9B,CACHpC,MAAOnB,EAAUuD,IAAevD,EAAUC,MAC1Cf,MAAO,oCAAoCkE,KAAKG,GAAcvD,EAAUd,MAAQ,GAChFE,QAASY,EAAUZ,QAAQmE,IAAevD,EAAUZ,kBCC/CoE,EAAkB,SAAlBA,EAAoB9N,EAAS+N,EAAaC,OAE/CC,EAAiB,GACjBC,EAAe,UAEnB5J,EAAUyJ,GAActM,SAAQ,SAACuH,EAAQmF,OAEjCC,EAIEP,EAA6B,WAAhB7E,EAAOnB,KAAoB,SAAWmB,EAAOnB,QAE7C,WAAfgG,GAA2BK,IAAiBL,GAEhDK,EAAeL,EAEXG,EAAUjH,SAASsH,SACnBrF,EAAS7G,EAAa,GAAI6G,EAAQ,CAAC7F,KAAK,CAACkL,OAAOL,EAAUjH,SAASsH,eAGjEd,YAAgBM,cAAcG,EAAUM,qBAAYN,EAAUjH,SAASC,eAAqB,WAAf6G,EAA2BM,EAAQ,EAAKnF,EAAOhC,IAC5HuH,EAAa,CACfC,eAAgBR,EAAUjH,SAASoH,MAAQ,EAC3CM,eAAgBzO,EAAQqJ,WAAWK,QAAQmE,IAAe7N,EAAQqJ,WAAWK,gBAC7EgF,gBAAiBrB,EAAyBrE,EAAQuE,EAAYS,EAAUjH,SAASyG,YACjFmB,aAAc3O,EAAQqJ,WAAWwE,IAAe7N,EAAQqJ,mBAExDwE,WAAAA,EACAN,WAAAA,EACAqB,YAAa,GAEbC,YAAa7F,EAAOQ,OAAS,GAC7BsF,aAAc9O,EAAQqJ,WAAWG,OAGjCuF,EAAmB,MACnB/F,EAAOG,QAAS,KACV6F,EAAchG,EAAOG,QAAQtB,MAAQ,SACrCoH,EAAkC,WAAhBD,EAClBE,EAAaD,EAAkB9M,EAAa,GAAI6G,GAAUA,EAAOG,QAEvE+F,EAAWrH,KAAOoH,EAAkB,SAAWD,EAE/CE,EAAWlI,GAAK,GAChBkI,EAAW/L,KAAOhB,EAAa,GAAI+M,EAAW/L,KAAM,CAACgM,aAAa,IAAI5B,WAC/D2B,EAAW/F,YAEZiG,EAAoB,CACtBV,gBAAiBrB,EAAwB6B,MAA0C,GACnFrB,WAAYmB,EACZJ,YAAa,QACbD,aAAcM,EAAkBjP,EAAQqJ,WAAWoB,OAAUzK,EAAQqJ,WAAW2F,IAAgBhP,EAAQqJ,uBAG5G0F,EAAmB/O,EAAQsK,UAAU0E,IAAgBhP,EAAQsK,UAAUC,MACnE0E,EAAiB,KACXI,EAAcpC,EAAoBjE,EAAOG,SAC/C4F,EAAmBA,EAAiB1K,QAAQ,kBAAmBgL,GAGnEN,EAAmBhL,EAA0BqL,EAAmBL,OAK9DO,EAAwBtG,EAAOG,QAAU,UAAaH,EAAO4B,OAAS,SAAWiD,EACjFvD,EAAYsD,EAAc5N,EAAQsK,UAAWgF,GAE/CC,EAAmB,GACnBvG,EAAO4B,SACP2E,EAAmBzB,EAAiB9N,EAASgJ,EAAO4B,OAAQoD,QAG5DqB,EAAc,GACC,WAAfxB,IACAwB,EAAcpC,EAAoBc,IAGtCK,EAAa9D,EAAUZ,QACNrF,QAAQ,uBAAwB0K,GAChC1K,QAAQ,oBAAqBiG,EAAUmB,OACvCpH,QAAQ,kBAAmBgL,GAC3BhL,QAAQ,oBAAqBiG,EAAUd,OACvCnF,QAAQ,uBAAwBkL,GACjDtB,GAAkBlK,EAA0BwK,EAAYH,OAIrDH,GC3FEuB,EAAiB,SAAEjI,EAAQvH,EAASyP,WAEvCC,EAAgBpL,EAAUmL,EAAW7I,WACrC+I,EAAeD,EAAc/L,OAE/BiM,EAAY,cAERC,OACE7H,EAAc0H,EAAcG,GAE9BC,EAAS9P,EAAQsK,UAAUvD,SACzBJ,EAAaqB,EAAYhB,GACzBwH,EAAiBqB,EAAI,EACrB7B,EAAY,CACdM,SAAUmB,EAAWzI,GACrBD,SAAU,CACNC,GAAIL,EACJwH,MAAO0B,EACPrC,aAAcxF,EAAYC,WAI9BD,EAAYqG,SACZL,EAAUjH,SAASsH,OAASrG,EAAYqG,YAGxC0B,EAAcjC,EAAiB9N,EAASgI,EAAYc,QAASkF,MAG7DhG,EAAYgI,SAAU,KAChBC,EAAe1I,EAAOC,QAAQ,6BAA6Ba,cAAc,mCAC/E4H,EAAaC,aAAa,mBAAoBvJ,GAE9CqB,EAAYc,QAAQrH,SAAQ,SAACuH,EAAQmF,OAC3BgC,EAAeF,EAAavI,iBAAiB,gBAAgByG,GAC7DiC,EAAa,CACXpJ,aAAOgC,EAAOnB,iBAAQmG,EAAUM,qBAAY3H,cAAcqC,EAAOhC,IACjEtF,eAASyO,EAAazO,aAAO8M,GAC7B3G,KAAMmB,EAAOnB,KACb1B,MAAO6C,EAAO7C,MACd8B,WAAYD,EAAYC,UAGhC1G,OAAOoB,KAAKyN,GAAY3O,SAAQ,SAAAC,GAC5ByO,EAAazO,GAAQ0O,EAAW1O,UAK9B2O,EAAaF,EAAa3I,QAAQ,iBACxC6I,EAAWhI,cAAc,SAAS6H,aAAa,MAAOE,EAAWpJ,IACjEqJ,EAAWhI,cAAc,gBAAgB2E,UAAYhE,EAAOQ,MAC5DyG,EAAa5H,cAAc,mBAAmB2E,UAAYhF,EAAYjB,2BAMxEoD,EAAYnC,EAAYqG,OAASjI,KAAKK,MAAMuB,EAAYqG,QAAU,GAClEiC,EAAYnG,EAAU,IAAM,GAC5BoG,EAAYpG,EAAU,IAAM,GAC5BqG,EAAgBrG,GAAanK,EAAQkK,SAASC,UAAY,KAAMoG,EAAW,IAAKvQ,EAAQkK,SAASC,UAAW,IAAM,GAElHsG,EAAe,CACjB9J,WAAAA,EACA6H,eAAAA,EACAkC,aAAc1I,EAAYjB,SAAWyJ,EACrCT,YAAAA,EACAjD,WAAY9M,EAAQ2J,mBAAqB3J,EAAQsK,UAAUZ,QAAQiB,OAAS,OAEhFmF,EAAS/L,EAA0B0M,EAAcX,GAE7C9P,EAAQ2J,mBAAoB,KACxBS,EAA6B,KAAdD,EAAmBnK,EAAQkK,SAASG,wBAA2BrC,EAAYoC,cAAgBpK,EAAQkK,SAASE,aAG3HtI,EAAcsI,KACdA,EAAe,IAGnB0F,EAASA,EAAOzL,QAAS,sBAAuB+F,GAGpDwF,GAAa7L,EAA0B,CAACuM,UAAAA,EAAWC,UAAAA,GAAYT,IA5E3DD,EAAE,EAAGA,EAAEF,EAAcE,MAArBA,UA+EDD,GCzFEe,EAAkB,SAAEpJ,EAAQuD,OAE/B8F,EAAKvF,eAAe/E,UAAWwE,EAAUE,gBAC3C4F,EAAI,KACEtJ,EAAeC,EAAOC,QAAQ,6BACpCsD,EAAUC,aAAe6F,EACzBA,EAAGnP,SAAQ,SAAAoP,OACDC,EAAaxJ,EAAae,cAAe,UAAYwI,EAAKpF,MAAQ,MAClEsF,EAAoBD,EAAWhN,QAAQ,qCACvCD,EAAYkN,EAAoBzJ,EAAae,cAAc,UAAYwI,EAAKpF,MAAQ,aAAeoF,EAAK1K,MAAQ,MAAQ2K,EAE1HC,EACAlN,EAAQyE,SAAU,EAElBzE,EAAQsC,MAAQ0K,EAAK1K,WCXxB6K,EAAc,SAAEzJ,EAAQvH,EAAS8K,EAAW3H,OAE/C8N,EAAW1J,EAAOQ,aAAa,SAAW,GAGhD+C,EAAUE,YAAcF,EAAUE,YAAY3G,QAAS,eAAgBlB,EAAK6D,IAC5E8D,EAAUE,YAAcF,EAAUE,YAAY3G,QAAS,qBAAsB4M,OAEvEC,EAAY1B,EAAgBjI,EAAQvH,EAASmD,GACnDoE,EAAOc,cAAc,wBAAwB8I,mBAAoB,YAAaD,GAG1ElR,EAAQ6K,eACR8F,EAAiBpJ,EAAQuD,ICdpBsG,EAAU,SAAA7J,GAEnBA,EAAOsB,OAAO7I,QAAQuI,aAAa8I,iBAAiBhF,MAAM,KAAK5K,SAAQ,SAAAyB,OAC7DoO,EAA6B,SAAdpO,EACrBqE,EAAOgK,oBAAoBrO,EAAWwI,EAAYK,WAAYuF,MAElE/J,EAAOgK,oBAAoB,kBAAmB7F,EAAYC,SCGxD6F,EAAU,QAEVC,uDAEWlK,WAAQmK,yDAAa,iBACzBA,EAAW7R,KAAiC,iBAAnB6R,EAAW7R,UAC/B,IAAI8R,MAAM,iDAGd3R,EAAUmC,EAAc,GAAIsP,EAAOzP,UAAUhC,QAAS0R,GAEvDjM,IAAaC,cACd1F,EAAQ6K,eAAgB,OAKtBgB,kBADCtE,EAAQvH,IAEf6L,EAAKf,UAAYA,EACjBe,EAAK7L,QAAQuI,aAAa8I,iBAAiBhF,MAAM,KAAK5K,SAAQ,SAAAyB,OACpDoO,EAA6B,SAAdpO,EACrB2I,EAAKtE,OAAOqK,iBAAiB1O,EAAWwI,EAAYK,WAAYuF,MAGpEzF,EAAKtE,OAAOc,cAAc,wBAAwB8I,mBAAoB,cAAetF,EAAK7L,QAAQsK,UAAUE,aAGtGqH,EAAiBlS,EAASkM,EAAK7L,QAAQH,IAAKgM,EAAK7L,QAAQ4J,iBAC1DjJ,MAAK,SAAAC,SACoC,YAAlCA,EAASkR,OAAOvM,cACTxE,QAAQC,OAAOJ,GAEnB,IAAIG,SAAQ,SAAAgR,GACflG,EAAK1I,KAAOvC,EAASuC,KACjB0I,EAAK1I,KAAKyD,WAAaiF,EAAK1I,KAAKyD,UAAUjD,OAAS,GACpDqN,EAAYnF,EAAKtE,OAAQsE,EAAK7L,QAAS6L,EAAKf,UAAWe,EAAK1I,MAC5D9B,EAAWwK,EAAK1I,MAChB0I,EAAKtE,OAAOqK,iBAAiB,uBAAwBlG,EAAYkB,eACjEf,EAAKtE,OAAOqK,iBAAiB,kBAAmBlG,EAAYC,oDAC/ChL,MAAK,WACdkL,EAAKmG,eAAgB,EACrBnG,EAAKtE,OAAOC,QAAQ,6BAA6ByK,UAAUC,IAAI,yBAC/DH,EAAQnR,OAGZmR,EAAQnR,kBAIX,eACCuR,EAAetG,EAAKtE,OAAOc,cAAc,2BAC3C8J,GACAA,EAAaC,WAAWC,YAAYF,aAIhDnP,EAAqB6I,EAAKtE,OAAQpG,EAAaC,KAAMyQ,iDAIrDT,EAAQ7K,KAAKgB,yFAIEmK,GACfD,EAAOzP,UAAUhC,QAAUmC,EAAa,GAAIsP,EAAOzP,UAAUhC,QAAS0R,UA/DzDY,IAoErBb,EAAOzP,UAAUgQ,eAAgB,EACjCP,EAAOzP,UAAUhC,QAAUA,EAC3ByR,EAAOzP,UAAUwP,QAAUA"}